"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/leva";
exports.ids = ["vendor-chunks/leva"];
exports.modules = {

/***/ "(ssr)/./node_modules/leva/dist/leva.esm.js":
/*!********************************************!*\
  !*** ./node_modules/leva/dist/leva.esm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Leva: () => (/* binding */ Leva),\n/* harmony export */   LevaInputs: () => (/* reexport safe */ _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1),\n/* harmony export */   LevaPanel: () => (/* binding */ LevaPanel),\n/* harmony export */   LevaStoreProvider: () => (/* reexport safe */ _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a6),\n/* harmony export */   button: () => (/* binding */ button),\n/* harmony export */   buttonGroup: () => (/* binding */ buttonGroup),\n/* harmony export */   folder: () => (/* binding */ folder),\n/* harmony export */   levaStore: () => (/* binding */ levaStore),\n/* harmony export */   monitor: () => (/* binding */ monitor),\n/* harmony export */   useControls: () => (/* binding */ useControls),\n/* harmony export */   useCreateStore: () => (/* binding */ useCreateStore),\n/* harmony export */   useStoreContext: () => (/* reexport safe */ _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)\n/* harmony export */ });\n/* harmony import */ var _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector-plugin-a4ae7e76.esm.js */ \"(ssr)/./node_modules/leva/dist/vector-plugin-a4ae7e76.esm.js\");\n/* harmony import */ var v8n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! v8n */ \"(ssr)/./node_modules/v8n/dist/v8n.esm.js\");\n/* harmony import */ var colord__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! colord */ \"(ssr)/./node_modules/colord/index.mjs\");\n/* harmony import */ var colord_plugins_names__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! colord/plugins/names */ \"(ssr)/./node_modules/colord/plugins/names.mjs\");\n/* harmony import */ var dequal_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal/lite */ \"(ssr)/./node_modules/dequal/lite/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_colorful__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-colorful */ \"(ssr)/./node_modules/react-colorful/dist/index.mjs\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/leva/node_modules/zustand/esm/shallow.js\");\n/* harmony import */ var react_dropzone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-dropzone */ \"(ssr)/./node_modules/react-dropzone/dist/es/index.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/leva/node_modules/zustand/esm/index.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! zustand/middleware */ \"(ssr)/./node_modules/leva/node_modules/zustand/esm/middleware.js\");\n/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom/client */ \"(ssr)/./node_modules/next/dist/compiled/react-dom/client.js\");\n/* harmony import */ var merge_value__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! merge-value */ \"(ssr)/./node_modules/merge-value/index.js\");\n/* harmony import */ var merge_value__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(merge_value__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst join = (...args)=>args.filter(Boolean).join(\".\");\nfunction getKeyPath(path) {\n    const dir = path.split(\".\");\n    return [\n        dir.pop(),\n        dir.join(\".\") || undefined\n    ];\n}\nfunction getValuesForPaths(data, paths) {\n    return Object.entries((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.p)(data, paths)).reduce((acc, [, { value, disabled, key }])=>{\n        acc[key] = disabled ? undefined : value;\n        return acc;\n    }, {});\n}\nfunction useCompareMemoize(value, deep) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const compare = deep ? dequal_lite__WEBPACK_IMPORTED_MODULE_2__.dequal : zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n    if (!compare(value, ref.current)) {\n        ref.current = value;\n    }\n    return ref.current;\n}\nfunction useDeepMemo(fn, deps) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(fn, useCompareMemoize(deps, true));\n}\nfunction useToggle(toggled) {\n    const wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const firstRender = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        if (!toggled) {\n            wrapperRef.current.style.height = \"0px\";\n            wrapperRef.current.style.overflow = \"hidden\";\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (firstRender.current) {\n            firstRender.current = false;\n            return;\n        }\n        let timeout;\n        const ref = wrapperRef.current;\n        const fixHeight = ()=>{\n            if (toggled) {\n                ref.style.removeProperty(\"height\");\n                ref.style.removeProperty(\"overflow\");\n                contentRef.current.scrollIntoView({\n                    behavior: \"smooth\",\n                    block: \"nearest\"\n                });\n            }\n        };\n        ref.addEventListener(\"transitionend\", fixHeight, {\n            once: true\n        });\n        const { height } = contentRef.current.getBoundingClientRect();\n        ref.style.height = height + \"px\";\n        if (!toggled) {\n            ref.style.overflow = \"hidden\";\n            timeout = window.setTimeout(()=>ref.style.height = \"0px\", 50);\n        }\n        return ()=>{\n            ref.removeEventListener(\"transitionend\", fixHeight);\n            clearTimeout(timeout);\n        };\n    }, [\n        toggled\n    ]);\n    return {\n        wrapperRef,\n        contentRef\n    };\n}\nconst useVisiblePaths = (store)=>{\n    const [paths, setPaths] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(store.getVisiblePaths());\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        setPaths(store.getVisiblePaths());\n        const unsub = store.useStore.subscribe(store.getVisiblePaths, setPaths, {\n            equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n        });\n        return ()=>unsub();\n    }, [\n        store\n    ]);\n    return paths;\n};\nfunction useValuesForPath(store, paths, initialData) {\n    const valuesForPath = store.useStore((s)=>{\n        const data = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, initialData), s.data);\n        return getValuesForPaths(data, paths);\n    }, zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n    return valuesForPath;\n}\nfunction usePopin(margin = 3) {\n    const popinRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [shown, setShow] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const show = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>setShow(true), []);\n    const hide = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>setShow(false), []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        if (shown) {\n            const { bottom, top, left } = popinRef.current.getBoundingClientRect();\n            const { height } = wrapperRef.current.getBoundingClientRect();\n            const direction = bottom + height > window.innerHeight - 40 ? \"up\" : \"down\";\n            wrapperRef.current.style.position = \"fixed\";\n            wrapperRef.current.style.zIndex = \"10000\";\n            wrapperRef.current.style.left = left + \"px\";\n            if (direction === \"down\") wrapperRef.current.style.top = bottom + margin + \"px\";\n            else wrapperRef.current.style.bottom = window.innerHeight - top + margin + \"px\";\n        }\n    }, [\n        margin,\n        shown\n    ]);\n    return {\n        popinRef,\n        wrapperRef,\n        shown,\n        show,\n        hide\n    };\n}\n(0,colord__WEBPACK_IMPORTED_MODULE_7__.extend)([\n    colord_plugins_names__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n]);\nconst convertMap = {\n    rgb: \"toRgb\",\n    hsl: \"toHsl\",\n    hsv: \"toHsv\",\n    hex: \"toHex\"\n};\nv8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"].extend({\n    color: ()=>(value)=>(0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(value).isValid()\n});\nconst schema$2 = (o)=>(0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().color().test(o);\nfunction convert(color, { format, hasAlpha, isString }) {\n    const convertFn = convertMap[format] + (isString && format !== \"hex\" ? \"String\" : \"\");\n    const result = color[convertFn]();\n    return typeof result === \"object\" && !hasAlpha ? (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.o)(result, [\n        \"a\"\n    ]) : result;\n}\nconst sanitize$2 = (v, settings)=>{\n    const color = (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(v);\n    if (!color.isValid()) throw Error(\"Invalid color\");\n    return convert(color, settings);\n};\nconst format$1 = (v, settings)=>{\n    return convert((0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(v), (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, settings), {}, {\n        isString: true,\n        format: \"hex\"\n    }));\n};\nconst normalize$3 = ({ value })=>{\n    const _f = (0,colord__WEBPACK_IMPORTED_MODULE_7__.getFormat)(value);\n    const format = _f === \"name\" ? \"hex\" : _f;\n    const hasAlpha = typeof value === \"object\" ? \"a\" in value : _f === \"hex\" && value.length === 8 || /^(rgba)|(hsla)|(hsva)/.test(value);\n    const settings = {\n        format,\n        hasAlpha,\n        isString: typeof value === \"string\"\n    };\n    return {\n        value: sanitize$2(value, settings),\n        settings\n    };\n};\nvar props$2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$2,\n    sanitize: sanitize$2,\n    format: format$1,\n    normalize: normalize$3\n});\nconst ColorPreview = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    boxSizing: \"border-box\",\n    borderRadius: \"$sm\",\n    overflow: \"hidden\",\n    cursor: \"pointer\",\n    height: \"$rowHeight\",\n    width: \"$rowHeight\",\n    backgroundColor: \"#fff\",\n    backgroundImage: `url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill-opacity=\".05\"><path d=\"M8 0h8v8H8zM0 8h8v8H0z\"/></svg>')`,\n    $inputStyle: \"\",\n    $hover: \"\",\n    zIndex: 1,\n    variants: {\n        active: {\n            true: {\n                $inputStyle: \"$accent1\"\n            }\n        }\n    },\n    \"&::before\": {\n        content: '\"\"',\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        right: 0,\n        left: 0,\n        backgroundColor: \"currentColor\",\n        zIndex: 1\n    }\n});\nconst PickerContainer = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    display: \"grid\",\n    gridTemplateColumns: \"$sizes$rowHeight auto\",\n    columnGap: \"$colGap\",\n    alignItems: \"center\"\n});\nconst PickerWrapper = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    width: \"$colorPickerWidth\",\n    height: \"$colorPickerHeight\",\n    \".react-colorful\": {\n        width: \"100%\",\n        height: \"100%\",\n        boxShadow: \"$level2\",\n        cursor: \"crosshair\"\n    },\n    \".react-colorful__saturation\": {\n        borderRadius: \"$sm $sm 0 0\"\n    },\n    \".react-colorful__alpha, .react-colorful__hue\": {\n        height: 10\n    },\n    \".react-colorful__last-control\": {\n        borderRadius: \"0 0 $sm $sm\"\n    },\n    \".react-colorful__pointer\": {\n        height: 12,\n        width: 12\n    }\n});\nfunction convertToRgb(value, format) {\n    return format !== \"rgb\" ? (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(value).toRgb() : value;\n}\nfunction Color({ value, displayValue, settings, onUpdate }) {\n    const { emitOnEditStart, emitOnEditEnd } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    const { format, hasAlpha } = settings;\n    const { popinRef, wrapperRef, shown, show, hide } = usePopin();\n    const timer = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const [initialRgb, setInitialRgb] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>convertToRgb(value, format));\n    const ColorPicker = hasAlpha ? react_colorful__WEBPACK_IMPORTED_MODULE_9__.RgbaColorPicker : react_colorful__WEBPACK_IMPORTED_MODULE_9__.RgbColorPicker;\n    const showPicker = ()=>{\n        setInitialRgb(convertToRgb(value, format));\n        show();\n        emitOnEditStart();\n    };\n    const hidePicker = ()=>{\n        hide();\n        emitOnEditEnd();\n        window.clearTimeout(timer.current);\n    };\n    const hideAfterDelay = ()=>{\n        timer.current = window.setTimeout(hidePicker, 500);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        return ()=>window.clearTimeout(timer.current);\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ColorPreview, {\n        ref: popinRef,\n        active: shown,\n        onClick: ()=>showPicker(),\n        style: {\n            color: displayValue\n        }\n    }), shown && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.P, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.O, {\n        onPointerUp: hidePicker\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(PickerWrapper, {\n        ref: wrapperRef,\n        onMouseEnter: ()=>window.clearTimeout(timer.current),\n        onMouseLeave: (e)=>e.buttons === 0 && hideAfterDelay()\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ColorPicker, {\n        color: initialRgb,\n        onChange: onUpdate\n    }))));\n}\nfunction ColorComponent() {\n    const { value, displayValue, label, onChange, onUpdate, settings } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(PickerContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Color, {\n        value: value,\n        displayValue: displayValue,\n        onChange: onChange,\n        onUpdate: onUpdate,\n        settings: settings\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.V, {\n        value: displayValue,\n        onChange: onChange,\n        onUpdate: onUpdate\n    })));\n}\nvar color = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: ColorComponent\n}, props$2));\nfunction Vector3dComponent() {\n    const { label, displayValue, onUpdate, settings } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a, {\n        value: displayValue,\n        settings: settings,\n        onUpdate: onUpdate\n    }));\n}\nvar vector3d = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: Vector3dComponent\n}, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.g)([\n    \"x\",\n    \"y\",\n    \"z\"\n])));\nconst JoystickTrigger = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    position: \"relative\",\n    backgroundColor: \"$elevation3\",\n    borderRadius: \"$sm\",\n    cursor: \"pointer\",\n    height: \"$rowHeight\",\n    width: \"$rowHeight\",\n    touchAction: \"none\",\n    $draggable: \"\",\n    $hover: \"\",\n    \"&:active\": {\n        cursor: \"none\"\n    },\n    \"&::after\": {\n        content: '\"\"',\n        backgroundColor: \"$accent2\",\n        height: 4,\n        width: 4,\n        borderRadius: 2\n    }\n});\nconst JoystickPlayground = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    width: \"$joystickWidth\",\n    height: \"$joystickHeight\",\n    borderRadius: \"$sm\",\n    boxShadow: \"$level2\",\n    position: \"fixed\",\n    zIndex: 10000,\n    overflow: \"hidden\",\n    $draggable: \"\",\n    transform: \"translate(-50%, -50%)\",\n    variants: {\n        isOutOfBounds: {\n            true: {\n                backgroundColor: \"$elevation1\"\n            },\n            false: {\n                backgroundColor: \"$elevation3\"\n            }\n        }\n    },\n    \"> div\": {\n        position: \"absolute\",\n        $flexCenter: \"\",\n        borderStyle: \"solid\",\n        borderWidth: 1,\n        borderColor: \"$highlight1\",\n        backgroundColor: \"$elevation3\",\n        width: \"80%\",\n        height: \"80%\",\n        \"&::after,&::before\": {\n            content: '\"\"',\n            position: \"absolute\",\n            zindex: 10,\n            backgroundColor: \"$highlight1\"\n        },\n        \"&::before\": {\n            width: \"100%\",\n            height: 1\n        },\n        \"&::after\": {\n            height: \"100%\",\n            width: 1\n        }\n    },\n    \"> span\": {\n        position: \"relative\",\n        zindex: 100,\n        width: 10,\n        height: 10,\n        backgroundColor: \"$accent2\",\n        borderRadius: \"50%\"\n    }\n});\nfunction Joystick({ value, settings, onUpdate }) {\n    const timeout = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const outOfBoundsX = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const outOfBoundsY = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const stepMultiplier = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(1);\n    const [joystickShown, setShowJoystick] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [isOutOfBounds, setIsOutOfBounds] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [spanRef, set] = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)();\n    const joystickeRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const playgroundRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        if (joystickShown) {\n            const { top, left, width, height } = joystickeRef.current.getBoundingClientRect();\n            playgroundRef.current.style.left = left + width / 2 + \"px\";\n            playgroundRef.current.style.top = top + height / 2 + \"px\";\n        }\n    }, [\n        joystickShown\n    ]);\n    const { keys: [v1, v2], joystick } = settings;\n    const yFactor = joystick === \"invertY\" ? 1 : -1;\n    const { [v1]: { step: stepV1 }, [v2]: { step: stepV2 } } = settings;\n    const wpx = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"sizes\", \"joystickWidth\");\n    const hpx = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"sizes\", \"joystickHeight\");\n    const w = parseFloat(wpx) * 0.8 / 2;\n    const h = parseFloat(hpx) * 0.8 / 2;\n    const startOutOfBounds = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        if (timeout.current) return;\n        setIsOutOfBounds(true);\n        if (outOfBoundsX.current) set({\n            x: outOfBoundsX.current * w\n        });\n        if (outOfBoundsY.current) set({\n            y: outOfBoundsY.current * -h\n        });\n        timeout.current = window.setInterval(()=>{\n            onUpdate((v)=>{\n                const incX = stepV1 * outOfBoundsX.current * stepMultiplier.current;\n                const incY = yFactor * stepV2 * outOfBoundsY.current * stepMultiplier.current;\n                return Array.isArray(v) ? {\n                    [v1]: v[0] + incX,\n                    [v2]: v[1] + incY\n                } : {\n                    [v1]: v[v1] + incX,\n                    [v2]: v[v2] + incY\n                };\n            });\n        }, 16);\n    }, [\n        w,\n        h,\n        onUpdate,\n        set,\n        stepV1,\n        stepV2,\n        v1,\n        v2,\n        yFactor\n    ]);\n    const endOutOfBounds = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        window.clearTimeout(timeout.current);\n        timeout.current = undefined;\n        setIsOutOfBounds(false);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        function setStepMultiplier(event) {\n            stepMultiplier.current = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.m)(event);\n        }\n        window.addEventListener(\"keydown\", setStepMultiplier);\n        window.addEventListener(\"keyup\", setStepMultiplier);\n        return ()=>{\n            window.clearTimeout(timeout.current);\n            window.removeEventListener(\"keydown\", setStepMultiplier);\n            window.removeEventListener(\"keyup\", setStepMultiplier);\n        };\n    }, []);\n    const bind = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(({ first, active, delta: [dx, dy], movement: [mx, my] })=>{\n        if (first) setShowJoystick(true);\n        const _x = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(mx, -w, w);\n        const _y = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(my, -h, h);\n        outOfBoundsX.current = Math.abs(mx) > Math.abs(_x) ? Math.sign(mx - _x) : 0;\n        outOfBoundsY.current = Math.abs(my) > Math.abs(_y) ? Math.sign(_y - my) : 0;\n        let newX = value[v1];\n        let newY = value[v2];\n        if (active) {\n            if (!outOfBoundsX.current) {\n                newX += dx * stepV1 * stepMultiplier.current;\n                set({\n                    x: _x\n                });\n            }\n            if (!outOfBoundsY.current) {\n                newY -= yFactor * dy * stepV2 * stepMultiplier.current;\n                set({\n                    y: _y\n                });\n            }\n            if (outOfBoundsX.current || outOfBoundsY.current) startOutOfBounds();\n            else endOutOfBounds();\n            onUpdate({\n                [v1]: newX,\n                [v2]: newY\n            });\n        } else {\n            setShowJoystick(false);\n            outOfBoundsX.current = 0;\n            outOfBoundsY.current = 0;\n            set({\n                x: 0,\n                y: 0\n            });\n            endOutOfBounds();\n        }\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(JoystickTrigger, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        ref: joystickeRef\n    }, bind()), joystickShown && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.P, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(JoystickPlayground, {\n        ref: playgroundRef,\n        isOutOfBounds: isOutOfBounds\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"div\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n        ref: spanRef\n    }))));\n}\nconst Container$1 = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    display: \"grid\",\n    columnGap: \"$colGap\",\n    variants: {\n        withJoystick: {\n            true: {\n                gridTemplateColumns: \"$sizes$rowHeight auto\"\n            },\n            false: {\n                gridTemplateColumns: \"auto\"\n            }\n        }\n    }\n});\nfunction Vector2dComponent() {\n    const { label, displayValue, onUpdate, settings } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Container$1, {\n        withJoystick: !!settings.joystick\n    }, settings.joystick && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Joystick, {\n        value: displayValue,\n        settings: settings,\n        onUpdate: onUpdate\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a, {\n        value: displayValue,\n        settings: settings,\n        onUpdate: onUpdate\n    })));\n}\nconst _excluded$7 = [\n    \"joystick\"\n];\nconst plugin = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.g)([\n    \"x\",\n    \"y\"\n]);\nconst normalize$2 = (_ref)=>{\n    let { joystick = true } = _ref, input = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$7);\n    const { value, settings } = plugin.normalize(input);\n    return {\n        value,\n        settings: (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, settings), {}, {\n            joystick\n        })\n    };\n};\nvar vector2d = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: Vector2dComponent\n}, plugin), {}, {\n    normalize: normalize$2\n}));\nconst sanitize$1 = (v)=>{\n    if (v === undefined) return undefined;\n    if (v instanceof File) {\n        try {\n            return URL.createObjectURL(v);\n        } catch (e) {\n            return undefined;\n        }\n    }\n    if (typeof v === \"string\" && v.indexOf(\"blob:\") === 0) return v;\n    throw Error(`Invalid image format [undefined | blob | File].`);\n};\nconst schema$1 = (_o, s)=>typeof s === \"object\" && \"image\" in s;\nconst normalize$1 = ({ image })=>{\n    return {\n        value: image\n    };\n};\nvar props$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    sanitize: sanitize$1,\n    schema: schema$1,\n    normalize: normalize$1\n});\nconst ImageContainer = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    display: \"grid\",\n    gridTemplateColumns: \"$sizes$rowHeight auto 20px\",\n    columnGap: \"$colGap\",\n    alignItems: \"center\"\n});\nconst DropZone = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    overflow: \"hidden\",\n    height: \"$rowHeight\",\n    background: \"$elevation3\",\n    textAlign: \"center\",\n    color: \"inherit\",\n    borderRadius: \"$sm\",\n    outline: \"none\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    $inputStyle: \"\",\n    $hover: \"\",\n    $focusWithin: \"\",\n    $active: \"$accent1 $elevation1\",\n    variants: {\n        isDragAccept: {\n            true: {\n                $inputStyle: \"$accent1\",\n                backgroundColor: \"$elevation1\"\n            }\n        }\n    }\n});\nconst ImagePreview = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    boxSizing: \"border-box\",\n    borderRadius: \"$sm\",\n    height: \"$rowHeight\",\n    width: \"$rowHeight\",\n    $inputStyle: \"\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    variants: {\n        hasImage: {\n            true: {\n                cursor: \"pointer\",\n                $hover: \"\",\n                $active: \"\"\n            }\n        }\n    }\n});\nconst ImageLargePreview = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    width: \"$imagePreviewWidth\",\n    height: \"$imagePreviewHeight\",\n    borderRadius: \"$sm\",\n    boxShadow: \"$level2\",\n    pointerEvents: \"none\",\n    $inputStyle: \"\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n});\nconst Instructions = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    fontSize: \"0.8em\",\n    height: \"100%\",\n    padding: \"$rowGap $md\"\n});\nconst Remove = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flexCenter: \"\",\n    top: \"0\",\n    right: \"0\",\n    marginRight: \"$sm\",\n    height: \"100%\",\n    cursor: \"pointer\",\n    variants: {\n        disabled: {\n            true: {\n                color: \"$elevation3\",\n                cursor: \"default\"\n            }\n        }\n    },\n    \"&::after,&::before\": {\n        content: '\"\"',\n        position: \"absolute\",\n        height: 2,\n        width: 10,\n        borderRadius: 1,\n        backgroundColor: \"currentColor\"\n    },\n    \"&::after\": {\n        transform: \"rotate(45deg)\"\n    },\n    \"&::before\": {\n        transform: \"rotate(-45deg)\"\n    }\n});\nfunction ImageComponent() {\n    const { label, value, onUpdate, disabled } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    const { popinRef, wrapperRef, shown, show, hide } = usePopin();\n    const onDrop = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((acceptedFiles)=>{\n        if (acceptedFiles.length) onUpdate(acceptedFiles[0]);\n    }, [\n        onUpdate\n    ]);\n    const clear = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e)=>{\n        e.stopPropagation();\n        onUpdate(undefined);\n    }, [\n        onUpdate\n    ]);\n    const { getRootProps, getInputProps, isDragAccept } = (0,react_dropzone__WEBPACK_IMPORTED_MODULE_10__.useDropzone)({\n        maxFiles: 1,\n        accept: \"image/*\",\n        onDrop,\n        disabled\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ImageContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ImagePreview, {\n        ref: popinRef,\n        hasImage: !!value,\n        onPointerDown: ()=>!!value && show(),\n        onPointerUp: hide,\n        style: {\n            backgroundImage: value ? `url(${value})` : \"none\"\n        }\n    }), shown && !!value && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.P, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.O, {\n        onPointerUp: hide,\n        style: {\n            cursor: \"pointer\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ImageLargePreview, {\n        ref: wrapperRef,\n        style: {\n            backgroundImage: `url(${value})`\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DropZone, getRootProps({\n        isDragAccept\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"input\", getInputProps()), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Instructions, null, isDragAccept ? \"drop image\" : \"click or drop\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Remove, {\n        onClick: clear,\n        disabled: !value\n    })));\n}\nvar image = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: ImageComponent\n}, props$1));\nconst number = (0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().number();\nconst schema = (o, s)=>(0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().array().length(2).every.number().test(o) && (0,v8n__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().schema({\n        min: number,\n        max: number\n    }).test(s);\nconst format = (v)=>({\n        min: v[0],\n        max: v[1]\n    });\nconst sanitize = (value, { bounds: [MIN, MAX] }, prevValue)=>{\n    const _value = Array.isArray(value) ? format(value) : value;\n    const _newValue = {\n        min: prevValue[0],\n        max: prevValue[1]\n    };\n    const { min, max } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, _newValue), _value);\n    return [\n        (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(Number(min), MIN, Math.max(MIN, max)),\n        (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.h)(Number(max), Math.min(MAX, min), MAX)\n    ];\n};\nconst normalize = ({ value, min, max })=>{\n    const boundsSettings = {\n        min,\n        max\n    };\n    const _settings = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.n)(format(value), {\n        min: boundsSettings,\n        max: boundsSettings\n    });\n    const bounds = [\n        min,\n        max\n    ];\n    const settings = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, _settings), {}, {\n        bounds\n    });\n    const _value = sanitize(format(value), settings, value);\n    return {\n        value: _value,\n        settings\n    };\n};\nvar props = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema,\n    format: format,\n    sanitize: sanitize,\n    normalize: normalize\n});\nconst _excluded$6 = [\n    \"value\",\n    \"bounds\",\n    \"onDrag\"\n], _excluded2$1 = [\n    \"bounds\"\n];\nconst Container = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    display: \"grid\",\n    columnGap: \"$colGap\",\n    gridTemplateColumns: \"auto calc($sizes$numberInputMinWidth * 2 + $space$rowGap)\"\n});\nfunction IntervalSlider(_ref) {\n    let { value, bounds: [min, max], onDrag } = _ref, settings = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$6);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const minScrubberRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const maxScrubberRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const rangeWidth = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    const scrubberWidth = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"sizes\", \"scrubberWidth\");\n    const bind = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(({ event, first, xy: [x], movement: [mx], memo: _memo = {} })=>{\n        if (first) {\n            const { width, left } = ref.current.getBoundingClientRect();\n            rangeWidth.current = width - parseFloat(scrubberWidth);\n            const targetIsScrub = (event === null || event === void 0 ? void 0 : event.target) === minScrubberRef.current || (event === null || event === void 0 ? void 0 : event.target) === maxScrubberRef.current;\n            _memo.pos = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.j)((x - left) / width, min, max);\n            const delta = Math.abs(_memo.pos - value.min) - Math.abs(_memo.pos - value.max);\n            _memo.key = delta < 0 || delta === 0 && _memo.pos <= value.min ? \"min\" : \"max\";\n            if (targetIsScrub) _memo.pos = value[_memo.key];\n        }\n        const newValue = _memo.pos + (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.j)(mx / rangeWidth.current, 0, max - min);\n        onDrag({\n            [_memo.key]: (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.k)(newValue, settings[_memo.key])\n        });\n        return _memo;\n    });\n    const minStyle = `calc(${(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.r)(value.min, min, max)} * (100% - ${scrubberWidth} - 8px) + 4px)`;\n    const maxStyle = `calc(${1 - (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.r)(value.max, min, max)} * (100% - ${scrubberWidth} - 8px) + 4px)`;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.l, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        ref: ref\n    }, bind()), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.q, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.I, {\n        style: {\n            left: minStyle,\n            right: maxStyle\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.S, {\n        position: \"left\",\n        ref: minScrubberRef,\n        style: {\n            left: minStyle\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.S, {\n        position: \"right\",\n        ref: maxScrubberRef,\n        style: {\n            right: maxStyle\n        }\n    }));\n}\nfunction IntervalComponent() {\n    const { label, displayValue, onUpdate, settings } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    const _settings = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(settings, _excluded2$1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Container, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(IntervalSlider, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        value: displayValue\n    }, settings, {\n        onDrag: onUpdate\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a, {\n        value: displayValue,\n        settings: _settings,\n        onUpdate: onUpdate,\n        innerLabelTrim: 0\n    }))));\n}\nvar interval = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n    component: IntervalComponent\n}, props));\nconst createEventEmitter = ()=>{\n    const listenerMapping = new Map();\n    return {\n        on: (topic, listener)=>{\n            let listeners = listenerMapping.get(topic);\n            if (listeners === undefined) {\n                listeners = new Set();\n                listenerMapping.set(topic, listeners);\n            }\n            listeners.add(listener);\n        },\n        off: (topic, listener)=>{\n            const listeners = listenerMapping.get(topic);\n            if (listeners === undefined) {\n                return;\n            }\n            listeners.delete(listener);\n            if (listeners.size === 0) {\n                listenerMapping.delete(topic);\n            }\n        },\n        emit: (topic, ...args)=>{\n            const listeners = listenerMapping.get(topic);\n            if (listeners === undefined) {\n                return;\n            }\n            for (const listener of listeners){\n                listener(...args);\n            }\n        }\n    };\n};\nconst _excluded$5 = [\n    \"type\",\n    \"value\"\n], _excluded2 = [\n    \"onChange\",\n    \"transient\",\n    \"onEditStart\",\n    \"onEditEnd\"\n];\nconst Store = function Store() {\n    const store = (0,zustand__WEBPACK_IMPORTED_MODULE_11__[\"default\"])((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_12__.subscribeWithSelector)(()=>({\n            data: {}\n        })));\n    const eventEmitter = createEventEmitter();\n    this.storeId = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.t)();\n    this.useStore = store;\n    const folders = {};\n    const orderedPaths = new Set();\n    this.getVisiblePaths = ()=>{\n        const data = this.getData();\n        const paths = Object.keys(data);\n        const hiddenFolders = [];\n        Object.entries(folders).forEach(([path, settings])=>{\n            if (settings.render && paths.some((p)=>p.indexOf(path) === 0) && !settings.render(this.get)) hiddenFolders.push(path + \".\");\n        });\n        const visiblePaths = [];\n        orderedPaths.forEach((path)=>{\n            if (path in data && data[path].__refCount > 0 && hiddenFolders.every((p)=>path.indexOf(p) === -1) && (!data[path].render || data[path].render(this.get))) {\n                visiblePaths.push(path);\n            }\n        });\n        return visiblePaths;\n    };\n    this.setOrderedPaths = (newPaths)=>{\n        newPaths.forEach((p)=>orderedPaths.add(p));\n    };\n    this.orderPaths = (paths)=>{\n        this.setOrderedPaths(paths);\n        return paths;\n    };\n    this.disposePaths = (paths)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            paths.forEach((path)=>{\n                if (path in data) {\n                    const input = data[path];\n                    input.__refCount--;\n                    if (input.__refCount === 0 && input.type in _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v) {\n                        delete data[path];\n                    }\n                }\n            });\n            return {\n                data\n            };\n        });\n    };\n    this.dispose = ()=>{\n        store.setState(()=>{\n            return {\n                data: {}\n            };\n        });\n    };\n    this.getFolderSettings = (path)=>{\n        return folders[path] || {};\n    };\n    this.getData = ()=>{\n        return store.getState().data;\n    };\n    this.addData = (newData, override)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            Object.entries(newData).forEach(([path, newInputData])=>{\n                let input = data[path];\n                if (!!input) {\n                    const { type, value } = newInputData, rest = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(newInputData, _excluded$5);\n                    if (type !== input.type) {\n                        (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.INPUT_TYPE_OVERRIDE, type);\n                    } else {\n                        if (input.__refCount === 0 || override) {\n                            Object.assign(input, rest);\n                        }\n                        input.__refCount++;\n                    }\n                } else {\n                    data[path] = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, newInputData), {}, {\n                        __refCount: 1\n                    });\n                }\n            });\n            return {\n                data\n            };\n        });\n    };\n    this.setValueAtPath = (path, value, fromPanel)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.y)(data[path], value, path, this, fromPanel);\n            return {\n                data\n            };\n        });\n    };\n    this.setSettingsAtPath = (path, settings)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            data[path].settings = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, data[path].settings), settings);\n            return {\n                data\n            };\n        });\n    };\n    this.disableInputAtPath = (path, flag)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            data[path].disabled = flag;\n            return {\n                data\n            };\n        });\n    };\n    this.set = (values, fromPanel)=>{\n        store.setState((s)=>{\n            const data = s.data;\n            Object.entries(values).forEach(([path, value])=>{\n                try {\n                    (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.y)(data[path], value, undefined, undefined, fromPanel);\n                } catch (e) {\n                    if (true) {\n                        console.warn(`[This message will only show in development]: \\`set\\` for path ${path} has failed.`, e);\n                    }\n                }\n            });\n            return {\n                data\n            };\n        });\n    };\n    this.getInput = (path)=>{\n        try {\n            return this.getData()[path];\n        } catch (e) {\n            (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.PATH_DOESNT_EXIST, path);\n        }\n    };\n    this.get = (path)=>{\n        var _this$getInput;\n        return (_this$getInput = this.getInput(path)) === null || _this$getInput === void 0 ? void 0 : _this$getInput.value;\n    };\n    this.emitOnEditStart = (path)=>{\n        eventEmitter.emit(`onEditStart:${path}`, this.get(path), path, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, this.getInput(path)), {}, {\n            get: this.get\n        }));\n    };\n    this.emitOnEditEnd = (path)=>{\n        eventEmitter.emit(`onEditEnd:${path}`, this.get(path), path, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, this.getInput(path)), {}, {\n            get: this.get\n        }));\n    };\n    this.subscribeToEditStart = (path, listener)=>{\n        const _path = `onEditStart:${path}`;\n        eventEmitter.on(_path, listener);\n        return ()=>eventEmitter.off(_path, listener);\n    };\n    this.subscribeToEditEnd = (path, listener)=>{\n        const _path = `onEditEnd:${path}`;\n        eventEmitter.on(_path, listener);\n        return ()=>eventEmitter.off(_path, listener);\n    };\n    const _getDataFromSchema = (schema, rootPath, mappedPaths)=>{\n        const data = {};\n        Object.entries(schema).forEach(([key, rawInput])=>{\n            if (key === \"\") return (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.EMPTY_KEY);\n            let newPath = join(rootPath, key);\n            if (rawInput.type === _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.FOLDER) {\n                const newData = _getDataFromSchema(rawInput.schema, newPath, mappedPaths);\n                Object.assign(data, newData);\n                if (!(newPath in folders)) folders[newPath] = rawInput.settings;\n            } else if (key in mappedPaths) {\n                (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.DUPLICATE_KEYS, key, newPath, mappedPaths[key].path);\n            } else {\n                const normalizedInput = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.z)(rawInput, key, newPath, data);\n                if (normalizedInput) {\n                    const { type, options, input } = normalizedInput;\n                    const { onChange, transient, onEditStart, onEditEnd } = options, _options = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(options, _excluded2);\n                    data[newPath] = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                        type\n                    }, _options), input), {}, {\n                        fromPanel: true\n                    });\n                    mappedPaths[key] = {\n                        path: newPath,\n                        onChange,\n                        transient,\n                        onEditStart,\n                        onEditEnd\n                    };\n                } else {\n                    (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.UNKNOWN_INPUT, newPath, rawInput);\n                }\n            }\n        });\n        return data;\n    };\n    this.getDataFromSchema = (schema)=>{\n        const mappedPaths = {};\n        const data = _getDataFromSchema(schema, \"\", mappedPaths);\n        return [\n            data,\n            mappedPaths\n        ];\n    };\n};\nconst levaStore = new Store();\nfunction useCreateStore() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>new Store(), []);\n}\nif (false) {}\nconst defaultSettings$2 = {\n    collapsed: false\n};\nfunction folder(schema, settings) {\n    return {\n        type: _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.FOLDER,\n        schema,\n        settings: (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultSettings$2), settings)\n    };\n}\nconst defaultSettings$1 = {\n    disabled: false\n};\nfunction button(onClick, settings) {\n    return {\n        type: _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON,\n        onClick,\n        settings: (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultSettings$1), settings)\n    };\n}\nfunction buttonGroup(opts) {\n    return {\n        type: _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON_GROUP,\n        opts\n    };\n}\nconst defaultSettings = {\n    graph: false,\n    interval: 100\n};\nfunction monitor(objectOrFn, settings) {\n    return {\n        type: _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.MONITOR,\n        objectOrFn,\n        settings: (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultSettings), settings)\n    };\n}\nconst isInput = (v)=>\"__levaInput\" in v;\nconst buildTree = (paths, filter)=>{\n    const tree = {};\n    const _filter = filter ? filter.toLowerCase() : null;\n    paths.forEach((path)=>{\n        const [valueKey, folderPath] = getKeyPath(path);\n        if (!_filter || valueKey.toLowerCase().indexOf(_filter) > -1) {\n            merge_value__WEBPACK_IMPORTED_MODULE_5___default()(tree, folderPath, {\n                [valueKey]: {\n                    __levaInput: true,\n                    path\n                }\n            });\n        }\n    });\n    return tree;\n};\nconst _excluded$4 = [\n    \"type\",\n    \"label\",\n    \"path\",\n    \"valueKey\",\n    \"value\",\n    \"settings\",\n    \"setValue\",\n    \"disabled\"\n];\nfunction ControlInput(_ref) {\n    let { type, label, path, valueKey, value, settings, setValue, disabled } = _ref, rest = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$4);\n    const { displayValue, onChange, onUpdate } = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.A)({\n        type,\n        value,\n        settings,\n        setValue\n    });\n    const Input = _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.B[type].component;\n    if (!Input) {\n        (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.NO_COMPONENT_FOR_TYPE, type, path);\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.C.Provider, {\n        value: (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n            key: valueKey,\n            path,\n            id: \"\" + path,\n            label,\n            displayValue,\n            value,\n            onChange,\n            onUpdate,\n            settings,\n            setValue,\n            disabled\n        }, rest)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.D, {\n        disabled: disabled\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Input, null)));\n}\nconst StyledButton = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"button\", {\n    display: \"block\",\n    $reset: \"\",\n    fontWeight: \"$button\",\n    height: \"$rowHeight\",\n    borderStyle: \"none\",\n    borderRadius: \"$sm\",\n    backgroundColor: \"$elevation1\",\n    color: \"$highlight1\",\n    \"&:not(:disabled)\": {\n        color: \"$highlight3\",\n        backgroundColor: \"$accent2\",\n        cursor: \"pointer\",\n        $hover: \"$accent3\",\n        $active: \"$accent3 $accent1\",\n        $focus: \"\"\n    }\n});\nfunction Button({ onClick, settings, label }) {\n    const store = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(StyledButton, {\n        disabled: settings.disabled,\n        onClick: ()=>onClick(store.get)\n    }, label));\n}\nconst StyledButtonGroup = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flex: \"\",\n    justifyContent: \"flex-end\",\n    gap: \"$colGap\"\n});\nconst StyledButtonGroupButton = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"button\", {\n    $reset: \"\",\n    cursor: \"pointer\",\n    borderRadius: \"$xs\",\n    \"&:hover\": {\n        backgroundColor: \"$elevation3\"\n    }\n});\nconst getOpts = ({ label: _label, opts: _opts })=>{\n    let label = typeof _label === \"string\" ? _label.trim() === \"\" ? null : _label : _label;\n    let opts = _opts;\n    if (typeof _opts.opts === \"object\") {\n        if (opts.label !== undefined) {\n            label = _opts.label;\n        }\n        opts = _opts.opts;\n    }\n    return {\n        label,\n        opts: opts\n    };\n};\nfunction ButtonGroup(props) {\n    const { label, opts } = getOpts(props);\n    const store = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: !!label\n    }, label && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(StyledButtonGroup, null, Object.entries(opts).map(([label, onClick])=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(StyledButtonGroupButton, {\n            key: label,\n            onClick: ()=>onClick(store.get)\n        }, label))));\n}\nconst Canvas = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"canvas\", {\n    height: \"$monitorHeight\",\n    width: \"100%\",\n    display: \"block\",\n    borderRadius: \"$sm\"\n});\nconst POINTS = 100;\nfunction push(arr, val) {\n    arr.push(val);\n    if (arr.length > POINTS) arr.shift();\n}\nconst MonitorCanvas = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function({ initialValue }, ref) {\n    const accentColor = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"highlight3\");\n    const backgroundColor = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"elevation2\");\n    const fillColor = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"highlight1\");\n    const [gradientTop, gradientBottom] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n        return [\n            (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(fillColor).alpha(0.4).toRgbString(),\n            (0,colord__WEBPACK_IMPORTED_MODULE_7__.colord)(fillColor).alpha(0.1).toRgbString()\n        ];\n    }, [\n        fillColor\n    ]);\n    const points = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([\n        initialValue\n    ]);\n    const min = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(initialValue);\n    const max = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(initialValue);\n    const raf = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const drawPlot = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((_canvas, _ctx)=>{\n        if (!_canvas) return;\n        const { width, height } = _canvas;\n        const path = new Path2D();\n        const interval = width / POINTS;\n        const verticalPadding = height * 0.05;\n        for(let i = 0; i < points.current.length; i++){\n            const p = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.r)(points.current[i], min.current, max.current);\n            const x = interval * i;\n            const y = height - p * (height - verticalPadding * 2) - verticalPadding;\n            path.lineTo(x, y);\n        }\n        _ctx.clearRect(0, 0, width, height);\n        const gradientPath = new Path2D(path);\n        gradientPath.lineTo(interval * (points.current.length + 1), height);\n        gradientPath.lineTo(0, height);\n        gradientPath.lineTo(0, 0);\n        const gradient = _ctx.createLinearGradient(0, 0, 0, height);\n        gradient.addColorStop(0.0, gradientTop);\n        gradient.addColorStop(1.0, gradientBottom);\n        _ctx.fillStyle = gradient;\n        _ctx.fill(gradientPath);\n        _ctx.strokeStyle = backgroundColor;\n        _ctx.lineJoin = \"round\";\n        _ctx.lineWidth = 14;\n        _ctx.stroke(path);\n        _ctx.strokeStyle = accentColor;\n        _ctx.lineWidth = 2;\n        _ctx.stroke(path);\n    }, [\n        accentColor,\n        backgroundColor,\n        gradientTop,\n        gradientBottom\n    ]);\n    const [canvas, ctx] = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.F)(drawPlot);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(ref, ()=>({\n            frame: (val)=>{\n                if (min.current === undefined || val < min.current) min.current = val;\n                if (max.current === undefined || val > max.current) max.current = val;\n                push(points.current, val);\n                raf.current = requestAnimationFrame(()=>drawPlot(canvas.current, ctx.current));\n            }\n        }), [\n        canvas,\n        ctx,\n        drawPlot\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>()=>cancelAnimationFrame(raf.current), []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Canvas, {\n        ref: canvas\n    });\n});\nconst parse = (val)=>Number.isFinite(val) ? val.toPrecision(2) : val.toString();\nconst MonitorLog = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function({ initialValue }, ref) {\n    const [val, set] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(parse(initialValue));\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(ref, ()=>({\n            frame: (v)=>set(parse(v))\n        }), []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"div\", null, val);\n});\nfunction getValue(o) {\n    return typeof o === \"function\" ? o() : o.current;\n}\nfunction Monitor({ label, objectOrFn, settings }) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const initialValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(getValue(objectOrFn));\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const timeout = window.setInterval(()=>{\n            var _ref$current;\n            if (document.hidden) return;\n            (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.frame(getValue(objectOrFn));\n        }, settings.interval);\n        return ()=>window.clearInterval(timeout);\n    }, [\n        objectOrFn,\n        settings.interval\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.R, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.L, {\n        align: \"top\"\n    }, label), settings.graph ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MonitorCanvas, {\n        ref: ref,\n        initialValue: initialValue.current\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MonitorLog, {\n        ref: ref,\n        initialValue: initialValue.current\n    }));\n}\nconst _excluded$3 = [\n    \"type\",\n    \"label\",\n    \"key\"\n];\nconst specialComponents = {\n    [_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON]: Button,\n    [_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.BUTTON_GROUP]: ButtonGroup,\n    [_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v.MONITOR]: Monitor\n};\nconst Control = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(({ path })=>{\n    const [input, { set, setSettings, disable, storeId, emitOnEditStart, emitOnEditEnd }] = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.G)(path);\n    if (!input) return null;\n    const { type, label, key } = input, inputProps = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(input, _excluded$3);\n    if (type in _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.v) {\n        const SpecialInputForType = specialComponents[type];\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SpecialInputForType, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n            label: label,\n            path: path\n        }, inputProps));\n    }\n    if (!(type in _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.B)) {\n        (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.H)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.x.UNSUPPORTED_INPUT, type, path);\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ControlInput, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        key: storeId + path,\n        type: type,\n        label: label,\n        storeId: storeId,\n        path: path,\n        valueKey: key,\n        setValue: set,\n        setSettings: setSettings,\n        disable: disable,\n        emitOnEditStart: emitOnEditStart,\n        emitOnEditEnd: emitOnEditEnd\n    }, inputProps));\n});\nfunction FolderTitle({ toggle, toggled, name }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.J, {\n        onClick: ()=>toggle()\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.K, {\n        toggled: toggled\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"div\", null, name));\n}\nconst Folder = ({ name, path, tree })=>{\n    const store = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    const newPath = join(path, name);\n    const { collapsed, color } = store.getFolderSettings(newPath);\n    const [toggled, setToggle] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!collapsed);\n    const folderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const widgetColor = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"folderWidgetColor\");\n    const textColor = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(\"colors\", \"folderTextColor\");\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(()=>{\n        folderRef.current.style.setProperty(\"--leva-colors-folderWidgetColor\", color || widgetColor);\n        folderRef.current.style.setProperty(\"--leva-colors-folderTextColor\", color || textColor);\n    }, [\n        color,\n        widgetColor,\n        textColor\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.Q, {\n        ref: folderRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FolderTitle, {\n        name: name,\n        toggled: toggled,\n        toggle: ()=>setToggle((t)=>!t)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TreeWrapper, {\n        parent: newPath,\n        tree: tree,\n        toggled: toggled\n    }));\n};\nconst TreeWrapper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(({ isRoot: _isRoot = false, fill: _fill = false, flat: _flat = false, parent, tree, toggled })=>{\n    const { wrapperRef, contentRef } = useToggle(toggled);\n    const store = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    const getOrder = ([key, o])=>{\n        var _store$getInput;\n        const order = isInput(o) ? (_store$getInput = store.getInput(o.path)) === null || _store$getInput === void 0 ? void 0 : _store$getInput.order : store.getFolderSettings(join(parent, key)).order;\n        return order || 0;\n    };\n    const entries = Object.entries(tree).sort((a, b)=>getOrder(a) - getOrder(b));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.M, {\n        ref: wrapperRef,\n        isRoot: _isRoot,\n        fill: _fill,\n        flat: _flat\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.N, {\n        ref: contentRef,\n        isRoot: _isRoot,\n        toggled: toggled\n    }, entries.map(([key, value])=>isInput(value) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Control, {\n            key: value.path,\n            valueKey: value.valueKey,\n            path: value.path\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Folder, {\n            key: key,\n            name: key,\n            path: parent,\n            tree: value\n        }))));\n});\nconst StyledRoot = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    position: \"relative\",\n    fontFamily: \"$mono\",\n    fontSize: \"$root\",\n    color: \"$rootText\",\n    backgroundColor: \"$elevation1\",\n    variants: {\n        fill: {\n            false: {\n                position: \"fixed\",\n                top: \"10px\",\n                right: \"10px\",\n                zIndex: 1000,\n                width: \"$rootWidth\"\n            },\n            true: {\n                position: \"relative\",\n                width: \"100%\"\n            }\n        },\n        flat: {\n            false: {\n                borderRadius: \"$lg\",\n                boxShadow: \"$level1\"\n            }\n        },\n        oneLineLabels: {\n            true: {\n                [`${_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.T}`]: {\n                    gridTemplateColumns: \"auto\",\n                    gridAutoColumns: \"minmax(max-content, 1fr)\",\n                    gridAutoRows: \"minmax($sizes$rowHeight), auto)\",\n                    rowGap: 0,\n                    columnGap: 0,\n                    marginTop: \"$rowGap\"\n                }\n            }\n        },\n        hideTitleBar: {\n            true: {\n                $$titleBarHeight: \"0px\"\n            },\n            false: {\n                $$titleBarHeight: \"$sizes$titleBarHeight\"\n            }\n        }\n    },\n    \"&,*,*:after,*:before\": {\n        boxSizing: \"border-box\"\n    },\n    \"*::selection\": {\n        backgroundColor: \"$accent2\"\n    }\n});\nconst iconWidth = 40;\nconst Icon = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"i\", {\n    $flexCenter: \"\",\n    width: iconWidth,\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    \"> svg\": {\n        fill: \"$highlight1\",\n        transition: \"transform 350ms ease, fill 250ms ease\"\n    },\n    \"&:hover > svg\": {\n        fill: \"$highlight3\"\n    },\n    variants: {\n        active: {\n            true: {\n                \"> svg\": {\n                    fill: \"$highlight2\"\n                }\n            }\n        }\n    }\n});\nconst StyledTitleWithFilter = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    display: \"flex\",\n    alignItems: \"stretch\",\n    justifyContent: \"space-between\",\n    height: \"$titleBarHeight\",\n    variants: {\n        mode: {\n            drag: {\n                cursor: \"grab\"\n            }\n        }\n    }\n});\nconst FilterWrapper = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    $flex: \"\",\n    position: \"relative\",\n    width: \"100%\",\n    overflow: \"hidden\",\n    transition: \"height 250ms ease\",\n    color: \"$highlight3\",\n    paddingLeft: \"$md\",\n    [`> ${Icon}`]: {\n        height: 30\n    },\n    variants: {\n        toggled: {\n            true: {\n                height: 30\n            },\n            false: {\n                height: 0\n            }\n        }\n    }\n});\nconst StyledFilterInput = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"input\", {\n    $reset: \"\",\n    flex: 1,\n    position: \"relative\",\n    height: 30,\n    width: \"100%\",\n    backgroundColor: \"transparent\",\n    fontSize: \"10px\",\n    borderRadius: \"$root\",\n    \"&:focus\": {},\n    \"&::placeholder\": {\n        color: \"$highlight2\"\n    }\n});\nconst TitleContainer = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.s)(\"div\", {\n    touchAction: \"none\",\n    $flexCenter: \"\",\n    flex: 1,\n    \"> svg\": {\n        fill: \"$highlight1\"\n    },\n    color: \"$highlight1\",\n    variants: {\n        drag: {\n            true: {\n                $draggable: \"\",\n                \"> svg\": {\n                    transition: \"fill 250ms ease\"\n                },\n                \"&:hover\": {\n                    color: \"$highlight3\"\n                },\n                \"&:hover > svg\": {\n                    fill: \"$highlight3\"\n                }\n            }\n        },\n        filterEnabled: {\n            false: {\n                paddingRight: iconWidth\n            }\n        }\n    }\n});\nconst FilterInput = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().forwardRef(({ setFilter, toggle }, ref)=>{\n    const [value, set] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(\"\");\n    const debouncedOnChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.U)(setFilter, 250), [\n        setFilter\n    ]);\n    const clear = ()=>{\n        setFilter(\"\");\n        set(\"\");\n    };\n    const _onChange = (e)=>{\n        const v = e.currentTarget.value;\n        toggle(true);\n        set(v);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        debouncedOnChange(value);\n    }, [\n        value,\n        debouncedOnChange\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(StyledFilterInput, {\n        ref: ref,\n        value: value,\n        placeholder: \"[Open filter with CMD+SHIFT+L]\",\n        onPointerDown: (e)=>e.stopPropagation(),\n        onChange: _onChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Icon, {\n        onClick: ()=>clear(),\n        style: {\n            visibility: value ? \"visible\" : \"hidden\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        height: \"14\",\n        width: \"14\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n        clipRule: \"evenodd\"\n    }))));\n});\nfunction TitleWithFilter({ setFilter, onDrag, onDragStart, onDragEnd, toggle, toggled, title, drag, filterEnabled, from }) {\n    const [filterShown, setShowFilter] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        var _inputRef$current, _inputRef$current2;\n        if (filterShown) (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n        else (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();\n    }, [\n        filterShown\n    ]);\n    const bind = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(({ offset: [x, y], first, last })=>{\n        onDrag({\n            x,\n            y\n        });\n        if (first) {\n            onDragStart({\n                x,\n                y\n            });\n        }\n        if (last) {\n            onDragEnd({\n                x,\n                y\n            });\n        }\n    }, {\n        filterTaps: true,\n        from: ({ offset: [x, y] })=>[\n                (from === null || from === void 0 ? void 0 : from.x) || x,\n                (from === null || from === void 0 ? void 0 : from.y) || y\n            ]\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const handleShortcut = (event)=>{\n            if (event.key === \"L\" && event.shiftKey && event.metaKey) {\n                setShowFilter((f)=>!f);\n            }\n        };\n        window.addEventListener(\"keydown\", handleShortcut);\n        return ()=>window.removeEventListener(\"keydown\", handleShortcut);\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(StyledTitleWithFilter, {\n        mode: drag ? \"drag\" : undefined\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Icon, {\n        active: !toggled,\n        onClick: ()=>toggle()\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.K, {\n        toggled: toggled,\n        width: 12,\n        height: 8\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TitleContainer, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({}, drag ? bind() : {}, {\n        drag: drag,\n        filterEnabled: filterEnabled\n    }), title === undefined && drag ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"svg\", {\n        width: \"20\",\n        height: \"10\",\n        viewBox: \"0 0 28 14\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"circle\", {\n        cx: \"2\",\n        cy: \"2\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"circle\", {\n        cx: \"14\",\n        cy: \"2\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"circle\", {\n        cx: \"26\",\n        cy: \"2\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"circle\", {\n        cx: \"2\",\n        cy: \"12\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"circle\", {\n        cx: \"14\",\n        cy: \"12\",\n        r: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"circle\", {\n        cx: \"26\",\n        cy: \"12\",\n        r: \"2\"\n    })) : title), filterEnabled && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Icon, {\n        active: filterShown,\n        onClick: ()=>setShowFilter((f)=>!f)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        height: \"20\",\n        viewBox: \"0 0 20 20\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"path\", {\n        d: \"M9 9a2 2 0 114 0 2 2 0 01-4 0z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a4 4 0 00-3.446 6.032l-2.261 2.26a1 1 0 101.414 1.415l2.261-2.261A4 4 0 1011 5z\",\n        clipRule: \"evenodd\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FilterWrapper, {\n        toggled: filterShown\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FilterInput, {\n        ref: inputRef,\n        setFilter: setFilter,\n        toggle: toggle\n    })));\n}\nconst _excluded$2 = [\n    \"store\",\n    \"hidden\",\n    \"theme\",\n    \"collapsed\"\n];\nfunction LevaRoot(_ref) {\n    let { store, hidden = false, theme, collapsed = false } = _ref, props = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$2);\n    const themeContext = useDeepMemo(()=>(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.Z)(theme), [\n        theme\n    ]);\n    const [toggled, setToggle] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!collapsed);\n    const computedToggled = typeof collapsed === \"object\" ? !collapsed.collapsed : toggled;\n    const computedSetToggle = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n        if (typeof collapsed === \"object\") {\n            return (value)=>{\n                if (typeof value === \"function\") {\n                    collapsed.onChange(!value(!collapsed.collapsed));\n                } else {\n                    collapsed.onChange(!value);\n                }\n            };\n        }\n        return setToggle;\n    }, [\n        collapsed\n    ]);\n    if (!store || hidden) return null;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.$.Provider, {\n        value: themeContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(LevaCore, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        store: store\n    }, props, {\n        toggled: computedToggled,\n        setToggle: computedSetToggle,\n        rootClass: themeContext.className\n    })));\n}\nconst LevaCore = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(({ store, rootClass, fill: _fill = false, flat: _flat = false, neverHide: _neverHide = false, oneLineLabels: _oneLineLabels = false, titleBar: _titleBar = {\n    title: undefined,\n    drag: true,\n    filter: true,\n    position: undefined,\n    onDrag: undefined,\n    onDragStart: undefined,\n    onDragEnd: undefined\n}, hideCopyButton: _hideCopyButton = false, toggled, setToggle })=>{\n    var _titleBar$drag, _titleBar$filter;\n    const paths = useVisiblePaths(store);\n    const [filter, setFilter] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(\"\");\n    const tree = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>buildTree(paths, filter), [\n        paths,\n        filter\n    ]);\n    const [rootRef, set] = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)();\n    const shouldShow = _neverHide || paths.length > 0;\n    const title = typeof _titleBar === \"object\" ? _titleBar.title || undefined : undefined;\n    const drag = typeof _titleBar === \"object\" ? (_titleBar$drag = _titleBar.drag) !== null && _titleBar$drag !== void 0 ? _titleBar$drag : true : true;\n    const filterEnabled = typeof _titleBar === \"object\" ? (_titleBar$filter = _titleBar.filter) !== null && _titleBar$filter !== void 0 ? _titleBar$filter : true : true;\n    const position = typeof _titleBar === \"object\" ? _titleBar.position || undefined : undefined;\n    const onDrag = typeof _titleBar === \"object\" ? _titleBar.onDrag || undefined : undefined;\n    const onDragStart = typeof _titleBar === \"object\" ? _titleBar.onDragStart || undefined : undefined;\n    const onDragEnd = typeof _titleBar === \"object\" ? _titleBar.onDragEnd || undefined : undefined;\n    react__WEBPACK_IMPORTED_MODULE_3___default().useEffect(()=>{\n        set({\n            x: position === null || position === void 0 ? void 0 : position.x,\n            y: position === null || position === void 0 ? void 0 : position.y\n        });\n    }, [\n        position,\n        set\n    ]);\n    (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.W)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.X.Provider, {\n        value: {\n            hideCopyButton: _hideCopyButton\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(StyledRoot, {\n        ref: rootRef,\n        className: rootClass,\n        fill: _fill,\n        flat: _flat,\n        oneLineLabels: _oneLineLabels,\n        hideTitleBar: !_titleBar,\n        style: {\n            display: shouldShow ? \"block\" : \"none\"\n        }\n    }, _titleBar && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TitleWithFilter, {\n        onDrag: (point)=>{\n            set(point);\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(point);\n        },\n        onDragStart: (point)=>onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(point),\n        onDragEnd: (point)=>onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(point),\n        setFilter: setFilter,\n        toggle: (flag)=>setToggle((t)=>flag !== null && flag !== void 0 ? flag : !t),\n        toggled: toggled,\n        title: title,\n        drag: drag,\n        filterEnabled: filterEnabled,\n        from: position\n    }), shouldShow && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.Y.Provider, {\n        value: store\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TreeWrapper, {\n        isRoot: true,\n        fill: _fill,\n        flat: _flat,\n        tree: tree,\n        toggled: toggled\n    }))));\n});\nconst _excluded$1 = [\n    \"isRoot\"\n];\nlet rootInitialized = false;\nlet rootEl = null;\nfunction Leva(_ref) {\n    let { isRoot = false } = _ref, props = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded$1);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        rootInitialized = true;\n        if (!isRoot && rootEl) {\n            rootEl.remove();\n            rootEl = null;\n        }\n        return ()=>{\n            if (!isRoot) rootInitialized = false;\n        };\n    }, [\n        isRoot\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(LevaRoot, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        store: levaStore\n    }, props));\n}\nfunction useRenderRoot(isGlobalPanel) {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (isGlobalPanel && !rootInitialized) {\n            if (!rootEl) {\n                rootEl = document.getElementById(\"leva__root\") || Object.assign(document.createElement(\"div\"), {\n                    id: \"leva__root\"\n                });\n                if (document.body) {\n                    document.body.appendChild(rootEl);\n                    (0,react_dom_client__WEBPACK_IMPORTED_MODULE_4__.createRoot)(rootEl).render(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Leva, {\n                        isRoot: true\n                    }));\n                }\n            }\n            rootInitialized = true;\n        }\n    }, [\n        isGlobalPanel\n    ]);\n}\nconst _excluded = [\n    \"store\"\n];\nfunction LevaPanel(_ref) {\n    let { store } = _ref, props = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(_ref, _excluded);\n    const parentStore = (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.E)();\n    const _store = store === undefined ? parentStore : store;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(LevaRoot, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.f)({\n        store: _store\n    }, props));\n}\nfunction parseArgs(schemaOrFolderName, settingsOrDepsOrSchema, depsOrSettingsOrFolderSettings, depsOrSettings, depsOrUndefined) {\n    let schema;\n    let folderName = undefined;\n    let folderSettings;\n    let hookSettings;\n    let deps;\n    if (typeof schemaOrFolderName === \"string\") {\n        folderName = schemaOrFolderName;\n        schema = settingsOrDepsOrSchema;\n        if (Array.isArray(depsOrSettingsOrFolderSettings)) {\n            deps = depsOrSettingsOrFolderSettings;\n        } else {\n            if (depsOrSettingsOrFolderSettings) {\n                if (\"store\" in depsOrSettingsOrFolderSettings) {\n                    hookSettings = depsOrSettingsOrFolderSettings;\n                    deps = depsOrSettings;\n                } else {\n                    folderSettings = depsOrSettingsOrFolderSettings;\n                    if (Array.isArray(depsOrSettings)) {\n                        deps = depsOrSettings;\n                    } else {\n                        hookSettings = depsOrSettings;\n                        deps = depsOrUndefined;\n                    }\n                }\n            }\n        }\n    } else {\n        schema = schemaOrFolderName;\n        if (Array.isArray(settingsOrDepsOrSchema)) {\n            deps = settingsOrDepsOrSchema;\n        } else {\n            hookSettings = settingsOrDepsOrSchema;\n            deps = depsOrSettingsOrFolderSettings;\n        }\n    }\n    return {\n        schema,\n        folderName,\n        folderSettings,\n        hookSettings,\n        deps: deps || []\n    };\n}\nfunction useControls(schemaOrFolderName, settingsOrDepsOrSchema, depsOrSettingsOrFolderSettings, depsOrSettings, depsOrUndefined) {\n    const { folderName, schema, folderSettings, hookSettings, deps } = parseArgs(schemaOrFolderName, settingsOrDepsOrSchema, depsOrSettingsOrFolderSettings, depsOrSettings, depsOrUndefined);\n    const schemaIsFunction = typeof schema === \"function\";\n    const depsChanged = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    const firstRender = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(true);\n    const _schema = useDeepMemo(()=>{\n        depsChanged.current = true;\n        const s = typeof schema === \"function\" ? schema() : schema;\n        return folderName ? {\n            [folderName]: folder(s, folderSettings)\n        } : s;\n    }, deps);\n    const isGlobalPanel = !(hookSettings !== null && hookSettings !== void 0 && hookSettings.store);\n    useRenderRoot(isGlobalPanel);\n    const [store] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>(hookSettings === null || hookSettings === void 0 ? void 0 : hookSettings.store) || levaStore);\n    const [initialData, mappedPaths] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>store.getDataFromSchema(_schema), [\n        store,\n        _schema\n    ]);\n    const [allPaths, renderPaths, onChangePaths, onEditStartPaths, onEditEndPaths] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n        const allPaths = [];\n        const renderPaths = [];\n        const onChangePaths = {};\n        const onEditStartPaths = {};\n        const onEditEndPaths = {};\n        Object.values(mappedPaths).forEach(({ path, onChange, onEditStart, onEditEnd, transient })=>{\n            allPaths.push(path);\n            if (!!onChange) {\n                onChangePaths[path] = onChange;\n                if (!transient) {\n                    renderPaths.push(path);\n                }\n            } else {\n                renderPaths.push(path);\n            }\n            if (onEditStart) {\n                onEditStartPaths[path] = onEditStart;\n            }\n            if (onEditEnd) {\n                onEditEndPaths[path] = onEditEnd;\n            }\n        });\n        return [\n            allPaths,\n            renderPaths,\n            onChangePaths,\n            onEditStartPaths,\n            onEditEndPaths\n        ];\n    }, [\n        mappedPaths\n    ]);\n    const paths = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>store.orderPaths(allPaths), [\n        allPaths,\n        store\n    ]);\n    const values = useValuesForPath(store, renderPaths, initialData);\n    const set = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((values)=>{\n        const _values = Object.entries(values).reduce((acc, [p, v])=>Object.assign(acc, {\n                [mappedPaths[p].path]: v\n            }), {});\n        store.set(_values, false);\n    }, [\n        store,\n        mappedPaths\n    ]);\n    const get = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((path)=>store.get(mappedPaths[path].path), [\n        store,\n        mappedPaths\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const shouldOverrideSettings = !firstRender.current && depsChanged.current;\n        store.addData(initialData, shouldOverrideSettings);\n        firstRender.current = false;\n        depsChanged.current = false;\n        return ()=>store.disposePaths(paths);\n    }, [\n        store,\n        paths,\n        initialData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const unsubscriptions = [];\n        Object.entries(onChangePaths).forEach(([path, onChange])=>{\n            onChange(store.get(path), path, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                initial: true,\n                get: store.get\n            }, store.getInput(path)));\n            const unsub = store.useStore.subscribe((s)=>{\n                const input = s.data[path];\n                const value = input.disabled ? undefined : input.value;\n                return [\n                    value,\n                    input\n                ];\n            }, ([value, input])=>onChange(value, path, (0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                    initial: false,\n                    get: store.get\n                }, input)), {\n                equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n            });\n            unsubscriptions.push(unsub);\n        });\n        return ()=>unsubscriptions.forEach((unsub)=>unsub());\n    }, [\n        store,\n        onChangePaths\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const unsubscriptions = [];\n        Object.entries(onEditStartPaths).forEach(([path, onEditStart])=>unsubscriptions.push(store.subscribeToEditStart(path, onEditStart)));\n        Object.entries(onEditEndPaths).forEach(([path, onEditEnd])=>unsubscriptions.push(store.subscribeToEditEnd(path, onEditEnd)));\n        return ()=>unsubscriptions.forEach((unsub)=>unsub());\n    }, [\n        onEditStartPaths,\n        onEditEndPaths,\n        store\n    ]);\n    if (schemaIsFunction) return [\n        values,\n        set,\n        get\n    ];\n    return values;\n}\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.SELECT, _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.IMAGE, image);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.NUMBER, _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a3);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.COLOR, color);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.STRING, _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a4);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.BOOLEAN, _vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a5);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.INTERVAL, interval);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.VECTOR3D, vector3d);\n(0,_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0)(_vector_plugin_a4ae7e76_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1.VECTOR2D, vector2d);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/dist/leva.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/dist/vector-plugin-a4ae7e76.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/leva/dist/vector-plugin-a4ae7e76.esm.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ ThemeContext),\n/* harmony export */   A: () => (/* binding */ useInputSetters),\n/* harmony export */   B: () => (/* binding */ Plugins),\n/* harmony export */   C: () => (/* binding */ InputContext),\n/* harmony export */   D: () => (/* binding */ StyledInputWrapper$1),\n/* harmony export */   E: () => (/* binding */ useStoreContext),\n/* harmony export */   F: () => (/* binding */ useCanvas2d),\n/* harmony export */   G: () => (/* binding */ useInput),\n/* harmony export */   H: () => (/* binding */ log),\n/* harmony export */   I: () => (/* binding */ Indicator),\n/* harmony export */   J: () => (/* binding */ StyledTitle),\n/* harmony export */   K: () => (/* binding */ Chevron),\n/* harmony export */   L: () => (/* binding */ Label),\n/* harmony export */   M: () => (/* binding */ StyledWrapper),\n/* harmony export */   N: () => (/* binding */ StyledContent),\n/* harmony export */   O: () => (/* binding */ Overlay),\n/* harmony export */   P: () => (/* binding */ Portal),\n/* harmony export */   Q: () => (/* binding */ StyledFolder),\n/* harmony export */   R: () => (/* binding */ Row),\n/* harmony export */   S: () => (/* binding */ Scrubber),\n/* harmony export */   T: () => (/* binding */ StyledInputRow),\n/* harmony export */   U: () => (/* binding */ debounce),\n/* harmony export */   V: () => (/* binding */ ValueInput),\n/* harmony export */   W: () => (/* binding */ globalStyles),\n/* harmony export */   X: () => (/* binding */ PanelSettingsContext),\n/* harmony export */   Y: () => (/* binding */ StoreContext),\n/* harmony export */   Z: () => (/* binding */ mergeTheme),\n/* harmony export */   _: () => (/* binding */ _objectSpread2),\n/* harmony export */   a: () => (/* binding */ Vector),\n/* harmony export */   a0: () => (/* binding */ register),\n/* harmony export */   a1: () => (/* binding */ LevaInputs),\n/* harmony export */   a2: () => (/* binding */ select),\n/* harmony export */   a3: () => (/* binding */ number),\n/* harmony export */   a4: () => (/* binding */ string),\n/* harmony export */   a5: () => (/* binding */ boolean),\n/* harmony export */   a6: () => (/* binding */ LevaStoreProvider),\n/* harmony export */   a7: () => (/* binding */ String$1),\n/* harmony export */   a8: () => (/* binding */ Number$1),\n/* harmony export */   a9: () => (/* binding */ Boolean),\n/* harmony export */   aa: () => (/* binding */ Select),\n/* harmony export */   ab: () => (/* binding */ InnerLabel),\n/* harmony export */   ac: () => (/* binding */ pad),\n/* harmony export */   ad: () => (/* binding */ evaluate),\n/* harmony export */   ae: () => (/* binding */ createPlugin),\n/* harmony export */   af: () => (/* binding */ keyframes),\n/* harmony export */   ag: () => (/* binding */ getVectorSchema),\n/* harmony export */   ah: () => (/* binding */ getVectorType),\n/* harmony export */   ai: () => (/* binding */ sanitizeVector),\n/* harmony export */   aj: () => (/* binding */ formatVector),\n/* harmony export */   ak: () => (/* binding */ normalizeVector),\n/* harmony export */   b: () => (/* binding */ useTransform),\n/* harmony export */   c: () => (/* binding */ createInternalPlugin),\n/* harmony export */   d: () => (/* binding */ useTh),\n/* harmony export */   e: () => (/* binding */ useDrag),\n/* harmony export */   f: () => (/* binding */ _extends),\n/* harmony export */   g: () => (/* binding */ getVectorPlugin),\n/* harmony export */   h: () => (/* binding */ clamp),\n/* harmony export */   i: () => (/* binding */ _objectWithoutProperties),\n/* harmony export */   j: () => (/* binding */ invertedRange),\n/* harmony export */   k: () => (/* binding */ sanitizeStep),\n/* harmony export */   l: () => (/* binding */ RangeWrapper),\n/* harmony export */   m: () => (/* binding */ multiplyStep),\n/* harmony export */   n: () => (/* binding */ normalizeKeyedNumberSettings),\n/* harmony export */   o: () => (/* binding */ omit),\n/* harmony export */   p: () => (/* binding */ pick),\n/* harmony export */   q: () => (/* binding */ Range),\n/* harmony export */   r: () => (/* binding */ range),\n/* harmony export */   s: () => (/* binding */ styled),\n/* harmony export */   t: () => (/* binding */ getUid),\n/* harmony export */   u: () => (/* binding */ useInputContext),\n/* harmony export */   v: () => (/* binding */ SpecialInputs),\n/* harmony export */   w: () => (/* binding */ warn),\n/* harmony export */   x: () => (/* binding */ LevaErrors),\n/* harmony export */   y: () => (/* binding */ updateInput),\n/* harmony export */   z: () => (/* binding */ normalizeInput)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-portal */ \"(ssr)/./node_modules/leva/node_modules/@radix-ui/react-portal/dist/index.module.js\");\n/* harmony import */ var dequal_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dequal/lite */ \"(ssr)/./node_modules/dequal/lite/index.mjs\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/leva/node_modules/zustand/esm/shallow.js\");\n/* harmony import */ var v8n__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! v8n */ \"(ssr)/./node_modules/v8n/dist/v8n.esm.js\");\n/* harmony import */ var _stitches_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stitches/react */ \"(ssr)/./node_modules/@stitches/react/dist/index.mjs\");\n/* harmony import */ var _use_gesture_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @use-gesture/react */ \"(ssr)/./node_modules/@use-gesture/react/dist/use-gesture-react.esm.js\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.module.js\");\n\n\n\n\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nlet LevaErrors;\n(function(LevaErrors) {\n    LevaErrors[LevaErrors[\"UNSUPPORTED_INPUT\"] = 0] = \"UNSUPPORTED_INPUT\";\n    LevaErrors[LevaErrors[\"NO_COMPONENT_FOR_TYPE\"] = 1] = \"NO_COMPONENT_FOR_TYPE\";\n    LevaErrors[LevaErrors[\"UNKNOWN_INPUT\"] = 2] = \"UNKNOWN_INPUT\";\n    LevaErrors[LevaErrors[\"DUPLICATE_KEYS\"] = 3] = \"DUPLICATE_KEYS\";\n    LevaErrors[LevaErrors[\"ALREADY_REGISTERED_TYPE\"] = 4] = \"ALREADY_REGISTERED_TYPE\";\n    LevaErrors[LevaErrors[\"CLIPBOARD_ERROR\"] = 5] = \"CLIPBOARD_ERROR\";\n    LevaErrors[LevaErrors[\"THEME_ERROR\"] = 6] = \"THEME_ERROR\";\n    LevaErrors[LevaErrors[\"PATH_DOESNT_EXIST\"] = 7] = \"PATH_DOESNT_EXIST\";\n    LevaErrors[LevaErrors[\"INPUT_TYPE_OVERRIDE\"] = 8] = \"INPUT_TYPE_OVERRIDE\";\n    LevaErrors[LevaErrors[\"EMPTY_KEY\"] = 9] = \"EMPTY_KEY\";\n})(LevaErrors || (LevaErrors = {}));\nconst ErrorList = {\n    [LevaErrors.UNSUPPORTED_INPUT]: (type, path)=>[\n            `An input with type \\`${type}\\` input was found at path \\`${path}\\` but it's not supported yet.`\n        ],\n    [LevaErrors.NO_COMPONENT_FOR_TYPE]: (type, path)=>[\n            `Type \\`${type}\\` found at path \\`${path}\\` can't be displayed in panel because no component supports it yet.`\n        ],\n    [LevaErrors.UNKNOWN_INPUT]: (path, value)=>[\n            `input at path \\`${path}\\` is not recognized.`,\n            value\n        ],\n    [LevaErrors.DUPLICATE_KEYS]: (key, path, prevPath)=>[\n            `Key \\`${key}\\` of path \\`${path}\\` already exists at path \\`${prevPath}\\`. Even nested keys need to be unique. Rename one of the keys.`\n        ],\n    [LevaErrors.ALREADY_REGISTERED_TYPE]: (type)=>[\n            `Type ${type} has already been registered. You can't register a component with the same type.`\n        ],\n    [LevaErrors.CLIPBOARD_ERROR]: (value)=>[\n            `Error copying the value`,\n            value\n        ],\n    [LevaErrors.THEME_ERROR]: (category, key)=>[\n            `Error accessing the theme \\`${category}.${key}\\` value.`\n        ],\n    [LevaErrors.PATH_DOESNT_EXIST]: (path)=>[\n            `Error getting the value at path \\`${path}\\`. There is probably an error in your \\`render\\` function.`\n        ],\n    [LevaErrors.PATH_DOESNT_EXIST]: (path)=>[\n            `Error accessing the value at path \\`${path}\\``\n        ],\n    [LevaErrors.INPUT_TYPE_OVERRIDE]: (path, type, wrongType)=>[\n            `Input at path \\`${path}\\` already exists with type: \\`${type}\\`. Its type cannot be overridden with type \\`${wrongType}\\`.`\n        ],\n    [LevaErrors.EMPTY_KEY]: ()=>[\n            \"Keys can not be empty, if you want to hide a label use whitespace.\"\n        ]\n};\nfunction _log(fn, errorType, ...args) {\n    const [message, ...rest] = ErrorList[errorType](...args);\n    console[fn](\"LEVA: \" + message, ...rest);\n}\nconst warn = _log.bind(null, \"warn\");\nconst log = _log.bind(null, \"log\");\nconst _excluded$a = [\n    \"value\"\n], _excluded2$4 = [\n    \"schema\"\n], _excluded3$1 = [\n    \"value\"\n];\nconst Schemas = [];\nconst Plugins = {};\nfunction getValueType(_ref) {\n    let { value } = _ref, settings = _objectWithoutProperties(_ref, _excluded$a);\n    for (let checker of Schemas){\n        const type = checker(value, settings);\n        if (type) return type;\n    }\n    return undefined;\n}\nfunction register(type, _ref2) {\n    let { schema } = _ref2, plugin = _objectWithoutProperties(_ref2, _excluded2$4);\n    if (type in Plugins) {\n        warn(LevaErrors.ALREADY_REGISTERED_TYPE, type);\n        return;\n    }\n    Schemas.push((value, settings)=>schema(value, settings) && type);\n    Plugins[type] = plugin;\n}\nconst getUniqueType = ()=>\"__CUSTOM__PLUGIN__\" + Math.random().toString(36).substr(2, 9);\nfunction createInternalPlugin(plugin) {\n    return plugin;\n}\nfunction createPlugin(plugin) {\n    const type = getUniqueType();\n    Plugins[type] = plugin;\n    return (input)=>{\n        return {\n            type,\n            __customInput: input\n        };\n    };\n}\nfunction normalize$3(type, input, path, data) {\n    const { normalize: _normalize } = Plugins[type];\n    if (_normalize) return _normalize(input, path, data);\n    if (typeof input !== \"object\" || !(\"value\" in input)) return {\n        value: input\n    };\n    const { value } = input, settings = _objectWithoutProperties(input, _excluded3$1);\n    return {\n        value,\n        settings\n    };\n}\nfunction sanitize$4(type, value, settings, prevValue, path, store) {\n    const { sanitize } = Plugins[type];\n    if (sanitize) return sanitize(value, settings, prevValue, path, store);\n    return value;\n}\nfunction format$2(type, value, settings) {\n    const { format } = Plugins[type];\n    if (format) return format(value, settings);\n    return value;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nconst clamp = (x, min, max)=>x > max ? max : x < min ? min : x;\nconst pad = (x, pad)=>String(x).padStart(pad, \"0\");\nconst parseNumber = (v)=>{\n    if (v === \"\" || typeof v === \"number\") return v;\n    try {\n        const _v = evaluate(v);\n        if (!isNaN(_v)) return _v;\n    } catch (_unused) {}\n    return parseFloat(v);\n};\nconst log10 = Math.log(10);\nfunction getStep(number) {\n    let n = Math.abs(+String(number).replace(\".\", \"\"));\n    if (n === 0) return 0.01;\n    while(n !== 0 && n % 10 === 0)n /= 10;\n    const significantDigits = Math.floor(Math.log(n) / log10) + 1;\n    const numberLog = Math.floor(Math.log10(Math.abs(number)));\n    const step = Math.pow(10, numberLog - significantDigits);\n    return Math.max(step, 0.001);\n}\nconst range = (v, min, max)=>{\n    if (max === min) return 0;\n    const _v = clamp(v, min, max);\n    return (_v - min) / (max - min);\n};\nconst invertedRange = (p, min, max)=>p * (max - min) + min;\nconst getUid = ()=>\"_\" + Math.random().toString(36).substr(2, 9);\nconst parens = /\\(([0-9+\\-*/^ .]+)\\)/;\nconst exp = /(\\d+(?:\\.\\d+)?) ?\\^ ?(\\d+(?:\\.\\d+)?)/;\nconst mul = /(\\d+(?:\\.\\d+)?) ?\\* ?(\\d+(?:\\.\\d+)?)/;\nconst div = /(\\d+(?:\\.\\d+)?) ?\\/ ?(\\d+(?:\\.\\d+)?)/;\nconst add = /(\\d+(?:\\.\\d+)?) ?\\+ ?(\\d+(?:\\.\\d+)?)/;\nconst sub = /(\\d+(?:\\.\\d+)?) ?- ?(\\d+(?:\\.\\d+)?)/;\nfunction evaluate(expr) {\n    if (isNaN(Number(expr))) {\n        if (parens.test(expr)) {\n            const newExpr = expr.replace(parens, (match, subExpr)=>String(evaluate(subExpr)));\n            return evaluate(newExpr);\n        } else if (exp.test(expr)) {\n            const newExpr = expr.replace(exp, (match, base, pow)=>String(Math.pow(Number(base), Number(pow))));\n            return evaluate(newExpr);\n        } else if (mul.test(expr)) {\n            const newExpr = expr.replace(mul, (match, a, b)=>String(Number(a) * Number(b)));\n            return evaluate(newExpr);\n        } else if (div.test(expr)) {\n            const newExpr = expr.replace(div, (match, a, b)=>{\n                if (b != 0) return String(Number(a) / Number(b));\n                else throw new Error(\"Division by zero\");\n            });\n            return evaluate(newExpr);\n        } else if (add.test(expr)) {\n            const newExpr = expr.replace(add, (match, a, b)=>String(Number(a) + Number(b)));\n            return evaluate(newExpr);\n        } else if (sub.test(expr)) {\n            const newExpr = expr.replace(sub, (match, a, b)=>String(Number(a) - Number(b)));\n            return evaluate(newExpr);\n        } else {\n            return Number(expr);\n        }\n    }\n    return Number(expr);\n}\nfunction pick(object, keys) {\n    return keys.reduce((obj, key)=>{\n        if (!!object && object.hasOwnProperty(key)) {\n            obj[key] = object[key];\n        }\n        return obj;\n    }, {});\n}\nfunction omit(object, keys) {\n    const obj = _objectSpread2({}, object);\n    keys.forEach((k)=>k in object && delete obj[k]);\n    return obj;\n}\nfunction mapArrayToKeys(value, keys) {\n    return value.reduce((acc, v, i)=>Object.assign(acc, {\n            [keys[i]]: v\n        }), {});\n}\nfunction isObject(variable) {\n    return Object.prototype.toString.call(variable) === \"[object Object]\";\n}\nconst isEmptyObject = (obj)=>isObject(obj) && Object.keys(obj).length === 0;\nlet SpecialInputs;\n(function(SpecialInputs) {\n    SpecialInputs[\"BUTTON\"] = \"BUTTON\";\n    SpecialInputs[\"BUTTON_GROUP\"] = \"BUTTON_GROUP\";\n    SpecialInputs[\"MONITOR\"] = \"MONITOR\";\n    SpecialInputs[\"FOLDER\"] = \"FOLDER\";\n})(SpecialInputs || (SpecialInputs = {}));\nlet LevaInputs;\n(function(LevaInputs) {\n    LevaInputs[\"SELECT\"] = \"SELECT\";\n    LevaInputs[\"IMAGE\"] = \"IMAGE\";\n    LevaInputs[\"NUMBER\"] = \"NUMBER\";\n    LevaInputs[\"COLOR\"] = \"COLOR\";\n    LevaInputs[\"STRING\"] = \"STRING\";\n    LevaInputs[\"BOOLEAN\"] = \"BOOLEAN\";\n    LevaInputs[\"INTERVAL\"] = \"INTERVAL\";\n    LevaInputs[\"VECTOR3D\"] = \"VECTOR3D\";\n    LevaInputs[\"VECTOR2D\"] = \"VECTOR2D\";\n})(LevaInputs || (LevaInputs = {}));\nconst _excluded$9 = [\n    \"type\",\n    \"__customInput\"\n], _excluded2$3 = [\n    \"render\",\n    \"label\",\n    \"optional\",\n    \"order\",\n    \"disabled\",\n    \"hint\",\n    \"onChange\",\n    \"onEditStart\",\n    \"onEditEnd\",\n    \"transient\"\n], _excluded3 = [\n    \"type\"\n];\nfunction parseOptions(_input, key, mergedOptions = {}, customType) {\n    var _commonOptions$option, _commonOptions$disabl;\n    if (typeof _input !== \"object\" || Array.isArray(_input)) {\n        return {\n            type: customType,\n            input: _input,\n            options: _objectSpread2({\n                key,\n                label: key,\n                optional: false,\n                disabled: false,\n                order: 0\n            }, mergedOptions)\n        };\n    }\n    if (\"__customInput\" in _input) {\n        const { type: _type, __customInput } = _input, options = _objectWithoutProperties(_input, _excluded$9);\n        return parseOptions(__customInput, key, options, _type);\n    }\n    const { render, label, optional, order = 0, disabled, hint, onChange, onEditStart, onEditEnd, transient } = _input, inputWithType = _objectWithoutProperties(_input, _excluded2$3);\n    const commonOptions = _objectSpread2({\n        render,\n        key,\n        label: label !== null && label !== void 0 ? label : key,\n        hint,\n        transient: transient !== null && transient !== void 0 ? transient : !!onChange,\n        onEditStart,\n        onEditEnd,\n        disabled,\n        optional,\n        order\n    }, mergedOptions);\n    let { type } = inputWithType, input = _objectWithoutProperties(inputWithType, _excluded3);\n    type = customType !== null && customType !== void 0 ? customType : type;\n    if (type in SpecialInputs) {\n        return {\n            type,\n            input,\n            options: commonOptions\n        };\n    }\n    let computedInput;\n    if (customType && isObject(input) && \"value\" in input) computedInput = input.value;\n    else computedInput = isEmptyObject(input) ? undefined : input;\n    return {\n        type,\n        input: computedInput,\n        options: _objectSpread2(_objectSpread2({}, commonOptions), {}, {\n            onChange,\n            optional: (_commonOptions$option = commonOptions.optional) !== null && _commonOptions$option !== void 0 ? _commonOptions$option : false,\n            disabled: (_commonOptions$disabl = commonOptions.disabled) !== null && _commonOptions$disabl !== void 0 ? _commonOptions$disabl : false\n        })\n    };\n}\nfunction normalizeInput(_input, key, path, data) {\n    const parsedInputAndOptions = parseOptions(_input, key);\n    const { type, input: parsedInput, options } = parsedInputAndOptions;\n    if (type) {\n        if (type in SpecialInputs) return parsedInputAndOptions;\n        return {\n            type,\n            input: normalize$3(type, parsedInput, path, data),\n            options\n        };\n    }\n    let inputType = getValueType(parsedInput);\n    if (inputType) return {\n        type: inputType,\n        input: normalize$3(inputType, parsedInput, path, data),\n        options\n    };\n    inputType = getValueType({\n        value: parsedInput\n    });\n    if (inputType) return {\n        type: inputType,\n        input: normalize$3(inputType, {\n            value: parsedInput\n        }, path, data),\n        options\n    };\n    return false;\n}\nfunction updateInput(input, newValue, path, store, fromPanel) {\n    const { value, type, settings } = input;\n    input.value = sanitizeValue({\n        type,\n        value,\n        settings\n    }, newValue, path, store);\n    input.fromPanel = fromPanel;\n}\nconst ValueError = function ValueError(message, value, error) {\n    this.type = \"LEVA_ERROR\";\n    this.message = \"LEVA: \" + message;\n    this.previousValue = value;\n    this.error = error;\n};\nfunction sanitizeValue({ type, value, settings }, newValue, path, store) {\n    const _newValue = type !== \"SELECT\" && typeof newValue === \"function\" ? newValue(value) : newValue;\n    let sanitizedNewValue;\n    try {\n        sanitizedNewValue = sanitize$4(type, _newValue, settings, value, path, store);\n    } catch (e) {\n        throw new ValueError(`The value \\`${newValue}\\` did not result in a correct value.`, value, e);\n    }\n    if ((0,dequal_lite__WEBPACK_IMPORTED_MODULE_1__.dequal)(sanitizedNewValue, value)) {\n        return value;\n    }\n    return sanitizedNewValue;\n}\nconst debounce = (callback, wait, immediate = false)=>{\n    let timeout = 0;\n    return function() {\n        const args = arguments;\n        const callNow = immediate && !timeout;\n        const next = ()=>callback.apply(this, args);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(next, wait);\n        if (callNow) next();\n    };\n};\nconst multiplyStep = (event)=>event.shiftKey ? 5 : event.altKey ? 1 / 5 : 1;\nconst _excluded$8 = [\n    \"value\"\n], _excluded2$2 = [\n    \"min\",\n    \"max\"\n];\nconst schema$3 = (v)=>{\n    if (typeof v === \"number\") return true;\n    if (typeof v === \"string\") {\n        const _v = parseFloat(v);\n        if (isNaN(_v)) return false;\n        const suffix = v.substring((\"\" + _v).length).trim();\n        return suffix.length < 4;\n    }\n    return false;\n};\nconst sanitize$3 = (v, { min: _min = -Infinity, max: _max = Infinity, suffix })=>{\n    const _v = parseFloat(v);\n    if (v === \"\" || isNaN(_v)) throw Error(\"Invalid number\");\n    const f = clamp(_v, _min, _max);\n    return suffix ? f + suffix : f;\n};\nconst format$1 = (v, { pad: _pad = 0, suffix })=>{\n    const f = parseFloat(v).toFixed(_pad);\n    return suffix ? f + suffix : f;\n};\nconst normalize$2 = (_ref)=>{\n    let { value } = _ref, settings = _objectWithoutProperties(_ref, _excluded$8);\n    const { min = -Infinity, max = Infinity } = settings, _settings = _objectWithoutProperties(settings, _excluded2$2);\n    let _value = parseFloat(value);\n    const suffix = typeof value === \"string\" ? value.substring((\"\" + _value).length) : undefined;\n    _value = clamp(_value, min, max);\n    let step = settings.step;\n    if (!step) {\n        if (Number.isFinite(min)) {\n            if (Number.isFinite(max)) step = +(Math.abs(max - min) / 100).toPrecision(1);\n            else step = +(Math.abs(_value - min) / 100).toPrecision(1);\n        } else if (Number.isFinite(max)) step = +(Math.abs(max - _value) / 100).toPrecision(1);\n    }\n    const padStep = step ? getStep(step) * 10 : getStep(_value);\n    step = step || padStep / 10;\n    const pad = Math.round(clamp(Math.log10(1 / padStep), 0, 2));\n    return {\n        value: suffix ? _value + suffix : _value,\n        settings: _objectSpread2({\n            initialValue: _value,\n            step,\n            pad,\n            min,\n            max,\n            suffix\n        }, _settings)\n    };\n};\nconst sanitizeStep$1 = (v, { step, initialValue })=>{\n    const steps = Math.round((v - initialValue) / step);\n    return initialValue + steps * step;\n};\nvar props$3 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$3,\n    sanitize: sanitize$3,\n    format: format$1,\n    normalize: normalize$2,\n    sanitizeStep: sanitizeStep$1\n});\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nconst InputContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nfunction useInputContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(InputContext);\n}\nconst ThemeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst PanelSettingsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useStoreContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StoreContext);\n}\nfunction usePanelSettingsContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PanelSettingsContext);\n}\nfunction LevaStoreProvider({ children, store }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StoreContext.Provider, {\n        value: store\n    }, children);\n}\nconst getDefaultTheme = ()=>({\n        colors: {\n            elevation1: \"#292d39\",\n            elevation2: \"#181c20\",\n            elevation3: \"#373c4b\",\n            accent1: \"#0066dc\",\n            accent2: \"#007bff\",\n            accent3: \"#3c93ff\",\n            highlight1: \"#535760\",\n            highlight2: \"#8c92a4\",\n            highlight3: \"#fefefe\",\n            vivid1: \"#ffcc00\",\n            folderWidgetColor: \"$highlight2\",\n            folderTextColor: \"$highlight3\",\n            toolTipBackground: \"$highlight3\",\n            toolTipText: \"$elevation2\"\n        },\n        radii: {\n            xs: \"2px\",\n            sm: \"3px\",\n            lg: \"10px\"\n        },\n        space: {\n            xs: \"3px\",\n            sm: \"6px\",\n            md: \"10px\",\n            rowGap: \"7px\",\n            colGap: \"7px\"\n        },\n        fonts: {\n            mono: `ui-monospace, SFMono-Regular, Menlo, 'Roboto Mono', monospace`,\n            sans: `system-ui, sans-serif`\n        },\n        fontSizes: {\n            root: \"11px\",\n            toolTip: \"$root\"\n        },\n        sizes: {\n            rootWidth: \"280px\",\n            controlWidth: \"160px\",\n            numberInputMinWidth: \"38px\",\n            scrubberWidth: \"8px\",\n            scrubberHeight: \"16px\",\n            rowHeight: \"24px\",\n            folderTitleHeight: \"20px\",\n            checkboxSize: \"16px\",\n            joystickWidth: \"100px\",\n            joystickHeight: \"100px\",\n            colorPickerWidth: \"$controlWidth\",\n            colorPickerHeight: \"100px\",\n            imagePreviewWidth: \"$controlWidth\",\n            imagePreviewHeight: \"100px\",\n            monitorHeight: \"60px\",\n            titleBarHeight: \"39px\"\n        },\n        shadows: {\n            level1: \"0 0 9px 0 #00000088\",\n            level2: \"0 4px 14px #00000033\"\n        },\n        borderWidths: {\n            root: \"0px\",\n            input: \"1px\",\n            focus: \"1px\",\n            hover: \"1px\",\n            active: \"1px\",\n            folder: \"1px\"\n        },\n        fontWeights: {\n            label: \"normal\",\n            folder: \"normal\",\n            button: \"normal\"\n        }\n    });\nfunction createStateClass(value, options) {\n    const [borderColor, bgColor] = value.split(\" \");\n    const css = {};\n    if (borderColor !== \"none\") {\n        css.boxShadow = `${options.inset ? \"inset \" : \"\"}0 0 0 $borderWidths${[\n            options.key\n        ]} $colors${borderColor !== \"default\" && borderColor || options.borderColor}`;\n    }\n    if (bgColor) {\n        css.backgroundColor = bgColor;\n    }\n    return css;\n}\nconst utils = {\n    $inputStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$input\",\n                borderColor: \"$highlight1\",\n                inset: true\n            }),\n    $focusStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$focus\",\n                borderColor: \"$accent2\"\n            }),\n    $hoverStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$hover\",\n                borderColor: \"$accent1\",\n                inset: true\n            }),\n    $activeStyle: ()=>(value)=>createStateClass(value, {\n                key: \"$active\",\n                borderColor: \"$accent1\",\n                inset: true\n            })\n};\nconst { styled, css, createTheme, globalCss, keyframes } = (0,_stitches_react__WEBPACK_IMPORTED_MODULE_3__.createStitches)({\n    prefix: \"leva\",\n    theme: getDefaultTheme(),\n    utils: _objectSpread2(_objectSpread2({}, utils), {}, {\n        $flex: ()=>({\n                display: \"flex\",\n                alignItems: \"center\"\n            }),\n        $flexCenter: ()=>({\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\"\n            }),\n        $reset: ()=>({\n                outline: \"none\",\n                fontSize: \"inherit\",\n                fontWeight: \"inherit\",\n                color: \"inherit\",\n                fontFamily: \"inherit\",\n                border: \"none\",\n                backgroundColor: \"transparent\",\n                appearance: \"none\"\n            }),\n        $draggable: ()=>({\n                touchAction: \"none\",\n                WebkitUserDrag: \"none\",\n                userSelect: \"none\"\n            }),\n        $focus: (value)=>({\n                \"&:focus\": utils.$focusStyle()(value)\n            }),\n        $focusWithin: (value)=>({\n                \"&:focus-within\": utils.$focusStyle()(value)\n            }),\n        $hover: (value)=>({\n                \"&:hover\": utils.$hoverStyle()(value)\n            }),\n        $active: (value)=>({\n                \"&:active\": utils.$activeStyle()(value)\n            })\n    })\n});\nconst globalStyles = globalCss({\n    \".leva__panel__dragged\": {\n        WebkitUserDrag: \"none\",\n        userSelect: \"none\",\n        input: {\n            userSelect: \"none\"\n        },\n        \"*\": {\n            cursor: \"ew-resize !important\"\n        }\n    }\n});\nfunction mergeTheme(newTheme) {\n    const defaultTheme = getDefaultTheme();\n    if (!newTheme) return {\n        theme: defaultTheme,\n        className: \"\"\n    };\n    Object.keys(newTheme).forEach((key)=>{\n        Object.assign(defaultTheme[key], newTheme[key]);\n    });\n    const customTheme = createTheme(defaultTheme);\n    return {\n        theme: defaultTheme,\n        className: customTheme.className\n    };\n}\nfunction useTh(category, key) {\n    const { theme } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);\n    if (!(category in theme) || !(key in theme[category])) {\n        warn(LevaErrors.THEME_ERROR, category, key);\n        return \"\";\n    }\n    let _key = key;\n    while(true){\n        let value = theme[category][_key];\n        if (typeof value === \"string\" && value.charAt(0) === \"$\") _key = value.substr(1);\n        else return value;\n    }\n}\nconst StyledInput = styled(\"input\", {\n    $reset: \"\",\n    padding: \"0 $sm\",\n    width: 0,\n    minWidth: 0,\n    flex: 1,\n    height: \"100%\",\n    variants: {\n        levaType: {\n            number: {\n                textAlign: \"right\"\n            }\n        },\n        as: {\n            textarea: {\n                padding: \"$sm\"\n            }\n        }\n    }\n});\nconst InnerLabel = styled(\"div\", {\n    $draggable: \"\",\n    height: \"100%\",\n    $flexCenter: \"\",\n    position: \"relative\",\n    padding: \"0 $xs\",\n    fontSize: \"0.8em\",\n    opacity: 0.8,\n    cursor: \"default\",\n    touchAction: \"none\",\n    [`& + ${StyledInput}`]: {\n        paddingLeft: 0\n    }\n});\nconst InnerNumberLabel = styled(InnerLabel, {\n    cursor: \"ew-resize\",\n    marginRight: \"-$xs\",\n    textTransform: \"uppercase\",\n    opacity: 0.3,\n    \"&:hover\": {\n        opacity: 1\n    },\n    variants: {\n        dragging: {\n            true: {\n                backgroundColor: \"$accent2\",\n                opacity: 1\n            }\n        }\n    }\n});\nconst InputContainer = styled(\"div\", {\n    $flex: \"\",\n    position: \"relative\",\n    borderRadius: \"$sm\",\n    overflow: \"hidden\",\n    color: \"inherit\",\n    height: \"$rowHeight\",\n    backgroundColor: \"$elevation3\",\n    $inputStyle: \"$elevation1\",\n    $hover: \"\",\n    $focusWithin: \"\",\n    variants: {\n        textArea: {\n            true: {\n                height: \"auto\"\n            }\n        }\n    }\n});\nconst _excluded$7 = [\n    \"innerLabel\",\n    \"value\",\n    \"onUpdate\",\n    \"onChange\",\n    \"onKeyDown\",\n    \"type\",\n    \"id\",\n    \"inputType\",\n    \"rows\"\n], _excluded2$1 = [\n    \"onUpdate\"\n];\nfunction ValueInput(_ref) {\n    let { innerLabel, value, onUpdate, onChange, onKeyDown, type, id, inputType = \"text\", rows = 0 } = _ref, props = _objectWithoutProperties(_ref, _excluded$7);\n    const { id: _id, emitOnEditStart, emitOnEditEnd, disabled } = useInputContext();\n    const inputId = id || _id;\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const isTextArea = rows > 0;\n    const asType = isTextArea ? \"textarea\" : \"input\";\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((fn)=>(event)=>{\n            const _value = event.currentTarget.value;\n            fn(_value);\n        }, []);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        const ref = inputRef.current;\n        const _onUpdate = update((value)=>{\n            onUpdate(value);\n            emitOnEditEnd();\n        });\n        ref === null || ref === void 0 ? void 0 : ref.addEventListener(\"blur\", _onUpdate);\n        return ()=>ref === null || ref === void 0 ? void 0 : ref.removeEventListener(\"blur\", _onUpdate);\n    }, [\n        update,\n        onUpdate,\n        emitOnEditEnd\n    ]);\n    const onKeyPress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        if (event.key === \"Enter\") {\n            update(onUpdate)(event);\n        }\n    }, [\n        update,\n        onUpdate\n    ]);\n    const inputProps = Object.assign({\n        as: asType\n    }, isTextArea ? {\n        rows\n    } : {}, props);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InputContainer, {\n        textArea: isTextArea\n    }, innerLabel && typeof innerLabel === \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InnerLabel, null, innerLabel) : innerLabel, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledInput, _extends({\n        levaType: type,\n        ref: inputRef,\n        id: inputId,\n        type: inputType,\n        autoComplete: \"off\",\n        spellCheck: \"false\",\n        value: value,\n        onChange: update(onChange),\n        onFocus: ()=>emitOnEditStart(),\n        onKeyPress: onKeyPress,\n        onKeyDown: onKeyDown,\n        disabled: disabled\n    }, inputProps)));\n}\nfunction NumberInput(_ref2) {\n    let { onUpdate } = _ref2, props = _objectWithoutProperties(_ref2, _excluded2$1);\n    const _onUpdate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((v)=>onUpdate(parseNumber(v)), [\n        onUpdate\n    ]);\n    const onKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        const dir = event.key === \"ArrowUp\" ? 1 : event.key === \"ArrowDown\" ? -1 : 0;\n        if (dir) {\n            event.preventDefault();\n            const step = event.altKey ? 0.1 : event.shiftKey ? 10 : 1;\n            onUpdate((v)=>parseFloat(v) + dir * step);\n        }\n    }, [\n        onUpdate\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ValueInput, _extends({}, props, {\n        onUpdate: _onUpdate,\n        onKeyDown: onKeyDown,\n        type: \"number\"\n    }));\n}\nconst StyledFolder = styled(\"div\", {});\nconst StyledWrapper = styled(\"div\", {\n    position: \"relative\",\n    background: \"$elevation2\",\n    transition: \"height 300ms ease\",\n    variants: {\n        fill: {\n            true: {},\n            false: {}\n        },\n        flat: {\n            false: {},\n            true: {}\n        },\n        isRoot: {\n            true: {},\n            false: {\n                paddingLeft: \"$md\",\n                \"&::after\": {\n                    content: '\"\"',\n                    position: \"absolute\",\n                    left: 0,\n                    top: 0,\n                    width: \"$borderWidths$folder\",\n                    height: \"100%\",\n                    backgroundColor: \"$folderWidgetColor\",\n                    opacity: 0.4,\n                    transform: \"translateX(-50%)\"\n                }\n            }\n        }\n    },\n    compoundVariants: [\n        {\n            isRoot: true,\n            fill: false,\n            css: {\n                overflowY: \"auto\",\n                maxHeight: \"calc(100vh - 20px - $$titleBarHeight)\"\n            }\n        },\n        {\n            isRoot: true,\n            flat: false,\n            css: {\n                borderRadius: \"$lg\"\n            }\n        }\n    ]\n});\nconst StyledTitle = styled(\"div\", {\n    $flex: \"\",\n    color: \"$folderTextColor\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    height: \"$folderTitleHeight\",\n    fontWeight: \"$folder\",\n    \"> svg\": {\n        marginLeft: -4,\n        marginRight: 4,\n        cursor: \"pointer\",\n        fill: \"$folderWidgetColor\",\n        opacity: 0.6\n    },\n    \"&:hover > svg\": {\n        fill: \"$folderWidgetColor\"\n    },\n    [`&:hover + ${StyledWrapper}::after`]: {\n        opacity: 0.6\n    },\n    [`${StyledFolder}:hover > & + ${StyledWrapper}::after`]: {\n        opacity: 0.6\n    },\n    [`${StyledFolder}:hover > & > svg`]: {\n        opacity: 1\n    }\n});\nconst StyledContent = styled(\"div\", {\n    position: \"relative\",\n    display: \"grid\",\n    gridTemplateColumns: \"100%\",\n    rowGap: \"$rowGap\",\n    transition: \"opacity 250ms ease\",\n    variants: {\n        toggled: {\n            true: {\n                opacity: 1,\n                transitionDelay: \"250ms\"\n            },\n            false: {\n                opacity: 0,\n                transitionDelay: \"0ms\",\n                pointerEvents: \"none\"\n            }\n        },\n        isRoot: {\n            true: {\n                \"& > div\": {\n                    paddingLeft: \"$md\",\n                    paddingRight: \"$md\"\n                },\n                \"& > div:first-of-type\": {\n                    paddingTop: \"$sm\"\n                },\n                \"& > div:last-of-type\": {\n                    paddingBottom: \"$sm\"\n                },\n                [`> ${StyledFolder}:not(:first-of-type)`]: {\n                    paddingTop: \"$sm\",\n                    marginTop: \"$md\",\n                    borderTop: \"$borderWidths$folder solid $colors$elevation1\"\n                }\n            }\n        }\n    }\n});\nconst StyledRow = styled(\"div\", {\n    position: \"relative\",\n    zIndex: 100,\n    display: \"grid\",\n    rowGap: \"$rowGap\",\n    gridTemplateRows: \"minmax($sizes$rowHeight, max-content)\",\n    alignItems: \"center\",\n    color: \"$highlight2\",\n    [`${StyledContent} > &`]: {\n        \"&:first-of-type\": {\n            marginTop: \"$rowGap\"\n        },\n        \"&:last-of-type\": {\n            marginBottom: \"$rowGap\"\n        }\n    },\n    variants: {\n        disabled: {\n            true: {\n                pointerEvents: \"none\"\n            },\n            false: {\n                \"&:hover,&:focus-within\": {\n                    color: \"$highlight3\"\n                }\n            }\n        }\n    }\n});\nconst StyledInputRow = styled(StyledRow, {\n    gridTemplateColumns: \"auto $sizes$controlWidth\",\n    columnGap: \"$colGap\"\n});\nconst CopyLabelContainer = styled(\"div\", {\n    $flex: \"\",\n    height: \"100%\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    \"& > div\": {\n        marginLeft: \"$colGap\",\n        padding: \"0 $xs\",\n        opacity: 0.4\n    },\n    \"& > div:hover\": {\n        opacity: 0.8\n    },\n    \"& > div > svg\": {\n        display: \"none\",\n        cursor: \"pointer\",\n        width: 13,\n        minWidth: 13,\n        height: 13,\n        backgroundColor: \"$elevation2\"\n    },\n    \"&:hover > div > svg\": {\n        display: \"block\"\n    },\n    variants: {\n        align: {\n            top: {\n                height: \"100%\",\n                alignItems: \"flex-start\",\n                paddingTop: \"$sm\"\n            }\n        }\n    }\n});\nconst StyledOptionalToggle = styled(\"input\", {\n    $reset: \"\",\n    height: 0,\n    width: 0,\n    opacity: 0,\n    margin: 0,\n    \"& + label\": {\n        position: \"relative\",\n        $flexCenter: \"\",\n        height: \"100%\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n        paddingLeft: 2,\n        paddingRight: \"$sm\",\n        pointerEvents: \"auto\"\n    },\n    \"& + label:after\": {\n        content: '\"\"',\n        width: 6,\n        height: 6,\n        backgroundColor: \"$elevation3\",\n        borderRadius: \"50%\",\n        $activeStyle: \"\"\n    },\n    \"&:focus + label:after\": {\n        $focusStyle: \"\"\n    },\n    \"& + label:active:after\": {\n        backgroundColor: \"$accent1\",\n        $focusStyle: \"\"\n    },\n    \"&:checked + label:after\": {\n        backgroundColor: \"$accent1\"\n    }\n});\nconst StyledLabel = styled(\"label\", {\n    fontWeight: \"$label\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    \"& > svg\": {\n        display: \"block\"\n    }\n});\nconst StyledInputWrapper$1 = styled(\"div\", {\n    opacity: 1,\n    variants: {\n        disabled: {\n            true: {\n                opacity: 0.6,\n                pointerEvents: \"none\",\n                [`& ${StyledLabel}`]: {\n                    pointerEvents: \"auto\"\n                }\n            }\n        }\n    }\n});\nconst Overlay = styled(\"div\", {\n    position: \"fixed\",\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    zIndex: 1000,\n    userSelect: \"none\"\n});\nconst StyledToolTipContent = styled(\"div\", {\n    background: \"$toolTipBackground\",\n    fontFamily: \"$sans\",\n    fontSize: \"$toolTip\",\n    padding: \"$xs $sm\",\n    color: \"$toolTipText\",\n    borderRadius: \"$xs\",\n    boxShadow: \"$level2\",\n    maxWidth: 260\n});\nconst ToolTipArrow = styled(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_4__.Arrow, {\n    fill: \"$toolTipBackground\"\n});\nfunction Portal({ children }) {\n    const { className } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_5__.Root, {\n        className: className\n    }, children);\n}\nconst _excluded$6 = [\n    \"align\"\n];\nfunction OptionalToggle() {\n    const { id, disable, disabled } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledOptionalToggle, {\n        id: id + \"__disable\",\n        type: \"checkbox\",\n        checked: !disabled,\n        onChange: ()=>disable(!disabled)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"label\", {\n        htmlFor: id + \"__disable\"\n    }));\n}\nfunction RawLabel(props) {\n    const { id, optional, hint } = useInputContext();\n    const htmlFor = props.htmlFor || (id ? {\n        htmlFor: id\n    } : null);\n    const title = !hint && typeof props.children === \"string\" ? {\n        title: props.children\n    } : null;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, optional && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(OptionalToggle, null), hint !== undefined ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_4__.Root, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_4__.Trigger, {\n        asChild: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledLabel, _extends({}, htmlFor, props))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_4__.Content, {\n        side: \"top\",\n        sideOffset: 2\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledToolTipContent, null, hint, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ToolTipArrow, null)))) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledLabel, _extends({}, htmlFor, title, props)));\n}\nfunction Label(_ref) {\n    let { align } = _ref, props = _objectWithoutProperties(_ref, _excluded$6);\n    const { value, label, key, disabled } = useInputContext();\n    const { hideCopyButton } = usePanelSettingsContext();\n    const copyEnabled = !hideCopyButton && key !== undefined;\n    const [copied, setCopied] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const handleClick = async ()=>{\n        try {\n            await navigator.clipboard.writeText(JSON.stringify({\n                [key]: value !== null && value !== void 0 ? value : \"\"\n            }));\n            setCopied(true);\n        } catch (_unused) {\n            warn(LevaErrors.CLIPBOARD_ERROR, {\n                [key]: value\n            });\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CopyLabelContainer, {\n        align: align,\n        onPointerLeave: ()=>setCopied(false)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RawLabel, props), copyEnabled && !disabled && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        title: `Click to copy ${typeof label === \"string\" ? label : key} value`\n    }, !copied ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        onClick: handleClick,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z\"\n    })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M9 2a1 1 0 000 2h2a1 1 0 100-2H9z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm9.707 5.707a1 1 0 00-1.414-1.414L9 12.586l-1.293-1.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\",\n        clipRule: \"evenodd\"\n    }))));\n}\nconst _excluded$5 = [\n    \"toggled\"\n];\nconst Svg = styled(\"svg\", {\n    fill: \"currentColor\",\n    transition: \"transform 350ms ease, fill 250ms ease\"\n});\nfunction Chevron(_ref) {\n    let { toggled } = _ref, props = _objectWithoutProperties(_ref, _excluded$5);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Svg, _extends({\n        width: \"9\",\n        height: \"5\",\n        viewBox: \"0 0 9 5\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        style: {\n            transform: `rotate(${toggled ? 0 : -90}deg)`\n        }\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M3.8 4.4c.4.3 1 .3 1.4 0L8 1.7A1 1 0 007.4 0H1.6a1 1 0 00-.7 1.7l3 2.7z\"\n    }));\n}\nconst _excluded$4 = [\n    \"input\"\n];\nfunction Row(_ref) {\n    let { input } = _ref, props = _objectWithoutProperties(_ref, _excluded$4);\n    if (input) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledInputRow, props);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledRow, props);\n}\nfunction useInputSetters({ value, type, settings, setValue }) {\n    const [displayValue, setDisplayValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(format$2(type, value, settings));\n    const previousValueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    const settingsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(settings);\n    settingsRef.current = settings;\n    const setFormat = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((v)=>setDisplayValue(format$2(type, v, settingsRef.current)), [\n        type\n    ]);\n    const onUpdate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((updatedValue)=>{\n        try {\n            setValue(updatedValue);\n        } catch (error) {\n            const { type, previousValue } = error;\n            if (type !== \"LEVA_ERROR\") throw error;\n            setFormat(previousValue);\n        }\n    }, [\n        setFormat,\n        setValue\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(0,dequal_lite__WEBPACK_IMPORTED_MODULE_1__.dequal)(value, previousValueRef.current)) {\n            setFormat(value);\n        }\n        previousValueRef.current = value;\n    }, [\n        value,\n        setFormat\n    ]);\n    return {\n        displayValue,\n        onChange: setDisplayValue,\n        onUpdate\n    };\n}\nfunction useDrag(handler, config) {\n    const { emitOnEditStart, emitOnEditEnd } = useInputContext();\n    return (0,_use_gesture_react__WEBPACK_IMPORTED_MODULE_6__.useDrag)((state)=>{\n        if (state.first) {\n            document.body.classList.add(\"leva__panel__dragged\");\n            emitOnEditStart === null || emitOnEditStart === void 0 ? void 0 : emitOnEditStart();\n        }\n        const result = handler(state);\n        if (state.last) {\n            document.body.classList.remove(\"leva__panel__dragged\");\n            emitOnEditEnd === null || emitOnEditEnd === void 0 ? void 0 : emitOnEditEnd();\n        }\n        return result;\n    }, config);\n}\nfunction useCanvas2d(fn) {\n    const canvas = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const hasFired = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const handleCanvas = debounce(()=>{\n            canvas.current.width = canvas.current.offsetWidth * window.devicePixelRatio;\n            canvas.current.height = canvas.current.offsetHeight * window.devicePixelRatio;\n            fn(canvas.current, ctx.current);\n        }, 250);\n        window.addEventListener(\"resize\", handleCanvas);\n        if (!hasFired.current) {\n            handleCanvas();\n            hasFired.current = true;\n        }\n        return ()=>window.removeEventListener(\"resize\", handleCanvas);\n    }, [\n        fn\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ctx.current = canvas.current.getContext(\"2d\");\n    }, []);\n    return [\n        canvas,\n        ctx\n    ];\n}\nfunction useTransform() {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const local = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const set = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((point)=>{\n        Object.assign(local.current, point);\n        if (ref.current) ref.current.style.transform = `translate3d(${local.current.x}px, ${local.current.y}px, 0)`;\n    }, []);\n    return [\n        ref,\n        set\n    ];\n}\nconst _excluded$3 = [\n    \"__refCount\"\n];\nconst getInputAtPath = (data, path)=>{\n    if (!data[path]) return null;\n    const _data$path = data[path], input = _objectWithoutProperties(_data$path, _excluded$3);\n    return input;\n};\nfunction useInput(path) {\n    const store = useStoreContext();\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getInputAtPath(store.getData(), path));\n    const set = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>store.setValueAtPath(path, value, true), [\n        path,\n        store\n    ]);\n    const setSettings = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((settings)=>store.setSettingsAtPath(path, settings), [\n        path,\n        store\n    ]);\n    const disable = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((flag)=>store.disableInputAtPath(path, flag), [\n        path,\n        store\n    ]);\n    const emitOnEditStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>store.emitOnEditStart(path), [\n        path,\n        store\n    ]);\n    const emitOnEditEnd = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>store.emitOnEditEnd(path), [\n        path,\n        store\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setState(getInputAtPath(store.getData(), path));\n        const unsub = store.useStore.subscribe((s)=>getInputAtPath(s.data, path), setState, {\n            equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n        });\n        return ()=>unsub();\n    }, [\n        store,\n        path\n    ]);\n    return [\n        state,\n        {\n            set,\n            setSettings,\n            disable,\n            storeId: store.storeId,\n            emitOnEditStart,\n            emitOnEditEnd\n        }\n    ];\n}\nconst RangeGrid = styled(\"div\", {\n    variants: {\n        hasRange: {\n            true: {\n                position: \"relative\",\n                display: \"grid\",\n                gridTemplateColumns: \"auto $sizes$numberInputMinWidth\",\n                columnGap: \"$colGap\",\n                alignItems: \"center\"\n            }\n        }\n    }\n});\nconst Range = styled(\"div\", {\n    position: \"relative\",\n    width: \"100%\",\n    height: 2,\n    borderRadius: \"$xs\",\n    backgroundColor: \"$elevation1\"\n});\nconst Scrubber = styled(\"div\", {\n    position: \"absolute\",\n    width: \"$scrubberWidth\",\n    height: \"$scrubberHeight\",\n    borderRadius: \"$xs\",\n    boxShadow: \"0 0 0 2px $colors$elevation2\",\n    backgroundColor: \"$accent2\",\n    cursor: \"pointer\",\n    $active: \"none $accent1\",\n    $hover: \"none $accent3\",\n    variants: {\n        position: {\n            left: {\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n                transform: \"translateX(calc(-0.5 * ($sizes$scrubberWidth + 4px)))\"\n            },\n            right: {\n                borderTopLeftRadius: 0,\n                borderBottomLeftRadius: 0,\n                transform: \"translateX(calc(0.5 * ($sizes$scrubberWidth + 4px)))\"\n            }\n        }\n    }\n});\nconst RangeWrapper = styled(\"div\", {\n    position: \"relative\",\n    $flex: \"\",\n    height: \"100%\",\n    cursor: \"pointer\",\n    touchAction: \"none\"\n});\nconst Indicator = styled(\"div\", {\n    position: \"absolute\",\n    height: \"100%\",\n    backgroundColor: \"$accent2\"\n});\nfunction RangeSlider({ value, min, max, onDrag, step, initialValue }) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const scrubberRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const rangeWidth = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const scrubberWidth = useTh(\"sizes\", \"scrubberWidth\");\n    const bind = useDrag(({ event, first, xy: [x], movement: [mx], memo })=>{\n        if (first) {\n            const { width, left } = ref.current.getBoundingClientRect();\n            rangeWidth.current = width - parseFloat(scrubberWidth);\n            const targetIsScrub = (event === null || event === void 0 ? void 0 : event.target) === scrubberRef.current;\n            memo = targetIsScrub ? value : invertedRange((x - left) / width, min, max);\n        }\n        const newValue = memo + invertedRange(mx / rangeWidth.current, 0, max - min);\n        onDrag(sanitizeStep$1(newValue, {\n            step,\n            initialValue\n        }));\n        return memo;\n    });\n    const pos = range(value, min, max);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RangeWrapper, _extends({\n        ref: ref\n    }, bind()), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Range, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Indicator, {\n        style: {\n            left: 0,\n            right: `${(1 - pos) * 100}%`\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Scrubber, {\n        ref: scrubberRef,\n        style: {\n            left: `calc(${pos} * (100% - ${scrubberWidth}))`\n        }\n    }));\n}\nconst DraggableLabel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().memo(({ label, onUpdate, step, innerLabelTrim })=>{\n    const [dragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const bind = useDrag(({ active, delta: [dx], event, memo: _memo = 0, first, last, target })=>{\n        if (first) {\n            const label = target;\n            label.requestPointerLock();\n        }\n        if (last) {\n            document.exitPointerLock();\n        }\n        setDragging(active);\n        _memo += dx / 2;\n        if (Math.abs(_memo) >= 1) {\n            onUpdate((v)=>parseFloat(v) + Math.floor(_memo) * step * multiplyStep(event));\n            _memo = 0;\n        }\n        return _memo;\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InnerNumberLabel, _extends({\n        dragging: dragging,\n        title: label.length > 1 ? label : \"\"\n    }, bind()), label.slice(0, innerLabelTrim));\n});\nfunction Number$1({ label, id, displayValue, onUpdate, onChange, settings, innerLabelTrim = 1 }) {\n    const InnerLabel = innerLabelTrim > 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DraggableLabel, {\n        label: label,\n        step: settings.step,\n        onUpdate: onUpdate,\n        innerLabelTrim: innerLabelTrim\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(NumberInput, {\n        id: id,\n        value: String(displayValue),\n        onUpdate: onUpdate,\n        onChange: onChange,\n        innerLabel: InnerLabel\n    });\n}\nfunction NumberComponent() {\n    const props = useInputContext();\n    const { label, value, onUpdate, settings, id } = props;\n    const { min, max } = settings;\n    const hasRange = max !== Infinity && min !== -Infinity;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RangeGrid, {\n        hasRange: hasRange\n    }, hasRange && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RangeSlider, _extends({\n        value: parseFloat(value),\n        onDrag: onUpdate\n    }, settings)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Number$1, _extends({}, props, {\n        id: id,\n        label: \"value\",\n        innerLabelTrim: hasRange ? 0 : 1\n    }))));\n}\nconst { sanitizeStep } = props$3, rest = _objectWithoutProperties(props$3, [\n    \"sanitizeStep\"\n]);\nvar number = createInternalPlugin(_objectSpread2({\n    component: NumberComponent\n}, rest));\nconst schema$2 = (_o, s)=>(0,v8n__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().schema({\n        options: (0,v8n__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().passesAnyOf((0,v8n__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().object(), (0,v8n__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().array())\n    }).test(s);\nconst sanitize$2 = (value, { values })=>{\n    if (values.indexOf(value) < 0) throw Error(`Selected value doesn't match Select options`);\n    return value;\n};\nconst format = (value, { values })=>{\n    return values.indexOf(value);\n};\nconst normalize$1 = (input)=>{\n    let { value, options } = input;\n    let keys;\n    let values;\n    if (Array.isArray(options)) {\n        values = options;\n        keys = options.map((o)=>String(o));\n    } else {\n        values = Object.values(options);\n        keys = Object.keys(options);\n    }\n    if (!(\"value\" in input)) value = values[0];\n    else if (!values.includes(value)) {\n        keys.unshift(String(value));\n        values.unshift(value);\n    }\n    if (!Object.values(options).includes(value)) options[String(value)] = value;\n    return {\n        value,\n        settings: {\n            keys,\n            values\n        }\n    };\n};\nvar props$2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$2,\n    sanitize: sanitize$2,\n    format: format,\n    normalize: normalize$1\n});\nconst SelectContainer = styled(\"div\", {\n    $flexCenter: \"\",\n    position: \"relative\",\n    \"> svg\": {\n        pointerEvents: \"none\",\n        position: \"absolute\",\n        right: \"$md\"\n    }\n});\nconst NativeSelect = styled(\"select\", {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    opacity: 0\n});\nconst PresentationalSelect = styled(\"div\", {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"$rowHeight\",\n    backgroundColor: \"$elevation3\",\n    borderRadius: \"$sm\",\n    padding: \"0 $sm\",\n    cursor: \"pointer\",\n    [`${NativeSelect}:focus + &`]: {\n        $focusStyle: \"\"\n    },\n    [`${NativeSelect}:hover + &`]: {\n        $hoverStyle: \"\"\n    }\n});\nfunction Select({ displayValue, value, onUpdate, id, settings, disabled }) {\n    const { keys, values } = settings;\n    const lastDisplayedValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (value === values[displayValue]) {\n        lastDisplayedValue.current = keys[displayValue];\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SelectContainer, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(NativeSelect, {\n        id: id,\n        value: displayValue,\n        onChange: (e)=>onUpdate(values[Number(e.currentTarget.value)]),\n        disabled: disabled\n    }, keys.map((key, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n            key: key,\n            value: index\n        }, key))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PresentationalSelect, null, lastDisplayedValue.current), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Chevron, {\n        toggled: true\n    }));\n}\nfunction SelectComponent() {\n    const { label, value, displayValue, onUpdate, id, disabled, settings } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Select, {\n        id: id,\n        value: value,\n        displayValue: displayValue,\n        onUpdate: onUpdate,\n        settings: settings,\n        disabled: disabled\n    }));\n}\nvar select = createInternalPlugin(_objectSpread2({\n    component: SelectComponent\n}, props$2));\nconst schema$1 = (o)=>(0,v8n__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().string().test(o);\nconst sanitize$1 = (v)=>{\n    if (typeof v !== \"string\") throw Error(`Invalid string`);\n    return v;\n};\nconst normalize = ({ value, editable: _editable = true, rows: _rows = false })=>{\n    return {\n        value,\n        settings: {\n            editable: _editable,\n            rows: typeof _rows === \"number\" ? _rows : _rows ? 5 : 0\n        }\n    };\n};\nvar props$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema$1,\n    sanitize: sanitize$1,\n    normalize: normalize\n});\nconst _excluded$2 = [\n    \"displayValue\",\n    \"onUpdate\",\n    \"onChange\",\n    \"editable\"\n];\nconst NonEditableString = styled(\"div\", {\n    whiteSpace: \"pre-wrap\"\n});\nfunction String$1(_ref) {\n    let { displayValue, onUpdate, onChange, editable = true } = _ref, props = _objectWithoutProperties(_ref, _excluded$2);\n    if (editable) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ValueInput, _extends({\n        value: displayValue,\n        onUpdate: onUpdate,\n        onChange: onChange\n    }, props));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(NonEditableString, null, displayValue);\n}\nfunction StringComponent() {\n    const { label, settings, displayValue, onUpdate, onChange } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(String$1, _extends({\n        displayValue: displayValue,\n        onUpdate: onUpdate,\n        onChange: onChange\n    }, settings)));\n}\nvar string = createInternalPlugin(_objectSpread2({\n    component: StringComponent\n}, props$1));\nconst schema = (o)=>(0,v8n__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().boolean().test(o);\nconst sanitize = (v)=>{\n    if (typeof v !== \"boolean\") throw Error(\"Invalid boolean\");\n    return v;\n};\nvar props = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    schema: schema,\n    sanitize: sanitize\n});\nconst StyledInputWrapper = styled(\"div\", {\n    position: \"relative\",\n    $flex: \"\",\n    height: \"$rowHeight\",\n    input: {\n        $reset: \"\",\n        height: 0,\n        width: 0,\n        opacity: 0,\n        margin: 0\n    },\n    label: {\n        position: \"relative\",\n        $flexCenter: \"\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n        height: \"$checkboxSize\",\n        width: \"$checkboxSize\",\n        backgroundColor: \"$elevation3\",\n        borderRadius: \"$sm\",\n        $hover: \"\"\n    },\n    \"input:focus + label\": {\n        $focusStyle: \"\"\n    },\n    \"input:focus:checked + label, input:checked + label:hover\": {\n        $hoverStyle: \"$accent3\"\n    },\n    \"input + label:active\": {\n        backgroundColor: \"$accent1\"\n    },\n    \"input:checked + label:active\": {\n        backgroundColor: \"$accent1\"\n    },\n    \"label > svg\": {\n        display: \"none\",\n        width: \"90%\",\n        height: \"90%\",\n        stroke: \"$highlight3\"\n    },\n    \"input:checked + label\": {\n        backgroundColor: \"$accent2\"\n    },\n    \"input:checked + label > svg\": {\n        display: \"block\"\n    }\n});\nfunction Boolean({ value, onUpdate, id, disabled }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledInputWrapper, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        id: id,\n        type: \"checkbox\",\n        checked: value,\n        onChange: (e)=>onUpdate(e.currentTarget.checked),\n        disabled: disabled\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"label\", {\n        htmlFor: id\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: 2,\n        d: \"M5 13l4 4L19 7\"\n    }))));\n}\nfunction BooleanComponent() {\n    const { label, value, onUpdate, disabled, id } = useInputContext();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Row, {\n        input: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Label, null, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Boolean, {\n        value: value,\n        onUpdate: onUpdate,\n        id: id,\n        disabled: disabled\n    }));\n}\nvar boolean = createInternalPlugin(_objectSpread2({\n    component: BooleanComponent\n}, props));\nconst _excluded$1 = [\n    \"locked\"\n];\nfunction Coordinate({ value, id, valueKey, settings, onUpdate, innerLabelTrim }) {\n    const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value[valueKey]);\n    valueRef.current = value[valueKey];\n    const setValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newValue)=>onUpdate({\n            [valueKey]: sanitizeValue({\n                type: \"NUMBER\",\n                value: valueRef.current,\n                settings\n            }, newValue)\n        }), [\n        onUpdate,\n        settings,\n        valueKey\n    ]);\n    const number = useInputSetters({\n        type: \"NUMBER\",\n        value: value[valueKey],\n        settings,\n        setValue\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Number$1, {\n        id: id,\n        label: valueKey,\n        value: value[valueKey],\n        displayValue: number.displayValue,\n        onUpdate: number.onUpdate,\n        onChange: number.onChange,\n        settings: settings,\n        innerLabelTrim: innerLabelTrim\n    });\n}\nconst Container = styled(\"div\", {\n    display: \"grid\",\n    columnGap: \"$colGap\",\n    gridAutoFlow: \"column dense\",\n    alignItems: \"center\",\n    variants: {\n        withLock: {\n            true: {\n                gridTemplateColumns: \"10px auto\",\n                \"> svg\": {\n                    cursor: \"pointer\"\n                }\n            }\n        }\n    }\n});\nfunction Lock(_ref) {\n    let { locked } = _ref, props = _objectWithoutProperties(_ref, _excluded$1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", _extends({\n        width: \"10\",\n        height: \"10\",\n        viewBox: \"0 0 15 15\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, props), locked ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M5 4.63601C5 3.76031 5.24219 3.1054 5.64323 2.67357C6.03934 2.24705 6.64582 1.9783 7.5014 1.9783C8.35745 1.9783 8.96306 2.24652 9.35823 2.67208C9.75838 3.10299 10 3.75708 10 4.63325V5.99999H5V4.63601ZM4 5.99999V4.63601C4 3.58148 4.29339 2.65754 4.91049 1.99307C5.53252 1.32329 6.42675 0.978302 7.5014 0.978302C8.57583 0.978302 9.46952 1.32233 10.091 1.99162C10.7076 2.65557 11 3.57896 11 4.63325V5.99999H12C12.5523 5.99999 13 6.44771 13 6.99999V13C13 13.5523 12.5523 14 12 14H3C2.44772 14 2 13.5523 2 13V6.99999C2 6.44771 2.44772 5.99999 3 5.99999H4ZM3 6.99999H12V13H3V6.99999Z\",\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\"\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M9 3.63601C9 2.76044 9.24207 2.11211 9.64154 1.68623C10.0366 1.26502 10.6432 1 11.5014 1C12.4485 1 13.0839 1.30552 13.4722 1.80636C13.8031 2.23312 14 2.84313 14 3.63325H15C15 2.68242 14.7626 1.83856 14.2625 1.19361C13.6389 0.38943 12.6743 0 11.5014 0C10.4294 0 9.53523 0.337871 8.91218 1.0021C8.29351 1.66167 8 2.58135 8 3.63601V6H1C0.447715 6 0 6.44772 0 7V13C0 13.5523 0.447715 14 1 14H10C10.5523 14 11 13.5523 11 13V7C11 6.44772 10.5523 6 10 6H9V3.63601ZM1 7H10V13H1V7Z\",\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\"\n    }));\n}\nfunction Vector({ value, onUpdate, settings, innerLabelTrim }) {\n    const { id, setSettings } = useInputContext();\n    const { lock, locked } = settings;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, {\n        withLock: lock\n    }, lock && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Lock, {\n        locked: locked,\n        onClick: ()=>setSettings({\n                locked: !locked\n            })\n    }), Object.keys(value).map((key, i)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Coordinate, {\n            id: i === 0 ? id : `${id}.${key}`,\n            key: key,\n            valueKey: key,\n            value: value,\n            settings: settings[key],\n            onUpdate: onUpdate,\n            innerLabelTrim: innerLabelTrim\n        })));\n}\nconst normalizeKeyedNumberSettings = (value, settings)=>{\n    const _settings = {};\n    let maxStep = 0;\n    let minPad = Infinity;\n    Object.entries(value).forEach(([key, v])=>{\n        _settings[key] = normalize$2(_objectSpread2({\n            value: v\n        }, settings[key])).settings;\n        maxStep = Math.max(maxStep, _settings[key].step);\n        minPad = Math.min(minPad, _settings[key].pad);\n    });\n    for(let key in _settings){\n        const { step, min, max } = settings[key] || {};\n        if (!isFinite(step) && (!isFinite(min) || !isFinite(max))) {\n            _settings[key].step = maxStep;\n            _settings[key].pad = minPad;\n        }\n    }\n    return _settings;\n};\nconst _excluded = [\n    \"lock\"\n], _excluded2 = [\n    \"value\"\n];\nfunction getVectorSchema(dimension) {\n    const isVectorArray = (0,v8n__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().array().length(dimension).every.number();\n    const isVectorObject = (o)=>{\n        if (!o || typeof o !== \"object\") return false;\n        const values = Object.values(o);\n        return values.length === dimension && values.every((v)=>isFinite(v));\n    };\n    return (o)=>{\n        return isVectorArray.test(o) || isVectorObject(o);\n    };\n}\nfunction getVectorType(value) {\n    return Array.isArray(value) ? \"array\" : \"object\";\n}\nfunction convert(value, format, keys) {\n    if (getVectorType(value) === format) return value;\n    return format === \"array\" ? Object.values(value) : mapArrayToKeys(value, keys);\n}\nconst sanitizeVector = (value, settings, previousValue)=>{\n    const _value = convert(value, \"object\", settings.keys);\n    for(let key in _value)_value[key] = sanitize$3(_value[key], settings[key]);\n    const _valueKeys = Object.keys(_value);\n    let newValue = {};\n    if (_valueKeys.length === settings.keys.length) newValue = _value;\n    else {\n        const _previousValue = convert(previousValue, \"object\", settings.keys);\n        if (_valueKeys.length === 1 && settings.locked) {\n            const lockedKey = _valueKeys[0];\n            const lockedCoordinate = _value[lockedKey];\n            const previousLockedCoordinate = _previousValue[lockedKey];\n            const ratio = previousLockedCoordinate !== 0 ? lockedCoordinate / previousLockedCoordinate : 1;\n            for(let key in _previousValue){\n                if (key === lockedKey) newValue[lockedKey] = lockedCoordinate;\n                else newValue[key] = _previousValue[key] * ratio;\n            }\n        } else {\n            newValue = _objectSpread2(_objectSpread2({}, _previousValue), _value);\n        }\n    }\n    return convert(newValue, settings.format, settings.keys);\n};\nconst formatVector = (value, settings)=>convert(value, \"object\", settings.keys);\nconst isNumberSettings = (o)=>!!o && (\"step\" in o || \"min\" in o || \"max\" in o);\nfunction normalizeVector(value, settings, defaultKeys = []) {\n    const { lock = false } = settings, _settings = _objectWithoutProperties(settings, _excluded);\n    const format = Array.isArray(value) ? \"array\" : \"object\";\n    const keys = format === \"object\" ? Object.keys(value) : defaultKeys;\n    const _value = convert(value, \"object\", keys);\n    const mergedSettings = isNumberSettings(_settings) ? keys.reduce((acc, k)=>Object.assign(acc, {\n            [k]: _settings\n        }), {}) : _settings;\n    const numberSettings = normalizeKeyedNumberSettings(_value, mergedSettings);\n    return {\n        value: format === \"array\" ? value : _value,\n        settings: _objectSpread2(_objectSpread2({}, numberSettings), {}, {\n            format,\n            keys,\n            lock,\n            locked: false\n        })\n    };\n}\nfunction getVectorPlugin(defaultKeys) {\n    return {\n        schema: getVectorSchema(defaultKeys.length),\n        normalize: (_ref)=>{\n            let { value } = _ref, settings = _objectWithoutProperties(_ref, _excluded2);\n            return normalizeVector(value, settings, defaultKeys);\n        },\n        format: (value, settings)=>formatVector(value, settings),\n        sanitize: (value, settings, prevValue)=>sanitizeVector(value, settings, prevValue)\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGV2YS9kaXN0L3ZlY3Rvci1wbHVnaW4tYTRhZTdlNzYuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFtRztBQUN2RDtBQUNQO0FBQ0M7QUFDaEI7QUFDMkI7QUFDUztBQUNGO0FBQ1I7QUFFaEQsU0FBU2dCLDhCQUE4QkMsTUFBTSxFQUFFQyxRQUFRO0lBQ3JELElBQUlELFVBQVUsTUFBTSxPQUFPLENBQUM7SUFDNUIsSUFBSUUsU0FBUyxDQUFDO0lBQ2QsSUFBSUMsYUFBYUMsT0FBT0MsSUFBSSxDQUFDTDtJQUM3QixJQUFJTSxLQUFLQztJQUNULElBQUtBLElBQUksR0FBR0EsSUFBSUosV0FBV0ssTUFBTSxFQUFFRCxJQUFLO1FBQ3RDRCxNQUFNSCxVQUFVLENBQUNJLEVBQUU7UUFDbkIsSUFBSU4sU0FBU1EsT0FBTyxDQUFDSCxRQUFRLEdBQUc7UUFDaENKLE1BQU0sQ0FBQ0ksSUFBSSxHQUFHTixNQUFNLENBQUNNLElBQUk7SUFDM0I7SUFDQSxPQUFPSjtBQUNUO0FBRUEsU0FBU1EseUJBQXlCVixNQUFNLEVBQUVDLFFBQVE7SUFDaEQsSUFBSUQsVUFBVSxNQUFNLE9BQU8sQ0FBQztJQUM1QixJQUFJRSxTQUFTSCw4QkFBOEJDLFFBQVFDO0lBQ25ELElBQUlLLEtBQUtDO0lBQ1QsSUFBSUgsT0FBT08scUJBQXFCLEVBQUU7UUFDaEMsSUFBSUMsbUJBQW1CUixPQUFPTyxxQkFBcUIsQ0FBQ1g7UUFDcEQsSUFBS08sSUFBSSxHQUFHQSxJQUFJSyxpQkFBaUJKLE1BQU0sRUFBRUQsSUFBSztZQUM1Q0QsTUFBTU0sZ0JBQWdCLENBQUNMLEVBQUU7WUFDekIsSUFBSU4sU0FBU1EsT0FBTyxDQUFDSCxRQUFRLEdBQUc7WUFDaEMsSUFBSSxDQUFDRixPQUFPUyxTQUFTLENBQUND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LE9BQU9zRCxXQUFXLFVBQVV0RCxRQUFRME07UUFDcEM5SyxVQUFVeUMsZUFBZUEsZUFBZSxDQUFDLEdBQUdrakIsaUJBQWlCLENBQUMsR0FBRztZQUMvRGprQjtZQUNBeEU7WUFDQSttQjtZQUNBRixRQUFRO1FBQ1Y7SUFDRjtBQUNGO0FBQ0EsU0FBUzZCLGdCQUFnQkgsV0FBVztJQUNsQyxPQUFPO1FBQ0xwbEIsUUFBUW1rQixnQkFBZ0JpQixZQUFZcG9CLE1BQU07UUFDMUM4RCxXQUFXcEIsQ0FBQUE7WUFDVCxJQUFJLEVBQ0EzQixLQUFLLEVBQ04sR0FBRzJCLE1BQ0pDLFdBQVd6Qyx5QkFBeUJ3QyxNQUFNd2tCO1lBQzVDLE9BQU9pQixnQkFBZ0JwbkIsT0FBTzRCLFVBQVV5bEI7UUFDMUM7UUFDQS9qQixRQUFRLENBQUN0RCxPQUFPNEIsV0FBYXNsQixhQUFhbG5CLE9BQU80QjtRQUNqRHdCLFVBQVUsQ0FBQ3BELE9BQU80QixVQUFVc0IsWUFBY3lqQixlQUFlM21CLE9BQU80QixVQUFVc0I7SUFDNUU7QUFDRjtBQUVpekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvbGV2YS9kaXN0L3ZlY3Rvci1wbHVnaW4tYTRhZTdlNzYuZXNtLmpzP2UwMjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBQIGZyb20gJ0ByYWRpeC11aS9yZWFjdC1wb3J0YWwnO1xuaW1wb3J0IHsgZGVxdWFsIH0gZnJvbSAnZGVxdWFsL2xpdGUnO1xuaW1wb3J0IHNoYWxsb3cgZnJvbSAnenVzdGFuZC9zaGFsbG93JztcbmltcG9ydCB2OG4gZnJvbSAndjhuJztcbmltcG9ydCB7IGNyZWF0ZVN0aXRjaGVzIH0gZnJvbSAnQHN0aXRjaGVzL3JlYWN0JztcbmltcG9ydCB7IHVzZURyYWcgYXMgdXNlRHJhZyQxIH0gZnJvbSAnQHVzZS1nZXN0dXJlL3JlYWN0JztcbmltcG9ydCAqIGFzIFJhZGl4VG9vbHRpcCBmcm9tICdAcmFkaXgtdWkvcmVhY3QtdG9vbHRpcCc7XG5pbXBvcnQgeyBBcnJvdyB9IGZyb20gJ0ByYWRpeC11aS9yZWFjdC10b29sdGlwJztcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubGV0IExldmFFcnJvcnM7XG4oZnVuY3Rpb24gKExldmFFcnJvcnMpIHtcbiAgTGV2YUVycm9yc1tMZXZhRXJyb3JzW1wiVU5TVVBQT1JURURfSU5QVVRcIl0gPSAwXSA9IFwiVU5TVVBQT1JURURfSU5QVVRcIjtcbiAgTGV2YUVycm9yc1tMZXZhRXJyb3JzW1wiTk9fQ09NUE9ORU5UX0ZPUl9UWVBFXCJdID0gMV0gPSBcIk5PX0NPTVBPTkVOVF9GT1JfVFlQRVwiO1xuICBMZXZhRXJyb3JzW0xldmFFcnJvcnNbXCJVTktOT1dOX0lOUFVUXCJdID0gMl0gPSBcIlVOS05PV05fSU5QVVRcIjtcbiAgTGV2YUVycm9yc1tMZXZhRXJyb3JzW1wiRFVQTElDQVRFX0tFWVNcIl0gPSAzXSA9IFwiRFVQTElDQVRFX0tFWVNcIjtcbiAgTGV2YUVycm9yc1tMZXZhRXJyb3JzW1wiQUxSRUFEWV9SRUdJU1RFUkVEX1RZUEVcIl0gPSA0XSA9IFwiQUxSRUFEWV9SRUdJU1RFUkVEX1RZUEVcIjtcbiAgTGV2YUVycm9yc1tMZXZhRXJyb3JzW1wiQ0xJUEJPQVJEX0VSUk9SXCJdID0gNV0gPSBcIkNMSVBCT0FSRF9FUlJPUlwiO1xuICBMZXZhRXJyb3JzW0xldmFFcnJvcnNbXCJUSEVNRV9FUlJPUlwiXSA9IDZdID0gXCJUSEVNRV9FUlJPUlwiO1xuICBMZXZhRXJyb3JzW0xldmFFcnJvcnNbXCJQQVRIX0RPRVNOVF9FWElTVFwiXSA9IDddID0gXCJQQVRIX0RPRVNOVF9FWElTVFwiO1xuICBMZXZhRXJyb3JzW0xldmFFcnJvcnNbXCJJTlBVVF9UWVBFX09WRVJSSURFXCJdID0gOF0gPSBcIklOUFVUX1RZUEVfT1ZFUlJJREVcIjtcbiAgTGV2YUVycm9yc1tMZXZhRXJyb3JzW1wiRU1QVFlfS0VZXCJdID0gOV0gPSBcIkVNUFRZX0tFWVwiO1xufSkoTGV2YUVycm9ycyB8fCAoTGV2YUVycm9ycyA9IHt9KSk7XG5jb25zdCBFcnJvckxpc3QgPSB7XG4gIFtMZXZhRXJyb3JzLlVOU1VQUE9SVEVEX0lOUFVUXTogKHR5cGUsIHBhdGgpID0+IFtgQW4gaW5wdXQgd2l0aCB0eXBlIFxcYCR7dHlwZX1cXGAgaW5wdXQgd2FzIGZvdW5kIGF0IHBhdGggXFxgJHtwYXRofVxcYCBidXQgaXQncyBub3Qgc3VwcG9ydGVkIHlldC5gXSxcbiAgW0xldmFFcnJvcnMuTk9fQ09NUE9ORU5UX0ZPUl9UWVBFXTogKHR5cGUsIHBhdGgpID0+IFtgVHlwZSBcXGAke3R5cGV9XFxgIGZvdW5kIGF0IHBhdGggXFxgJHtwYXRofVxcYCBjYW4ndCBiZSBkaXNwbGF5ZWQgaW4gcGFuZWwgYmVjYXVzZSBubyBjb21wb25lbnQgc3VwcG9ydHMgaXQgeWV0LmBdLFxuICBbTGV2YUVycm9ycy5VTktOT1dOX0lOUFVUXTogKHBhdGgsIHZhbHVlKSA9PiBbYGlucHV0IGF0IHBhdGggXFxgJHtwYXRofVxcYCBpcyBub3QgcmVjb2duaXplZC5gLCB2YWx1ZV0sXG4gIFtMZXZhRXJyb3JzLkRVUExJQ0FURV9LRVlTXTogKGtleSwgcGF0aCwgcHJldlBhdGgpID0+IFtgS2V5IFxcYCR7a2V5fVxcYCBvZiBwYXRoIFxcYCR7cGF0aH1cXGAgYWxyZWFkeSBleGlzdHMgYXQgcGF0aCBcXGAke3ByZXZQYXRofVxcYC4gRXZlbiBuZXN0ZWQga2V5cyBuZWVkIHRvIGJlIHVuaXF1ZS4gUmVuYW1lIG9uZSBvZiB0aGUga2V5cy5gXSxcbiAgW0xldmFFcnJvcnMuQUxSRUFEWV9SRUdJU1RFUkVEX1RZUEVdOiB0eXBlID0+IFtgVHlwZSAke3R5cGV9IGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZC4gWW91IGNhbid0IHJlZ2lzdGVyIGEgY29tcG9uZW50IHdpdGggdGhlIHNhbWUgdHlwZS5gXSxcbiAgW0xldmFFcnJvcnMuQ0xJUEJPQVJEX0VSUk9SXTogdmFsdWUgPT4gW2BFcnJvciBjb3B5aW5nIHRoZSB2YWx1ZWAsIHZhbHVlXSxcbiAgW0xldmFFcnJvcnMuVEhFTUVfRVJST1JdOiAoY2F0ZWdvcnksIGtleSkgPT4gW2BFcnJvciBhY2Nlc3NpbmcgdGhlIHRoZW1lIFxcYCR7Y2F0ZWdvcnl9LiR7a2V5fVxcYCB2YWx1ZS5gXSxcbiAgW0xldmFFcnJvcnMuUEFUSF9ET0VTTlRfRVhJU1RdOiBwYXRoID0+IFtgRXJyb3IgZ2V0dGluZyB0aGUgdmFsdWUgYXQgcGF0aCBcXGAke3BhdGh9XFxgLiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIFxcYHJlbmRlclxcYCBmdW5jdGlvbi5gXSxcbiAgW0xldmFFcnJvcnMuUEFUSF9ET0VTTlRfRVhJU1RdOiBwYXRoID0+IFtgRXJyb3IgYWNjZXNzaW5nIHRoZSB2YWx1ZSBhdCBwYXRoIFxcYCR7cGF0aH1cXGBgXSxcbiAgW0xldmFFcnJvcnMuSU5QVVRfVFlQRV9PVkVSUklERV06IChwYXRoLCB0eXBlLCB3cm9uZ1R5cGUpID0+IFtgSW5wdXQgYXQgcGF0aCBcXGAke3BhdGh9XFxgIGFscmVhZHkgZXhpc3RzIHdpdGggdHlwZTogXFxgJHt0eXBlfVxcYC4gSXRzIHR5cGUgY2Fubm90IGJlIG92ZXJyaWRkZW4gd2l0aCB0eXBlIFxcYCR7d3JvbmdUeXBlfVxcYC5gXSxcbiAgW0xldmFFcnJvcnMuRU1QVFlfS0VZXTogKCkgPT4gWydLZXlzIGNhbiBub3QgYmUgZW1wdHksIGlmIHlvdSB3YW50IHRvIGhpZGUgYSBsYWJlbCB1c2Ugd2hpdGVzcGFjZS4nXVxufTtcbmZ1bmN0aW9uIF9sb2coZm4sIGVycm9yVHlwZSwgLi4uYXJncykge1xuICBjb25zdCBbbWVzc2FnZSwgLi4ucmVzdF0gPSBFcnJvckxpc3RbZXJyb3JUeXBlXSguLi5hcmdzKTtcbiAgY29uc29sZVtmbl0oJ0xFVkE6ICcgKyBtZXNzYWdlLCAuLi5yZXN0KTtcbn1cblxuY29uc3Qgd2FybiA9IF9sb2cuYmluZChudWxsLCAnd2FybicpO1xuY29uc3QgbG9nID0gX2xvZy5iaW5kKG51bGwsICdsb2cnKTtcblxuY29uc3QgX2V4Y2x1ZGVkJGEgPSBbXCJ2YWx1ZVwiXSxcbiAgX2V4Y2x1ZGVkMiQ0ID0gW1wic2NoZW1hXCJdLFxuICBfZXhjbHVkZWQzJDEgPSBbXCJ2YWx1ZVwiXTtcbmNvbnN0IFNjaGVtYXMgPSBbXTtcbmNvbnN0IFBsdWdpbnMgPSB7fTtcbmZ1bmN0aW9uIGdldFZhbHVlVHlwZShfcmVmKSB7XG4gIGxldCB7XG4gICAgICB2YWx1ZVxuICAgIH0gPSBfcmVmLFxuICAgIHNldHRpbmdzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCRhKTtcbiAgZm9yIChsZXQgY2hlY2tlciBvZiBTY2hlbWFzKSB7XG4gICAgY29uc3QgdHlwZSA9IGNoZWNrZXIodmFsdWUsIHNldHRpbmdzKTtcbiAgICBpZiAodHlwZSkgcmV0dXJuIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXIodHlwZSwgX3JlZjIpIHtcbiAgbGV0IHtcbiAgICAgIHNjaGVtYVxuICAgIH0gPSBfcmVmMixcbiAgICBwbHVnaW4gPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIF9leGNsdWRlZDIkNCk7XG4gIGlmICh0eXBlIGluIFBsdWdpbnMpIHtcbiAgICB3YXJuKExldmFFcnJvcnMuQUxSRUFEWV9SRUdJU1RFUkVEX1RZUEUsIHR5cGUpO1xuICAgIHJldHVybjtcbiAgfVxuICBTY2hlbWFzLnB1c2goKHZhbHVlLCBzZXR0aW5ncykgPT4gc2NoZW1hKHZhbHVlLCBzZXR0aW5ncykgJiYgdHlwZSk7XG4gIFBsdWdpbnNbdHlwZV0gPSBwbHVnaW47XG59XG5jb25zdCBnZXRVbmlxdWVUeXBlID0gKCkgPT4gJ19fQ1VTVE9NX19QTFVHSU5fXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUludGVybmFsUGx1Z2luKHBsdWdpbikge1xuICByZXR1cm4gcGx1Z2luO1xufVxuZnVuY3Rpb24gY3JlYXRlUGx1Z2luKHBsdWdpbikge1xuICBjb25zdCB0eXBlID0gZ2V0VW5pcXVlVHlwZSgpO1xuICBQbHVnaW5zW3R5cGVdID0gcGx1Z2luO1xuICByZXR1cm4gaW5wdXQgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlLFxuICAgICAgX19jdXN0b21JbnB1dDogaW5wdXRcbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplJDModHlwZSwgaW5wdXQsIHBhdGgsIGRhdGEpIHtcbiAgY29uc3Qge1xuICAgIG5vcm1hbGl6ZTogX25vcm1hbGl6ZVxuICB9ID0gUGx1Z2luc1t0eXBlXTtcbiAgaWYgKF9ub3JtYWxpemUpIHJldHVybiBfbm9ybWFsaXplKGlucHV0LCBwYXRoLCBkYXRhKTtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcgfHwgISgndmFsdWUnIGluIGlucHV0KSkgcmV0dXJuIHtcbiAgICB2YWx1ZTogaW5wdXRcbiAgfTtcbiAgY29uc3Qge1xuICAgICAgdmFsdWVcbiAgICB9ID0gaW5wdXQsXG4gICAgc2V0dGluZ3MgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoaW5wdXQsIF9leGNsdWRlZDMkMSk7XG4gIHJldHVybiB7XG4gICAgdmFsdWUsXG4gICAgc2V0dGluZ3NcbiAgfTtcbn1cbmZ1bmN0aW9uIHNhbml0aXplJDQodHlwZSwgdmFsdWUsIHNldHRpbmdzLCBwcmV2VmFsdWUsIHBhdGgsIHN0b3JlKSB7XG4gIGNvbnN0IHtcbiAgICBzYW5pdGl6ZVxuICB9ID0gUGx1Z2luc1t0eXBlXTtcbiAgaWYgKHNhbml0aXplKSByZXR1cm4gc2FuaXRpemUodmFsdWUsIHNldHRpbmdzLCBwcmV2VmFsdWUsIHBhdGgsIHN0b3JlKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gZm9ybWF0JDIodHlwZSwgdmFsdWUsIHNldHRpbmdzKSB7XG4gIGNvbnN0IHtcbiAgICBmb3JtYXRcbiAgfSA9IFBsdWdpbnNbdHlwZV07XG4gIGlmIChmb3JtYXQpIHJldHVybiBmb3JtYXQodmFsdWUsIHNldHRpbmdzKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmNvbnN0IGNsYW1wID0gKHgsIG1pbiwgbWF4KSA9PiB4ID4gbWF4ID8gbWF4IDogeCA8IG1pbiA/IG1pbiA6IHg7XG5jb25zdCBwYWQgPSAoeCwgcGFkKSA9PiBTdHJpbmcoeCkucGFkU3RhcnQocGFkLCAnMCcpO1xuY29uc3QgcGFyc2VOdW1iZXIgPSB2ID0+IHtcbiAgaWYgKHYgPT09ICcnIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJykgcmV0dXJuIHY7XG4gIHRyeSB7XG4gICAgY29uc3QgX3YgPSBldmFsdWF0ZSh2KTtcbiAgICBpZiAoIWlzTmFOKF92KSkgcmV0dXJuIF92O1xuICB9IGNhdGNoIChfdW51c2VkKSB7fVxuICByZXR1cm4gcGFyc2VGbG9hdCh2KTtcbn07XG5jb25zdCBsb2cxMCA9IE1hdGgubG9nKDEwKTtcbmZ1bmN0aW9uIGdldFN0ZXAobnVtYmVyKSB7XG4gIGxldCBuID0gTWF0aC5hYnMoK1N0cmluZyhudW1iZXIpLnJlcGxhY2UoJy4nLCAnJykpO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIDAuMDE7XG4gIHdoaWxlIChuICE9PSAwICYmIG4gJSAxMCA9PT0gMCkgbiAvPSAxMDtcbiAgY29uc3Qgc2lnbmlmaWNhbnREaWdpdHMgPSBNYXRoLmZsb29yKE1hdGgubG9nKG4pIC8gbG9nMTApICsgMTtcbiAgY29uc3QgbnVtYmVyTG9nID0gTWF0aC5mbG9vcihNYXRoLmxvZzEwKE1hdGguYWJzKG51bWJlcikpKTtcbiAgY29uc3Qgc3RlcCA9IE1hdGgucG93KDEwLCBudW1iZXJMb2cgLSBzaWduaWZpY2FudERpZ2l0cyk7XG4gIHJldHVybiBNYXRoLm1heChzdGVwLCAwLjAwMSk7XG59XG5jb25zdCByYW5nZSA9ICh2LCBtaW4sIG1heCkgPT4ge1xuICBpZiAobWF4ID09PSBtaW4pIHJldHVybiAwO1xuICBjb25zdCBfdiA9IGNsYW1wKHYsIG1pbiwgbWF4KTtcbiAgcmV0dXJuIChfdiAtIG1pbikgLyAobWF4IC0gbWluKTtcbn07XG5jb25zdCBpbnZlcnRlZFJhbmdlID0gKHAsIG1pbiwgbWF4KSA9PiBwICogKG1heCAtIG1pbikgKyBtaW47XG5cbmNvbnN0IGdldFVpZCA9ICgpID0+ICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbmNvbnN0IHBhcmVucyA9IC9cXCgoWzAtOStcXC0qL14gLl0rKVxcKS87XG5jb25zdCBleHAgPSAvKFxcZCsoPzpcXC5cXGQrKT8pID9cXF4gPyhcXGQrKD86XFwuXFxkKyk/KS87XG5jb25zdCBtdWwgPSAvKFxcZCsoPzpcXC5cXGQrKT8pID9cXCogPyhcXGQrKD86XFwuXFxkKyk/KS87XG5jb25zdCBkaXYgPSAvKFxcZCsoPzpcXC5cXGQrKT8pID9cXC8gPyhcXGQrKD86XFwuXFxkKyk/KS87XG5jb25zdCBhZGQgPSAvKFxcZCsoPzpcXC5cXGQrKT8pID9cXCsgPyhcXGQrKD86XFwuXFxkKyk/KS87XG5jb25zdCBzdWIgPSAvKFxcZCsoPzpcXC5cXGQrKT8pID8tID8oXFxkKyg/OlxcLlxcZCspPykvO1xuXG5mdW5jdGlvbiBldmFsdWF0ZShleHByKSB7XG4gIGlmIChpc05hTihOdW1iZXIoZXhwcikpKSB7XG4gICAgaWYgKHBhcmVucy50ZXN0KGV4cHIpKSB7XG4gICAgICBjb25zdCBuZXdFeHByID0gZXhwci5yZXBsYWNlKHBhcmVucywgKG1hdGNoLCBzdWJFeHByKSA9PiBTdHJpbmcoZXZhbHVhdGUoc3ViRXhwcikpKTtcbiAgICAgIHJldHVybiBldmFsdWF0ZShuZXdFeHByKTtcbiAgICB9IGVsc2UgaWYgKGV4cC50ZXN0KGV4cHIpKSB7XG4gICAgICBjb25zdCBuZXdFeHByID0gZXhwci5yZXBsYWNlKGV4cCwgKG1hdGNoLCBiYXNlLCBwb3cpID0+IFN0cmluZyhNYXRoLnBvdyhOdW1iZXIoYmFzZSksIE51bWJlcihwb3cpKSkpO1xuICAgICAgcmV0dXJuIGV2YWx1YXRlKG5ld0V4cHIpO1xuICAgIH0gZWxzZSBpZiAobXVsLnRlc3QoZXhwcikpIHtcbiAgICAgIGNvbnN0IG5ld0V4cHIgPSBleHByLnJlcGxhY2UobXVsLCAobWF0Y2gsIGEsIGIpID0+IFN0cmluZyhOdW1iZXIoYSkgKiBOdW1iZXIoYikpKTtcbiAgICAgIHJldHVybiBldmFsdWF0ZShuZXdFeHByKTtcbiAgICB9IGVsc2UgaWYgKGRpdi50ZXN0KGV4cHIpKSB7XG4gICAgICBjb25zdCBuZXdFeHByID0gZXhwci5yZXBsYWNlKGRpdiwgKG1hdGNoLCBhLCBiKSA9PiB7XG4gICAgICAgIGlmIChiICE9IDApIHJldHVybiBTdHJpbmcoTnVtYmVyKGEpIC8gTnVtYmVyKGIpKTtlbHNlIHRocm93IG5ldyBFcnJvcignRGl2aXNpb24gYnkgemVybycpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZXZhbHVhdGUobmV3RXhwcik7XG4gICAgfSBlbHNlIGlmIChhZGQudGVzdChleHByKSkge1xuICAgICAgY29uc3QgbmV3RXhwciA9IGV4cHIucmVwbGFjZShhZGQsIChtYXRjaCwgYSwgYikgPT4gU3RyaW5nKE51bWJlcihhKSArIE51bWJlcihiKSkpO1xuICAgICAgcmV0dXJuIGV2YWx1YXRlKG5ld0V4cHIpO1xuICAgIH0gZWxzZSBpZiAoc3ViLnRlc3QoZXhwcikpIHtcbiAgICAgIGNvbnN0IG5ld0V4cHIgPSBleHByLnJlcGxhY2Uoc3ViLCAobWF0Y2gsIGEsIGIpID0+IFN0cmluZyhOdW1iZXIoYSkgLSBOdW1iZXIoYikpKTtcbiAgICAgIHJldHVybiBldmFsdWF0ZShuZXdFeHByKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE51bWJlcihleHByKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIE51bWJlcihleHByKTtcbn1cblxuZnVuY3Rpb24gcGljayhvYmplY3QsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICAgIGlmICghIW9iamVjdCAmJiBvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgb2JqW2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSwge30pO1xufVxuZnVuY3Rpb24gb21pdChvYmplY3QsIGtleXMpIHtcbiAgY29uc3Qgb2JqID0gX29iamVjdFNwcmVhZDIoe30sIG9iamVjdCk7XG4gIGtleXMuZm9yRWFjaChrID0+IGsgaW4gb2JqZWN0ICYmIGRlbGV0ZSBvYmpba10pO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gbWFwQXJyYXlUb0tleXModmFsdWUsIGtleXMpIHtcbiAgcmV0dXJuIHZhbHVlLnJlZHVjZSgoYWNjLCB2LCBpKSA9PiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgIFtrZXlzW2ldXTogdlxuICB9KSwge30pO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFyaWFibGUpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YXJpYWJsZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuY29uc3QgaXNFbXB0eU9iamVjdCA9IG9iaiA9PiBpc09iamVjdChvYmopICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xuXG5sZXQgU3BlY2lhbElucHV0cztcbihmdW5jdGlvbiAoU3BlY2lhbElucHV0cykge1xuICBTcGVjaWFsSW5wdXRzW1wiQlVUVE9OXCJdID0gXCJCVVRUT05cIjtcbiAgU3BlY2lhbElucHV0c1tcIkJVVFRPTl9HUk9VUFwiXSA9IFwiQlVUVE9OX0dST1VQXCI7XG4gIFNwZWNpYWxJbnB1dHNbXCJNT05JVE9SXCJdID0gXCJNT05JVE9SXCI7XG4gIFNwZWNpYWxJbnB1dHNbXCJGT0xERVJcIl0gPSBcIkZPTERFUlwiO1xufSkoU3BlY2lhbElucHV0cyB8fCAoU3BlY2lhbElucHV0cyA9IHt9KSk7XG5sZXQgTGV2YUlucHV0cztcbihmdW5jdGlvbiAoTGV2YUlucHV0cykge1xuICBMZXZhSW5wdXRzW1wiU0VMRUNUXCJdID0gXCJTRUxFQ1RcIjtcbiAgTGV2YUlucHV0c1tcIklNQUdFXCJdID0gXCJJTUFHRVwiO1xuICBMZXZhSW5wdXRzW1wiTlVNQkVSXCJdID0gXCJOVU1CRVJcIjtcbiAgTGV2YUlucHV0c1tcIkNPTE9SXCJdID0gXCJDT0xPUlwiO1xuICBMZXZhSW5wdXRzW1wiU1RSSU5HXCJdID0gXCJTVFJJTkdcIjtcbiAgTGV2YUlucHV0c1tcIkJPT0xFQU5cIl0gPSBcIkJPT0xFQU5cIjtcbiAgTGV2YUlucHV0c1tcIklOVEVSVkFMXCJdID0gXCJJTlRFUlZBTFwiO1xuICBMZXZhSW5wdXRzW1wiVkVDVE9SM0RcIl0gPSBcIlZFQ1RPUjNEXCI7XG4gIExldmFJbnB1dHNbXCJWRUNUT1IyRFwiXSA9IFwiVkVDVE9SMkRcIjtcbn0pKExldmFJbnB1dHMgfHwgKExldmFJbnB1dHMgPSB7fSkpO1xuXG5jb25zdCBfZXhjbHVkZWQkOSA9IFtcInR5cGVcIiwgXCJfX2N1c3RvbUlucHV0XCJdLFxuICBfZXhjbHVkZWQyJDMgPSBbXCJyZW5kZXJcIiwgXCJsYWJlbFwiLCBcIm9wdGlvbmFsXCIsIFwib3JkZXJcIiwgXCJkaXNhYmxlZFwiLCBcImhpbnRcIiwgXCJvbkNoYW5nZVwiLCBcIm9uRWRpdFN0YXJ0XCIsIFwib25FZGl0RW5kXCIsIFwidHJhbnNpZW50XCJdLFxuICBfZXhjbHVkZWQzID0gW1widHlwZVwiXTtcbmZ1bmN0aW9uIHBhcnNlT3B0aW9ucyhfaW5wdXQsIGtleSwgbWVyZ2VkT3B0aW9ucyA9IHt9LCBjdXN0b21UeXBlKSB7XG4gIHZhciBfY29tbW9uT3B0aW9ucyRvcHRpb24sIF9jb21tb25PcHRpb25zJGRpc2FibDtcbiAgaWYgKHR5cGVvZiBfaW5wdXQgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoX2lucHV0KSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBjdXN0b21UeXBlLFxuICAgICAgaW5wdXQ6IF9pbnB1dCxcbiAgICAgIG9wdGlvbnM6IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAga2V5LFxuICAgICAgICBsYWJlbDoga2V5LFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgb3JkZXI6IDBcbiAgICAgIH0sIG1lcmdlZE9wdGlvbnMpXG4gICAgfTtcbiAgfVxuXG4gIGlmICgnX19jdXN0b21JbnB1dCcgaW4gX2lucHV0KSB7XG4gICAgY29uc3Qge1xuICAgICAgICB0eXBlOiBfdHlwZSxcbiAgICAgICAgX19jdXN0b21JbnB1dFxuICAgICAgfSA9IF9pbnB1dCxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX2lucHV0LCBfZXhjbHVkZWQkOSk7XG4gICAgcmV0dXJuIHBhcnNlT3B0aW9ucyhfX2N1c3RvbUlucHV0LCBrZXksIG9wdGlvbnMsIF90eXBlKTtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICAgIHJlbmRlcixcbiAgICAgIGxhYmVsLFxuICAgICAgb3B0aW9uYWwsXG4gICAgICBvcmRlciA9IDAsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGhpbnQsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9uRWRpdFN0YXJ0LFxuICAgICAgb25FZGl0RW5kLFxuICAgICAgdHJhbnNpZW50XG4gICAgfSA9IF9pbnB1dCxcbiAgICBpbnB1dFdpdGhUeXBlID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9pbnB1dCwgX2V4Y2x1ZGVkMiQzKTtcbiAgY29uc3QgY29tbW9uT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgICByZW5kZXIsXG4gICAga2V5LFxuICAgIGxhYmVsOiBsYWJlbCAhPT0gbnVsbCAmJiBsYWJlbCAhPT0gdm9pZCAwID8gbGFiZWwgOiBrZXksXG4gICAgaGludCxcbiAgICB0cmFuc2llbnQ6IHRyYW5zaWVudCAhPT0gbnVsbCAmJiB0cmFuc2llbnQgIT09IHZvaWQgMCA/IHRyYW5zaWVudCA6ICEhb25DaGFuZ2UsXG4gICAgb25FZGl0U3RhcnQsXG4gICAgb25FZGl0RW5kLFxuICAgIGRpc2FibGVkLFxuICAgIG9wdGlvbmFsLFxuICAgIG9yZGVyXG4gIH0sIG1lcmdlZE9wdGlvbnMpO1xuICBsZXQge1xuICAgICAgdHlwZVxuICAgIH0gPSBpbnB1dFdpdGhUeXBlLFxuICAgIGlucHV0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGlucHV0V2l0aFR5cGUsIF9leGNsdWRlZDMpO1xuICB0eXBlID0gY3VzdG9tVHlwZSAhPT0gbnVsbCAmJiBjdXN0b21UeXBlICE9PSB2b2lkIDAgPyBjdXN0b21UeXBlIDogdHlwZTtcbiAgaWYgKHR5cGUgaW4gU3BlY2lhbElucHV0cykge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlLFxuICAgICAgaW5wdXQsXG4gICAgICBvcHRpb25zOiBjb21tb25PcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIGxldCBjb21wdXRlZElucHV0O1xuICBpZiAoY3VzdG9tVHlwZSAmJiBpc09iamVjdChpbnB1dCkgJiYgJ3ZhbHVlJyBpbiBpbnB1dCkgY29tcHV0ZWRJbnB1dCA9IGlucHV0LnZhbHVlO2Vsc2UgY29tcHV0ZWRJbnB1dCA9IGlzRW1wdHlPYmplY3QoaW5wdXQpID8gdW5kZWZpbmVkIDogaW5wdXQ7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICBpbnB1dDogY29tcHV0ZWRJbnB1dCxcbiAgICBvcHRpb25zOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY29tbW9uT3B0aW9ucyksIHt9LCB7XG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9wdGlvbmFsOiAoX2NvbW1vbk9wdGlvbnMkb3B0aW9uID0gY29tbW9uT3B0aW9ucy5vcHRpb25hbCkgIT09IG51bGwgJiYgX2NvbW1vbk9wdGlvbnMkb3B0aW9uICE9PSB2b2lkIDAgPyBfY29tbW9uT3B0aW9ucyRvcHRpb24gOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkOiAoX2NvbW1vbk9wdGlvbnMkZGlzYWJsID0gY29tbW9uT3B0aW9ucy5kaXNhYmxlZCkgIT09IG51bGwgJiYgX2NvbW1vbk9wdGlvbnMkZGlzYWJsICE9PSB2b2lkIDAgPyBfY29tbW9uT3B0aW9ucyRkaXNhYmwgOiBmYWxzZVxuICAgIH0pXG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUlucHV0KF9pbnB1dCwga2V5LCBwYXRoLCBkYXRhKSB7XG4gIGNvbnN0IHBhcnNlZElucHV0QW5kT3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhfaW5wdXQsIGtleSk7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGlucHV0OiBwYXJzZWRJbnB1dCxcbiAgICBvcHRpb25zXG4gIH0gPSBwYXJzZWRJbnB1dEFuZE9wdGlvbnM7XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKHR5cGUgaW4gU3BlY2lhbElucHV0cylcbiAgICAgIHJldHVybiBwYXJzZWRJbnB1dEFuZE9wdGlvbnM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZSxcbiAgICAgIGlucHV0OiBub3JtYWxpemUkMyh0eXBlLCBwYXJzZWRJbnB1dCwgcGF0aCwgZGF0YSksXG4gICAgICBvcHRpb25zXG4gICAgfTtcbiAgfVxuICBsZXQgaW5wdXRUeXBlID0gZ2V0VmFsdWVUeXBlKHBhcnNlZElucHV0KTtcbiAgaWYgKGlucHV0VHlwZSkgcmV0dXJuIHtcbiAgICB0eXBlOiBpbnB1dFR5cGUsXG4gICAgaW5wdXQ6IG5vcm1hbGl6ZSQzKGlucHV0VHlwZSwgcGFyc2VkSW5wdXQsIHBhdGgsIGRhdGEpLFxuICAgIG9wdGlvbnNcbiAgfTtcbiAgaW5wdXRUeXBlID0gZ2V0VmFsdWVUeXBlKHtcbiAgICB2YWx1ZTogcGFyc2VkSW5wdXRcbiAgfSk7XG4gIGlmIChpbnB1dFR5cGUpIHJldHVybiB7XG4gICAgdHlwZTogaW5wdXRUeXBlLFxuICAgIGlucHV0OiBub3JtYWxpemUkMyhpbnB1dFR5cGUsIHtcbiAgICAgIHZhbHVlOiBwYXJzZWRJbnB1dFxuICAgIH0sIHBhdGgsIGRhdGEpLFxuICAgIG9wdGlvbnNcbiAgfTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiB1cGRhdGVJbnB1dChpbnB1dCwgbmV3VmFsdWUsIHBhdGgsIHN0b3JlLCBmcm9tUGFuZWwpIHtcbiAgY29uc3Qge1xuICAgIHZhbHVlLFxuICAgIHR5cGUsXG4gICAgc2V0dGluZ3NcbiAgfSA9IGlucHV0O1xuICBpbnB1dC52YWx1ZSA9IHNhbml0aXplVmFsdWUoe1xuICAgIHR5cGUsXG4gICAgdmFsdWUsXG4gICAgc2V0dGluZ3NcbiAgfSwgbmV3VmFsdWUsIHBhdGgsIHN0b3JlKTtcbiAgaW5wdXQuZnJvbVBhbmVsID0gZnJvbVBhbmVsO1xufVxuY29uc3QgVmFsdWVFcnJvciA9IGZ1bmN0aW9uIFZhbHVlRXJyb3IobWVzc2FnZSwgdmFsdWUsIGVycm9yKSB7XG4gIHRoaXMudHlwZSA9ICdMRVZBX0VSUk9SJztcbiAgdGhpcy5tZXNzYWdlID0gJ0xFVkE6ICcgKyBtZXNzYWdlO1xuICB0aGlzLnByZXZpb3VzVmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5lcnJvciA9IGVycm9yO1xufTtcbmZ1bmN0aW9uIHNhbml0aXplVmFsdWUoe1xuICB0eXBlLFxuICB2YWx1ZSxcbiAgc2V0dGluZ3Ncbn0sIG5ld1ZhbHVlLCBwYXRoLCBzdG9yZSkge1xuICBjb25zdCBfbmV3VmFsdWUgPSB0eXBlICE9PSAnU0VMRUNUJyAmJiB0eXBlb2YgbmV3VmFsdWUgPT09ICdmdW5jdGlvbicgPyBuZXdWYWx1ZSh2YWx1ZSkgOiBuZXdWYWx1ZTtcbiAgbGV0IHNhbml0aXplZE5ld1ZhbHVlO1xuICB0cnkge1xuICAgIHNhbml0aXplZE5ld1ZhbHVlID0gc2FuaXRpemUkNCh0eXBlLCBfbmV3VmFsdWUsIHNldHRpbmdzLCB2YWx1ZSwgcGF0aCwgc3RvcmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IoYFRoZSB2YWx1ZSBcXGAke25ld1ZhbHVlfVxcYCBkaWQgbm90IHJlc3VsdCBpbiBhIGNvcnJlY3QgdmFsdWUuYCwgdmFsdWUsIGUpO1xuICB9XG4gIGlmIChkZXF1YWwoc2FuaXRpemVkTmV3VmFsdWUsIHZhbHVlKSkge1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuXG4gIH1cblxuICByZXR1cm4gc2FuaXRpemVkTmV3VmFsdWU7XG59XG5cbmNvbnN0IGRlYm91bmNlID0gKGNhbGxiYWNrLCB3YWl0LCBpbW1lZGlhdGUgPSBmYWxzZSkgPT4ge1xuICBsZXQgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcbiAgICBjb25zdCBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgIGNvbnN0IG5leHQgPSAoKSA9PiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChuZXh0LCB3YWl0KTtcbiAgICBpZiAoY2FsbE5vdykgbmV4dCgpO1xuICB9O1xufTtcblxuY29uc3QgbXVsdGlwbHlTdGVwID0gZXZlbnQgPT4gZXZlbnQuc2hpZnRLZXkgPyA1IDogZXZlbnQuYWx0S2V5ID8gMSAvIDUgOiAxO1xuXG5jb25zdCBfZXhjbHVkZWQkOCA9IFtcInZhbHVlXCJdLFxuICBfZXhjbHVkZWQyJDIgPSBbXCJtaW5cIiwgXCJtYXhcIl07XG5jb25zdCBzY2hlbWEkMyA9IHYgPT4ge1xuICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IF92ID0gcGFyc2VGbG9hdCh2KTtcbiAgICBpZiAoaXNOYU4oX3YpKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qgc3VmZml4ID0gdi5zdWJzdHJpbmcoKCcnICsgX3YpLmxlbmd0aCkudHJpbSgpO1xuICAgIHJldHVybiBzdWZmaXgubGVuZ3RoIDwgNDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3Qgc2FuaXRpemUkMyA9ICh2LCB7XG4gIG1pbjogX21pbiA9IC1JbmZpbml0eSxcbiAgbWF4OiBfbWF4ID0gSW5maW5pdHksXG4gIHN1ZmZpeFxufSkgPT4ge1xuICBjb25zdCBfdiA9IHBhcnNlRmxvYXQodik7XG4gIGlmICh2ID09PSAnJyB8fCBpc05hTihfdikpIHRocm93IEVycm9yKCdJbnZhbGlkIG51bWJlcicpO1xuICBjb25zdCBmID0gY2xhbXAoX3YsIF9taW4sIF9tYXgpO1xuICByZXR1cm4gc3VmZml4ID8gZiArIHN1ZmZpeCA6IGY7XG59O1xuY29uc3QgZm9ybWF0JDEgPSAodiwge1xuICBwYWQ6IF9wYWQgPSAwLFxuICBzdWZmaXhcbn0pID0+IHtcbiAgY29uc3QgZiA9IHBhcnNlRmxvYXQodikudG9GaXhlZChfcGFkKTtcbiAgcmV0dXJuIHN1ZmZpeCA/IGYgKyBzdWZmaXggOiBmO1xufTtcbmNvbnN0IG5vcm1hbGl6ZSQyID0gX3JlZiA9PiB7XG4gIGxldCB7XG4gICAgICB2YWx1ZVxuICAgIH0gPSBfcmVmLFxuICAgIHNldHRpbmdzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCQ4KTtcbiAgY29uc3Qge1xuICAgICAgbWluID0gLUluZmluaXR5LFxuICAgICAgbWF4ID0gSW5maW5pdHlcbiAgICB9ID0gc2V0dGluZ3MsXG4gICAgX3NldHRpbmdzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNldHRpbmdzLCBfZXhjbHVkZWQyJDIpO1xuICBsZXQgX3ZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIGNvbnN0IHN1ZmZpeCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZS5zdWJzdHJpbmcoKCcnICsgX3ZhbHVlKS5sZW5ndGgpIDogdW5kZWZpbmVkO1xuICBfdmFsdWUgPSBjbGFtcChfdmFsdWUsIG1pbiwgbWF4KTtcblxuICBsZXQgc3RlcCA9IHNldHRpbmdzLnN0ZXA7XG4gIGlmICghc3RlcCkge1xuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUobWluKSkge1xuICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZShtYXgpKSBzdGVwID0gKyhNYXRoLmFicyhtYXggLSBtaW4pIC8gMTAwKS50b1ByZWNpc2lvbigxKTtlbHNlIHN0ZXAgPSArKE1hdGguYWJzKF92YWx1ZSAtIG1pbikgLyAxMDApLnRvUHJlY2lzaW9uKDEpO1xuICAgIH0gZWxzZSBpZiAoTnVtYmVyLmlzRmluaXRlKG1heCkpIHN0ZXAgPSArKE1hdGguYWJzKG1heCAtIF92YWx1ZSkgLyAxMDApLnRvUHJlY2lzaW9uKDEpO1xuICB9XG4gIGNvbnN0IHBhZFN0ZXAgPSBzdGVwID8gZ2V0U3RlcChzdGVwKSAqIDEwIDogZ2V0U3RlcChfdmFsdWUpO1xuICBzdGVwID0gc3RlcCB8fCBwYWRTdGVwIC8gMTA7XG4gIGNvbnN0IHBhZCA9IE1hdGgucm91bmQoY2xhbXAoTWF0aC5sb2cxMCgxIC8gcGFkU3RlcCksIDAsIDIpKTtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogc3VmZml4ID8gX3ZhbHVlICsgc3VmZml4IDogX3ZhbHVlLFxuICAgIHNldHRpbmdzOiBfb2JqZWN0U3ByZWFkMih7XG4gICAgICBpbml0aWFsVmFsdWU6IF92YWx1ZSxcbiAgICAgIHN0ZXAsXG4gICAgICBwYWQsXG4gICAgICBtaW4sXG4gICAgICBtYXgsXG4gICAgICBzdWZmaXhcbiAgICB9LCBfc2V0dGluZ3MpXG4gIH07XG59O1xuXG5jb25zdCBzYW5pdGl6ZVN0ZXAkMSA9ICh2LCB7XG4gIHN0ZXAsXG4gIGluaXRpYWxWYWx1ZVxufSkgPT4ge1xuICBjb25zdCBzdGVwcyA9IE1hdGgucm91bmQoKHYgLSBpbml0aWFsVmFsdWUpIC8gc3RlcCk7XG4gIHJldHVybiBpbml0aWFsVmFsdWUgKyBzdGVwcyAqIHN0ZXA7XG59O1xuXG52YXIgcHJvcHMkMyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBzY2hlbWE6IHNjaGVtYSQzLFxuICBzYW5pdGl6ZTogc2FuaXRpemUkMyxcbiAgZm9ybWF0OiBmb3JtYXQkMSxcbiAgbm9ybWFsaXplOiBub3JtYWxpemUkMixcbiAgc2FuaXRpemVTdGVwOiBzYW5pdGl6ZVN0ZXAkMVxufSk7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5jb25zdCBJbnB1dENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbmZ1bmN0aW9uIHVzZUlucHV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoSW5wdXRDb250ZXh0KTtcbn1cbmNvbnN0IFRoZW1lQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCk7XG5jb25zdCBTdG9yZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xuY29uc3QgUGFuZWxTZXR0aW5nc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xuZnVuY3Rpb24gdXNlU3RvcmVDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChTdG9yZUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlUGFuZWxTZXR0aW5nc0NvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KFBhbmVsU2V0dGluZ3NDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIExldmFTdG9yZVByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIHN0b3JlXG59KSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0b3JlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdG9yZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmNvbnN0IGdldERlZmF1bHRUaGVtZSA9ICgpID0+ICh7XG4gIGNvbG9yczoge1xuICAgIGVsZXZhdGlvbjE6ICcjMjkyZDM5JyxcbiAgICBlbGV2YXRpb24yOiAnIzE4MWMyMCcsXG4gICAgZWxldmF0aW9uMzogJyMzNzNjNGInLFxuICAgIGFjY2VudDE6ICcjMDA2NmRjJyxcbiAgICBhY2NlbnQyOiAnIzAwN2JmZicsXG4gICAgYWNjZW50MzogJyMzYzkzZmYnLFxuICAgIGhpZ2hsaWdodDE6ICcjNTM1NzYwJyxcbiAgICBoaWdobGlnaHQyOiAnIzhjOTJhNCcsXG4gICAgaGlnaGxpZ2h0MzogJyNmZWZlZmUnLFxuICAgIHZpdmlkMTogJyNmZmNjMDAnLFxuICAgIGZvbGRlcldpZGdldENvbG9yOiAnJGhpZ2hsaWdodDInLFxuICAgIGZvbGRlclRleHRDb2xvcjogJyRoaWdobGlnaHQzJyxcbiAgICB0b29sVGlwQmFja2dyb3VuZDogJyRoaWdobGlnaHQzJyxcbiAgICB0b29sVGlwVGV4dDogJyRlbGV2YXRpb24yJ1xuICB9LFxuICByYWRpaToge1xuICAgIHhzOiAnMnB4JyxcbiAgICBzbTogJzNweCcsXG4gICAgbGc6ICcxMHB4J1xuICB9LFxuICBzcGFjZToge1xuICAgIHhzOiAnM3B4JyxcbiAgICBzbTogJzZweCcsXG4gICAgbWQ6ICcxMHB4JyxcbiAgICByb3dHYXA6ICc3cHgnLFxuICAgIGNvbEdhcDogJzdweCdcbiAgfSxcbiAgZm9udHM6IHtcbiAgICBtb25vOiBgdWktbW9ub3NwYWNlLCBTRk1vbm8tUmVndWxhciwgTWVubG8sICdSb2JvdG8gTW9ubycsIG1vbm9zcGFjZWAsXG4gICAgc2FuczogYHN5c3RlbS11aSwgc2Fucy1zZXJpZmBcbiAgfSxcbiAgZm9udFNpemVzOiB7XG4gICAgcm9vdDogJzExcHgnLFxuICAgIHRvb2xUaXA6ICckcm9vdCdcbiAgfSxcbiAgc2l6ZXM6IHtcbiAgICByb290V2lkdGg6ICcyODBweCcsXG4gICAgY29udHJvbFdpZHRoOiAnMTYwcHgnLFxuICAgIG51bWJlcklucHV0TWluV2lkdGg6ICczOHB4JyxcbiAgICBzY3J1YmJlcldpZHRoOiAnOHB4JyxcbiAgICBzY3J1YmJlckhlaWdodDogJzE2cHgnLFxuICAgIHJvd0hlaWdodDogJzI0cHgnLFxuICAgIGZvbGRlclRpdGxlSGVpZ2h0OiAnMjBweCcsXG4gICAgY2hlY2tib3hTaXplOiAnMTZweCcsXG4gICAgam95c3RpY2tXaWR0aDogJzEwMHB4JyxcbiAgICBqb3lzdGlja0hlaWdodDogJzEwMHB4JyxcbiAgICBjb2xvclBpY2tlcldpZHRoOiAnJGNvbnRyb2xXaWR0aCcsXG4gICAgY29sb3JQaWNrZXJIZWlnaHQ6ICcxMDBweCcsXG4gICAgaW1hZ2VQcmV2aWV3V2lkdGg6ICckY29udHJvbFdpZHRoJyxcbiAgICBpbWFnZVByZXZpZXdIZWlnaHQ6ICcxMDBweCcsXG4gICAgbW9uaXRvckhlaWdodDogJzYwcHgnLFxuICAgIHRpdGxlQmFySGVpZ2h0OiAnMzlweCdcbiAgfSxcbiAgc2hhZG93czoge1xuICAgIGxldmVsMTogJzAgMCA5cHggMCAjMDAwMDAwODgnLFxuICAgIGxldmVsMjogJzAgNHB4IDE0cHggIzAwMDAwMDMzJ1xuICB9LFxuICBib3JkZXJXaWR0aHM6IHtcbiAgICByb290OiAnMHB4JyxcbiAgICBpbnB1dDogJzFweCcsXG4gICAgZm9jdXM6ICcxcHgnLFxuICAgIGhvdmVyOiAnMXB4JyxcbiAgICBhY3RpdmU6ICcxcHgnLFxuICAgIGZvbGRlcjogJzFweCdcbiAgfSxcbiAgZm9udFdlaWdodHM6IHtcbiAgICBsYWJlbDogJ25vcm1hbCcsXG4gICAgZm9sZGVyOiAnbm9ybWFsJyxcbiAgICBidXR0b246ICdub3JtYWwnXG4gIH1cbn0pO1xuZnVuY3Rpb24gY3JlYXRlU3RhdGVDbGFzcyh2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBbYm9yZGVyQ29sb3IsIGJnQ29sb3JdID0gdmFsdWUuc3BsaXQoJyAnKTtcbiAgY29uc3QgY3NzID0ge307XG4gIGlmIChib3JkZXJDb2xvciAhPT0gJ25vbmUnKSB7XG4gICAgY3NzLmJveFNoYWRvdyA9IGAke29wdGlvbnMuaW5zZXQgPyAnaW5zZXQgJyA6ICcnfTAgMCAwICRib3JkZXJXaWR0aHMke1tvcHRpb25zLmtleV19ICRjb2xvcnMke2JvcmRlckNvbG9yICE9PSAnZGVmYXVsdCcgJiYgYm9yZGVyQ29sb3IgfHwgb3B0aW9ucy5ib3JkZXJDb2xvcn1gO1xuICB9XG4gIGlmIChiZ0NvbG9yKSB7XG4gICAgY3NzLmJhY2tncm91bmRDb2xvciA9IGJnQ29sb3I7XG4gIH1cbiAgcmV0dXJuIGNzcztcbn1cbmNvbnN0IHV0aWxzID0ge1xuICAkaW5wdXRTdHlsZTogKCkgPT4gdmFsdWUgPT4gY3JlYXRlU3RhdGVDbGFzcyh2YWx1ZSwge1xuICAgIGtleTogJyRpbnB1dCcsXG4gICAgYm9yZGVyQ29sb3I6ICckaGlnaGxpZ2h0MScsXG4gICAgaW5zZXQ6IHRydWVcbiAgfSksXG4gICRmb2N1c1N0eWxlOiAoKSA9PiB2YWx1ZSA9PiBjcmVhdGVTdGF0ZUNsYXNzKHZhbHVlLCB7XG4gICAga2V5OiAnJGZvY3VzJyxcbiAgICBib3JkZXJDb2xvcjogJyRhY2NlbnQyJ1xuICB9KSxcbiAgJGhvdmVyU3R5bGU6ICgpID0+IHZhbHVlID0+IGNyZWF0ZVN0YXRlQ2xhc3ModmFsdWUsIHtcbiAgICBrZXk6ICckaG92ZXInLFxuICAgIGJvcmRlckNvbG9yOiAnJGFjY2VudDEnLFxuICAgIGluc2V0OiB0cnVlXG4gIH0pLFxuICAkYWN0aXZlU3R5bGU6ICgpID0+IHZhbHVlID0+IGNyZWF0ZVN0YXRlQ2xhc3ModmFsdWUsIHtcbiAgICBrZXk6ICckYWN0aXZlJyxcbiAgICBib3JkZXJDb2xvcjogJyRhY2NlbnQxJyxcbiAgICBpbnNldDogdHJ1ZVxuICB9KVxufTtcbmNvbnN0IHtcbiAgc3R5bGVkLFxuICBjc3MsXG4gIGNyZWF0ZVRoZW1lLFxuICBnbG9iYWxDc3MsXG4gIGtleWZyYW1lc1xufSA9IGNyZWF0ZVN0aXRjaGVzKHtcbiAgcHJlZml4OiAnbGV2YScsXG4gIHRoZW1lOiBnZXREZWZhdWx0VGhlbWUoKSxcbiAgdXRpbHM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCB1dGlscyksIHt9LCB7XG4gICAgJGZsZXg6ICgpID0+ICh7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0pLFxuICAgICRmbGV4Q2VudGVyOiAoKSA9PiAoe1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICB9KSxcbiAgICAkcmVzZXQ6ICgpID0+ICh7XG4gICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgZm9udFdlaWdodDogJ2luaGVyaXQnLFxuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYXBwZWFyYW5jZTogJ25vbmUnXG4gICAgfSksXG4gICAgJGRyYWdnYWJsZTogKCkgPT4gKHtcbiAgICAgIHRvdWNoQWN0aW9uOiAnbm9uZScsXG4gICAgICBXZWJraXRVc2VyRHJhZzogJ25vbmUnLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnXG4gICAgfSksXG4gICAgJGZvY3VzOiB2YWx1ZSA9PiAoe1xuICAgICAgJyY6Zm9jdXMnOiB1dGlscy4kZm9jdXNTdHlsZSgpKHZhbHVlKVxuICAgIH0pLFxuICAgICRmb2N1c1dpdGhpbjogdmFsdWUgPT4gKHtcbiAgICAgICcmOmZvY3VzLXdpdGhpbic6IHV0aWxzLiRmb2N1c1N0eWxlKCkodmFsdWUpXG4gICAgfSksXG4gICAgJGhvdmVyOiB2YWx1ZSA9PiAoe1xuICAgICAgJyY6aG92ZXInOiB1dGlscy4kaG92ZXJTdHlsZSgpKHZhbHVlKVxuICAgIH0pLFxuICAgICRhY3RpdmU6IHZhbHVlID0+ICh7XG4gICAgICAnJjphY3RpdmUnOiB1dGlscy4kYWN0aXZlU3R5bGUoKSh2YWx1ZSlcbiAgICB9KVxuICB9KVxufSk7XG5jb25zdCBnbG9iYWxTdHlsZXMgPSBnbG9iYWxDc3Moe1xuICAnLmxldmFfX3BhbmVsX19kcmFnZ2VkJzoge1xuICAgIFdlYmtpdFVzZXJEcmFnOiAnbm9uZScsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIGlucHV0OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZSdcbiAgICB9LFxuICAgICcqJzoge1xuICAgICAgY3Vyc29yOiAnZXctcmVzaXplICFpbXBvcnRhbnQnXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gbWVyZ2VUaGVtZShuZXdUaGVtZSkge1xuICBjb25zdCBkZWZhdWx0VGhlbWUgPSBnZXREZWZhdWx0VGhlbWUoKTtcbiAgaWYgKCFuZXdUaGVtZSkgcmV0dXJuIHtcbiAgICB0aGVtZTogZGVmYXVsdFRoZW1lLFxuICAgIGNsYXNzTmFtZTogJydcbiAgfTtcbiAgT2JqZWN0LmtleXMobmV3VGhlbWUpLmZvckVhY2goa2V5ID0+IHtcbiAgICBPYmplY3QuYXNzaWduKGRlZmF1bHRUaGVtZVtrZXldLCBuZXdUaGVtZVtrZXldKTtcbiAgfSk7XG4gIGNvbnN0IGN1c3RvbVRoZW1lID0gY3JlYXRlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgcmV0dXJuIHtcbiAgICB0aGVtZTogZGVmYXVsdFRoZW1lLFxuICAgIGNsYXNzTmFtZTogY3VzdG9tVGhlbWUuY2xhc3NOYW1lXG4gIH07XG59XG5mdW5jdGlvbiB1c2VUaChjYXRlZ29yeSwga2V5KSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZVxuICB9ID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICBpZiAoIShjYXRlZ29yeSBpbiB0aGVtZSkgfHwgIShrZXkgaW4gdGhlbWVbY2F0ZWdvcnldKSkge1xuICAgIHdhcm4oTGV2YUVycm9ycy5USEVNRV9FUlJPUiwgY2F0ZWdvcnksIGtleSk7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGxldCBfa2V5ID0ga2V5O1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGxldCB2YWx1ZSA9IHRoZW1lW2NhdGVnb3J5XVtfa2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5jaGFyQXQoMCkgPT09ICckJykgX2tleSA9IHZhbHVlLnN1YnN0cigxKTtlbHNlIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5jb25zdCBTdHlsZWRJbnB1dCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gICRyZXNldDogJycsXG4gIHBhZGRpbmc6ICcwICRzbScsXG4gIHdpZHRoOiAwLFxuICBtaW5XaWR0aDogMCxcbiAgZmxleDogMSxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHZhcmlhbnRzOiB7XG4gICAgbGV2YVR5cGU6IHtcbiAgICAgIG51bWJlcjoge1xuICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzOiB7XG4gICAgICB0ZXh0YXJlYToge1xuICAgICAgICBwYWRkaW5nOiAnJHNtJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5jb25zdCBJbm5lckxhYmVsID0gc3R5bGVkKCdkaXYnLCB7XG4gICRkcmFnZ2FibGU6ICcnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgJGZsZXhDZW50ZXI6ICcnLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgcGFkZGluZzogJzAgJHhzJyxcbiAgZm9udFNpemU6ICcwLjhlbScsXG4gIG9wYWNpdHk6IDAuOCxcbiAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gIHRvdWNoQWN0aW9uOiAnbm9uZScsXG4gIFtgJiArICR7U3R5bGVkSW5wdXR9YF06IHtcbiAgICBwYWRkaW5nTGVmdDogMFxuICB9XG59KTtcbmNvbnN0IElubmVyTnVtYmVyTGFiZWwgPSBzdHlsZWQoSW5uZXJMYWJlbCwge1xuICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICBtYXJnaW5SaWdodDogJy0keHMnLFxuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgb3BhY2l0eTogMC4zLFxuICAnJjpob3Zlcic6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIHZhcmlhbnRzOiB7XG4gICAgZHJhZ2dpbmc6IHtcbiAgICAgIHRydWU6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnJGFjY2VudDInLFxuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbmNvbnN0IElucHV0Q29udGFpbmVyID0gc3R5bGVkKCdkaXYnLCB7XG4gICRmbGV4OiAnJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGJvcmRlclJhZGl1czogJyRzbScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgaGVpZ2h0OiAnJHJvd0hlaWdodCcsXG4gIGJhY2tncm91bmRDb2xvcjogJyRlbGV2YXRpb24zJyxcbiAgJGlucHV0U3R5bGU6ICckZWxldmF0aW9uMScsXG4gICRob3ZlcjogJycsXG4gICRmb2N1c1dpdGhpbjogJycsXG4gIHZhcmlhbnRzOiB7XG4gICAgdGV4dEFyZWE6IHtcbiAgICAgIHRydWU6IHtcbiAgICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5jb25zdCBfZXhjbHVkZWQkNyA9IFtcImlubmVyTGFiZWxcIiwgXCJ2YWx1ZVwiLCBcIm9uVXBkYXRlXCIsIFwib25DaGFuZ2VcIiwgXCJvbktleURvd25cIiwgXCJ0eXBlXCIsIFwiaWRcIiwgXCJpbnB1dFR5cGVcIiwgXCJyb3dzXCJdLFxuICBfZXhjbHVkZWQyJDEgPSBbXCJvblVwZGF0ZVwiXTtcbmZ1bmN0aW9uIFZhbHVlSW5wdXQoX3JlZikge1xuICBsZXQge1xuICAgICAgaW5uZXJMYWJlbCxcbiAgICAgIHZhbHVlLFxuICAgICAgb25VcGRhdGUsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIHR5cGUsXG4gICAgICBpZCxcbiAgICAgIGlucHV0VHlwZSA9ICd0ZXh0JyxcbiAgICAgIHJvd3MgPSAwXG4gICAgfSA9IF9yZWYsXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkJDcpO1xuICBjb25zdCB7XG4gICAgaWQ6IF9pZCxcbiAgICBlbWl0T25FZGl0U3RhcnQsXG4gICAgZW1pdE9uRWRpdEVuZCxcbiAgICBkaXNhYmxlZFxuICB9ID0gdXNlSW5wdXRDb250ZXh0KCk7XG4gIGNvbnN0IGlucHV0SWQgPSBpZCB8fCBfaWQ7XG4gIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBpc1RleHRBcmVhID0gcm93cyA+IDA7XG4gIGNvbnN0IGFzVHlwZSA9IGlzVGV4dEFyZWEgPyAndGV4dGFyZWEnIDogJ2lucHV0JztcbiAgY29uc3QgdXBkYXRlID0gdXNlQ2FsbGJhY2soZm4gPT4gZXZlbnQgPT4ge1xuICAgIGNvbnN0IF92YWx1ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWU7XG4gICAgZm4oX3ZhbHVlKTtcbiAgfSwgW10pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgcmVmID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICBjb25zdCBfb25VcGRhdGUgPSB1cGRhdGUodmFsdWUgPT4ge1xuICAgICAgb25VcGRhdGUodmFsdWUpO1xuICAgICAgZW1pdE9uRWRpdEVuZCgpO1xuICAgIH0pO1xuICAgIHJlZiA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgX29uVXBkYXRlKTtcbiAgICByZXR1cm4gKCkgPT4gcmVmID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBfb25VcGRhdGUpO1xuICB9LCBbdXBkYXRlLCBvblVwZGF0ZSwgZW1pdE9uRWRpdEVuZF0pO1xuICBjb25zdCBvbktleVByZXNzID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgIHVwZGF0ZShvblVwZGF0ZSkoZXZlbnQpO1xuICAgIH1cbiAgfSwgW3VwZGF0ZSwgb25VcGRhdGVdKTtcblxuICBjb25zdCBpbnB1dFByb3BzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgYXM6IGFzVHlwZVxuICB9LCBpc1RleHRBcmVhID8ge1xuICAgIHJvd3NcbiAgfSA6IHt9LCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0Q29udGFpbmVyLCB7XG4gICAgdGV4dEFyZWE6IGlzVGV4dEFyZWFcbiAgfSwgaW5uZXJMYWJlbCAmJiB0eXBlb2YgaW5uZXJMYWJlbCA9PT0gJ3N0cmluZycgPyBSZWFjdC5jcmVhdGVFbGVtZW50KElubmVyTGFiZWwsIG51bGwsIGlubmVyTGFiZWwpIDogaW5uZXJMYWJlbCwgUmVhY3QuY3JlYXRlRWxlbWVudChTdHlsZWRJbnB1dCwgX2V4dGVuZHMoe1xuICAgIGxldmFUeXBlOiB0eXBlXG4gICAgLFxuICAgIHJlZjogaW5wdXRSZWYsXG4gICAgaWQ6IGlucHV0SWQsXG4gICAgdHlwZTogaW5wdXRUeXBlLFxuICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcbiAgICBzcGVsbENoZWNrOiBcImZhbHNlXCIsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uQ2hhbmdlOiB1cGRhdGUob25DaGFuZ2UpLFxuICAgIG9uRm9jdXM6ICgpID0+IGVtaXRPbkVkaXRTdGFydCgpLFxuICAgIG9uS2V5UHJlc3M6IG9uS2V5UHJlc3MsXG4gICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIGlucHV0UHJvcHMpKSk7XG59XG5mdW5jdGlvbiBOdW1iZXJJbnB1dChfcmVmMikge1xuICBsZXQge1xuICAgICAgb25VcGRhdGVcbiAgICB9ID0gX3JlZjIsXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIF9leGNsdWRlZDIkMSk7XG4gIGNvbnN0IF9vblVwZGF0ZSA9IHVzZUNhbGxiYWNrKHYgPT4gb25VcGRhdGUocGFyc2VOdW1iZXIodikpLCBbb25VcGRhdGVdKTtcbiAgY29uc3Qgb25LZXlEb3duID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGNvbnN0IGRpciA9IGV2ZW50LmtleSA9PT0gJ0Fycm93VXAnID8gMSA6IGV2ZW50LmtleSA9PT0gJ0Fycm93RG93bicgPyAtMSA6IDA7XG4gICAgaWYgKGRpcikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IHN0ZXAgPSBldmVudC5hbHRLZXkgPyAwLjEgOiBldmVudC5zaGlmdEtleSA/IDEwIDogMTtcbiAgICAgIG9uVXBkYXRlKHYgPT4gcGFyc2VGbG9hdCh2KSArIGRpciAqIHN0ZXApO1xuICAgIH1cbiAgfSwgW29uVXBkYXRlXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFZhbHVlSW5wdXQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG9uVXBkYXRlOiBfb25VcGRhdGUsXG4gICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgdHlwZTogXCJudW1iZXJcIlxuICB9KSk7XG59XG5cbmNvbnN0IFN0eWxlZEZvbGRlciA9IHN0eWxlZCgnZGl2Jywge30pO1xuY29uc3QgU3R5bGVkV3JhcHBlciA9IHN0eWxlZCgnZGl2Jywge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYmFja2dyb3VuZDogJyRlbGV2YXRpb24yJyxcbiAgdHJhbnNpdGlvbjogJ2hlaWdodCAzMDBtcyBlYXNlJyxcbiAgdmFyaWFudHM6IHtcbiAgICBmaWxsOiB7XG4gICAgICB0cnVlOiB7fSxcbiAgICAgIGZhbHNlOiB7fVxuICAgIH0sXG4gICAgZmxhdDoge1xuICAgICAgZmFsc2U6IHt9LFxuICAgICAgdHJ1ZToge31cbiAgICB9LFxuICAgIGlzUm9vdDoge1xuICAgICAgdHJ1ZToge30sXG4gICAgICBmYWxzZToge1xuICAgICAgICBwYWRkaW5nTGVmdDogJyRtZCcsXG4gICAgICAgICcmOjphZnRlcic6IHtcbiAgICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgd2lkdGg6ICckYm9yZGVyV2lkdGhzJGZvbGRlcicsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnJGZvbGRlcldpZGdldENvbG9yJyxcbiAgICAgICAgICBvcGFjaXR5OiAwLjQsXG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcG91bmRWYXJpYW50czogW3tcbiAgICBpc1Jvb3Q6IHRydWUsXG4gICAgZmlsbDogZmFsc2UsXG4gICAgY3NzOiB7XG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIG1heEhlaWdodDogJ2NhbGMoMTAwdmggLSAyMHB4IC0gJCR0aXRsZUJhckhlaWdodCknXG4gICAgfVxuICB9LCB7XG4gICAgaXNSb290OiB0cnVlLFxuICAgIGZsYXQ6IGZhbHNlLFxuICAgIGNzczoge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnJGxnJ1xuICAgIH1cbiAgfV1cbn0pO1xuY29uc3QgU3R5bGVkVGl0bGUgPSBzdHlsZWQoJ2RpdicsIHtcbiAgJGZsZXg6ICcnLFxuICBjb2xvcjogJyRmb2xkZXJUZXh0Q29sb3InLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBoZWlnaHQ6ICckZm9sZGVyVGl0bGVIZWlnaHQnLFxuICBmb250V2VpZ2h0OiAnJGZvbGRlcicsXG4gICc+IHN2Zyc6IHtcbiAgICBtYXJnaW5MZWZ0OiAtNCxcbiAgICBtYXJnaW5SaWdodDogNCxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICBmaWxsOiAnJGZvbGRlcldpZGdldENvbG9yJyxcbiAgICBvcGFjaXR5OiAwLjZcbiAgfSxcbiAgJyY6aG92ZXIgPiBzdmcnOiB7XG4gICAgZmlsbDogJyRmb2xkZXJXaWRnZXRDb2xvcidcbiAgfSxcbiAgW2AmOmhvdmVyICsgJHtTdHlsZWRXcmFwcGVyfTo6YWZ0ZXJgXToge1xuICAgIG9wYWNpdHk6IDAuNlxuICB9LFxuICBbYCR7U3R5bGVkRm9sZGVyfTpob3ZlciA+ICYgKyAke1N0eWxlZFdyYXBwZXJ9OjphZnRlcmBdOiB7XG4gICAgb3BhY2l0eTogMC42XG4gIH0sXG4gIFtgJHtTdHlsZWRGb2xkZXJ9OmhvdmVyID4gJiA+IHN2Z2BdOiB7XG4gICAgb3BhY2l0eTogMVxuICB9XG59KTtcbmNvbnN0IFN0eWxlZENvbnRlbnQgPSBzdHlsZWQoJ2RpdicsIHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdncmlkJyxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzEwMCUnLFxuICByb3dHYXA6ICckcm93R2FwJyxcbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjUwbXMgZWFzZScsXG4gIHZhcmlhbnRzOiB7XG4gICAgdG9nZ2xlZDoge1xuICAgICAgdHJ1ZToge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2l0aW9uRGVsYXk6ICcyNTBtcydcbiAgICAgIH0sXG4gICAgICBmYWxzZToge1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2l0aW9uRGVsYXk6ICcwbXMnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzUm9vdDoge1xuICAgICAgdHJ1ZToge1xuICAgICAgICAnJiA+IGRpdic6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogJyRtZCcsXG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiAnJG1kJ1xuICAgICAgICB9LFxuICAgICAgICAnJiA+IGRpdjpmaXJzdC1vZi10eXBlJzoge1xuICAgICAgICAgIHBhZGRpbmdUb3A6ICckc20nXG4gICAgICAgIH0sXG4gICAgICAgICcmID4gZGl2Omxhc3Qtb2YtdHlwZSc6IHtcbiAgICAgICAgICBwYWRkaW5nQm90dG9tOiAnJHNtJ1xuICAgICAgICB9LFxuXG4gICAgICAgIFtgPiAke1N0eWxlZEZvbGRlcn06bm90KDpmaXJzdC1vZi10eXBlKWBdOiB7XG4gICAgICAgICAgcGFkZGluZ1RvcDogJyRzbScsXG4gICAgICAgICAgbWFyZ2luVG9wOiAnJG1kJyxcbiAgICAgICAgICBib3JkZXJUb3A6ICckYm9yZGVyV2lkdGhzJGZvbGRlciBzb2xpZCAkY29sb3JzJGVsZXZhdGlvbjEnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5jb25zdCBTdHlsZWRSb3cgPSBzdHlsZWQoJ2RpdicsIHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHpJbmRleDogMTAwLFxuICBkaXNwbGF5OiAnZ3JpZCcsXG4gIHJvd0dhcDogJyRyb3dHYXAnLFxuICBncmlkVGVtcGxhdGVSb3dzOiAnbWlubWF4KCRzaXplcyRyb3dIZWlnaHQsIG1heC1jb250ZW50KScsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBjb2xvcjogJyRoaWdobGlnaHQyJyxcbiAgW2Ake1N0eWxlZENvbnRlbnR9ID4gJmBdOiB7XG4gICAgJyY6Zmlyc3Qtb2YtdHlwZSc6IHtcbiAgICAgIG1hcmdpblRvcDogJyRyb3dHYXAnXG4gICAgfSxcbiAgICAnJjpsYXN0LW9mLXR5cGUnOiB7XG4gICAgICBtYXJnaW5Cb3R0b206ICckcm93R2FwJ1xuICAgIH1cbiAgfSxcbiAgdmFyaWFudHM6IHtcbiAgICBkaXNhYmxlZDoge1xuICAgICAgdHJ1ZToge1xuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICBmYWxzZToge1xuICAgICAgICAnJjpob3ZlciwmOmZvY3VzLXdpdGhpbic6IHtcbiAgICAgICAgICBjb2xvcjogJyRoaWdobGlnaHQzJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbmNvbnN0IFN0eWxlZElucHV0Um93ID0gc3R5bGVkKFN0eWxlZFJvdywge1xuICBncmlkVGVtcGxhdGVDb2x1bW5zOiAnYXV0byAkc2l6ZXMkY29udHJvbFdpZHRoJyxcbiAgY29sdW1uR2FwOiAnJGNvbEdhcCdcbn0pO1xuY29uc3QgQ29weUxhYmVsQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnLCB7XG4gICRmbGV4OiAnJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICcmID4gZGl2Jzoge1xuICAgIG1hcmdpbkxlZnQ6ICckY29sR2FwJyxcbiAgICBwYWRkaW5nOiAnMCAkeHMnLFxuICAgIG9wYWNpdHk6IDAuNFxuICB9LFxuICAnJiA+IGRpdjpob3Zlcic6IHtcbiAgICBvcGFjaXR5OiAwLjhcbiAgfSxcbiAgJyYgPiBkaXYgPiBzdmcnOiB7XG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHdpZHRoOiAxMyxcbiAgICBtaW5XaWR0aDogMTMsXG4gICAgaGVpZ2h0OiAxMyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICckZWxldmF0aW9uMidcbiAgfSxcbiAgJyY6aG92ZXIgPiBkaXYgPiBzdmcnOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9LFxuICB2YXJpYW50czoge1xuICAgIGFsaWduOiB7XG4gICAgICB0b3A6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgcGFkZGluZ1RvcDogJyRzbSdcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuY29uc3QgU3R5bGVkT3B0aW9uYWxUb2dnbGUgPSBzdHlsZWQoJ2lucHV0Jywge1xuICAkcmVzZXQ6ICcnLFxuICBoZWlnaHQ6IDAsXG4gIHdpZHRoOiAwLFxuICBvcGFjaXR5OiAwLFxuICBtYXJnaW46IDAsXG4gICcmICsgbGFiZWwnOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgJGZsZXhDZW50ZXI6ICcnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICBwYWRkaW5nTGVmdDogMixcbiAgICBwYWRkaW5nUmlnaHQ6ICckc20nLFxuICAgIHBvaW50ZXJFdmVudHM6ICdhdXRvJ1xuICB9LFxuICAnJiArIGxhYmVsOmFmdGVyJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICB3aWR0aDogNixcbiAgICBoZWlnaHQ6IDYsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnJGVsZXZhdGlvbjMnLFxuICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgJGFjdGl2ZVN0eWxlOiAnJ1xuICB9LFxuICAnJjpmb2N1cyArIGxhYmVsOmFmdGVyJzoge1xuICAgICRmb2N1c1N0eWxlOiAnJ1xuICB9LFxuICAnJiArIGxhYmVsOmFjdGl2ZTphZnRlcic6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICckYWNjZW50MScsXG4gICAgJGZvY3VzU3R5bGU6ICcnXG4gIH0sXG4gICcmOmNoZWNrZWQgKyBsYWJlbDphZnRlcic6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICckYWNjZW50MSdcbiAgfVxufSk7XG5jb25zdCBTdHlsZWRMYWJlbCA9IHN0eWxlZCgnbGFiZWwnLCB7XG4gIGZvbnRXZWlnaHQ6ICckbGFiZWwnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICcmID4gc3ZnJzoge1xuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfVxufSk7XG5cbmNvbnN0IFN0eWxlZElucHV0V3JhcHBlciQxID0gc3R5bGVkKCdkaXYnLCB7XG4gIG9wYWNpdHk6IDEsXG4gIHZhcmlhbnRzOiB7XG4gICAgZGlzYWJsZWQ6IHtcbiAgICAgIHRydWU6IHtcbiAgICAgICAgb3BhY2l0eTogMC42LFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgIFtgJiAke1N0eWxlZExhYmVsfWBdOiB7XG4gICAgICAgICAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuY29uc3QgT3ZlcmxheSA9IHN0eWxlZCgnZGl2Jywge1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgdG9wOiAwLFxuICBib3R0b206IDAsXG4gIHJpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICB6SW5kZXg6IDEwMDAsXG4gIHVzZXJTZWxlY3Q6ICdub25lJ1xufSk7XG5jb25zdCBTdHlsZWRUb29sVGlwQ29udGVudCA9IHN0eWxlZCgnZGl2Jywge1xuICBiYWNrZ3JvdW5kOiAnJHRvb2xUaXBCYWNrZ3JvdW5kJyxcbiAgZm9udEZhbWlseTogJyRzYW5zJyxcbiAgZm9udFNpemU6ICckdG9vbFRpcCcsXG4gIHBhZGRpbmc6ICckeHMgJHNtJyxcbiAgY29sb3I6ICckdG9vbFRpcFRleHQnLFxuICBib3JkZXJSYWRpdXM6ICckeHMnLFxuICBib3hTaGFkb3c6ICckbGV2ZWwyJyxcbiAgbWF4V2lkdGg6IDI2MFxufSk7XG5jb25zdCBUb29sVGlwQXJyb3cgPSBzdHlsZWQoQXJyb3csIHtcbiAgZmlsbDogJyR0b29sVGlwQmFja2dyb3VuZCdcbn0pO1xuXG5mdW5jdGlvbiBQb3J0YWwoe1xuICBjaGlsZHJlblxufSkge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lXG4gIH0gPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFAuUm9vdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkJDYgPSBbXCJhbGlnblwiXTtcbmZ1bmN0aW9uIE9wdGlvbmFsVG9nZ2xlKCkge1xuICBjb25zdCB7XG4gICAgaWQsXG4gICAgZGlzYWJsZSxcbiAgICBkaXNhYmxlZFxuICB9ID0gdXNlSW5wdXRDb250ZXh0KCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlZE9wdGlvbmFsVG9nZ2xlLCB7XG4gICAgaWQ6IGlkICsgJ19fZGlzYWJsZScsXG4gICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgIGNoZWNrZWQ6ICFkaXNhYmxlZCxcbiAgICBvbkNoYW5nZTogKCkgPT4gZGlzYWJsZSghZGlzYWJsZWQpXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1xuICAgIGh0bWxGb3I6IGlkICsgJ19fZGlzYWJsZSdcbiAgfSkpO1xufVxuZnVuY3Rpb24gUmF3TGFiZWwocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIG9wdGlvbmFsLFxuICAgIGhpbnRcbiAgfSA9IHVzZUlucHV0Q29udGV4dCgpO1xuICBjb25zdCBodG1sRm9yID0gcHJvcHMuaHRtbEZvciB8fCAoaWQgPyB7XG4gICAgaHRtbEZvcjogaWRcbiAgfSA6IG51bGwpO1xuXG4gIGNvbnN0IHRpdGxlID0gIWhpbnQgJiYgdHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyA/IHtcbiAgICB0aXRsZTogcHJvcHMuY2hpbGRyZW5cbiAgfSA6IG51bGw7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBvcHRpb25hbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KE9wdGlvbmFsVG9nZ2xlLCBudWxsKSwgaGludCAhPT0gdW5kZWZpbmVkID8gUmVhY3QuY3JlYXRlRWxlbWVudChSYWRpeFRvb2x0aXAuUm9vdCwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChSYWRpeFRvb2x0aXAuVHJpZ2dlciwge1xuICAgIGFzQ2hpbGQ6IHRydWVcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTdHlsZWRMYWJlbCwgX2V4dGVuZHMoe30sIGh0bWxGb3IsIHByb3BzKSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFJhZGl4VG9vbHRpcC5Db250ZW50LCB7XG4gICAgc2lkZTogXCJ0b3BcIixcbiAgICBzaWRlT2Zmc2V0OiAyXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVkVG9vbFRpcENvbnRlbnQsIG51bGwsIGhpbnQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbFRpcEFycm93LCBudWxsKSkpKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVkTGFiZWwsIF9leHRlbmRzKHt9LCBodG1sRm9yLCB0aXRsZSwgcHJvcHMpKSk7XG59XG5mdW5jdGlvbiBMYWJlbChfcmVmKSB7XG4gIGxldCB7XG4gICAgICBhbGlnblxuICAgIH0gPSBfcmVmLFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCQ2KTtcbiAgY29uc3Qge1xuICAgIHZhbHVlLFxuICAgIGxhYmVsLFxuICAgIGtleSxcbiAgICBkaXNhYmxlZFxuICB9ID0gdXNlSW5wdXRDb250ZXh0KCk7XG4gIGNvbnN0IHtcbiAgICBoaWRlQ29weUJ1dHRvblxuICB9ID0gdXNlUGFuZWxTZXR0aW5nc0NvbnRleHQoKTtcbiAgY29uc3QgY29weUVuYWJsZWQgPSAhaGlkZUNvcHlCdXR0b24gJiYga2V5ICE9PSB1bmRlZmluZWQ7XG4gIGNvbnN0IFtjb3BpZWQsIHNldENvcGllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIFtrZXldOiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiAnJ1xuICAgICAgfSkpO1xuICAgICAgc2V0Q29waWVkKHRydWUpO1xuICAgIH0gY2F0Y2ggKF91bnVzZWQpIHtcbiAgICAgIHdhcm4oTGV2YUVycm9ycy5DTElQQk9BUkRfRVJST1IsIHtcbiAgICAgICAgW2tleV06IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvcHlMYWJlbENvbnRhaW5lciwge1xuICAgIGFsaWduOiBhbGlnbixcbiAgICBvblBvaW50ZXJMZWF2ZTogKCkgPT4gc2V0Q29waWVkKGZhbHNlKVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFJhd0xhYmVsLCBwcm9wcyksIGNvcHlFbmFibGVkICYmICFkaXNhYmxlZCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0aXRsZTogYENsaWNrIHRvIGNvcHkgJHt0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnID8gbGFiZWwgOiBrZXl9IHZhbHVlYFxuICB9LCAhY29waWVkID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTggM2ExIDEgMCAwMTEtMWgyYTEgMSAwIDExMCAySDlhMSAxIDAgMDEtMS0xelwiXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNiAzYTIgMiAwIDAwLTIgMnYxMWEyIDIgMCAwMDIgMmg4YTIgMiAwIDAwMi0yVjVhMiAyIDAgMDAtMi0yIDMgMyAwIDAxLTMgM0g5YTMgMyAwIDAxLTMtM3pcIlxuICB9KSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDIwIDIwXCIsXG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOSAyYTEgMSAwIDAwMCAyaDJhMSAxIDAgMTAwLTJIOXpcIlxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk00IDVhMiAyIDAgMDEyLTIgMyAzIDAgMDAzIDNoMmEzIDMgMCAwMDMtMyAyIDIgMCAwMTIgMnYxMWEyIDIgMCAwMS0yIDJINmEyIDIgMCAwMS0yLTJWNXptOS43MDcgNS43MDdhMSAxIDAgMDAtMS40MTQtMS40MTRMOSAxMi41ODZsLTEuMjkzLTEuMjkzYTEgMSAwIDAwLTEuNDE0IDEuNDE0bDIgMmExIDEgMCAwMDEuNDE0IDBsNC00elwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIlxuICB9KSkpKTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkJDUgPSBbXCJ0b2dnbGVkXCJdO1xuXG5jb25zdCBTdmcgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMzUwbXMgZWFzZSwgZmlsbCAyNTBtcyBlYXNlJ1xufSk7XG5mdW5jdGlvbiBDaGV2cm9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICAgIHRvZ2dsZWRcbiAgICB9ID0gX3JlZixcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQkNSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN2ZywgX2V4dGVuZHMoe1xuICAgIHdpZHRoOiBcIjlcIixcbiAgICBoZWlnaHQ6IFwiNVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDkgNVwiLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZSgke3RvZ2dsZWQgPyAwIDogLTkwfWRlZylgXG4gICAgfVxuICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0zLjggNC40Yy40LjMgMSAuMyAxLjQgMEw4IDEuN0ExIDEgMCAwMDcuNCAwSDEuNmExIDEgMCAwMC0uNyAxLjdsMyAyLjd6XCJcbiAgfSkpO1xufVxuXG5jb25zdCBfZXhjbHVkZWQkNCA9IFtcImlucHV0XCJdO1xuZnVuY3Rpb24gUm93KF9yZWYpIHtcbiAgbGV0IHtcbiAgICAgIGlucHV0XG4gICAgfSA9IF9yZWYsXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkJDQpO1xuICBpZiAoaW5wdXQpIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlZElucHV0Um93LCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlZFJvdywgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiB1c2VJbnB1dFNldHRlcnMoe1xuICB2YWx1ZSxcbiAgdHlwZSxcbiAgc2V0dGluZ3MsXG4gIHNldFZhbHVlXG59KSB7XG4gIGNvbnN0IFtkaXNwbGF5VmFsdWUsIHNldERpc3BsYXlWYWx1ZV0gPSB1c2VTdGF0ZShmb3JtYXQkMih0eXBlLCB2YWx1ZSwgc2V0dGluZ3MpKTtcbiAgY29uc3QgcHJldmlvdXNWYWx1ZVJlZiA9IHVzZVJlZih2YWx1ZSk7XG4gIGNvbnN0IHNldHRpbmdzUmVmID0gdXNlUmVmKHNldHRpbmdzKTtcbiAgc2V0dGluZ3NSZWYuY3VycmVudCA9IHNldHRpbmdzO1xuICBjb25zdCBzZXRGb3JtYXQgPSB1c2VDYWxsYmFjayh2ID0+IHNldERpc3BsYXlWYWx1ZShmb3JtYXQkMih0eXBlLCB2LCBzZXR0aW5nc1JlZi5jdXJyZW50KSksIFt0eXBlXSk7XG4gIGNvbnN0IG9uVXBkYXRlID0gdXNlQ2FsbGJhY2sodXBkYXRlZFZhbHVlID0+IHtcbiAgICB0cnkge1xuICAgICAgc2V0VmFsdWUodXBkYXRlZFZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3Qge1xuICAgICAgICB0eXBlLFxuICAgICAgICBwcmV2aW91c1ZhbHVlXG4gICAgICB9ID0gZXJyb3I7XG4gICAgICBpZiAodHlwZSAhPT0gJ0xFVkFfRVJST1InKSB0aHJvdyBlcnJvcjtcbiAgICAgIHNldEZvcm1hdChwcmV2aW91c1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtzZXRGb3JtYXQsIHNldFZhbHVlXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkZXF1YWwodmFsdWUsIHByZXZpb3VzVmFsdWVSZWYuY3VycmVudCkpIHtcbiAgICAgIHNldEZvcm1hdCh2YWx1ZSk7XG4gICAgfVxuICAgIHByZXZpb3VzVmFsdWVSZWYuY3VycmVudCA9IHZhbHVlO1xuICB9LCBbdmFsdWUsIHNldEZvcm1hdF0pO1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXlWYWx1ZSxcbiAgICBvbkNoYW5nZTogc2V0RGlzcGxheVZhbHVlLFxuICAgIG9uVXBkYXRlXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZURyYWcoaGFuZGxlciwgY29uZmlnKSB7XG4gIGNvbnN0IHtcbiAgICBlbWl0T25FZGl0U3RhcnQsXG4gICAgZW1pdE9uRWRpdEVuZFxuICB9ID0gdXNlSW5wdXRDb250ZXh0KCk7XG4gIHJldHVybiB1c2VEcmFnJDEoc3RhdGUgPT4ge1xuICAgIGlmIChzdGF0ZS5maXJzdCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdsZXZhX19wYW5lbF9fZHJhZ2dlZCcpO1xuICAgICAgZW1pdE9uRWRpdFN0YXJ0ID09PSBudWxsIHx8IGVtaXRPbkVkaXRTdGFydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZW1pdE9uRWRpdFN0YXJ0KCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZXIoc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5sYXN0KSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2xldmFfX3BhbmVsX19kcmFnZ2VkJyk7XG4gICAgICBlbWl0T25FZGl0RW5kID09PSBudWxsIHx8IGVtaXRPbkVkaXRFbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVtaXRPbkVkaXRFbmQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gdXNlQ2FudmFzMmQoZm4pIHtcbiAgY29uc3QgY2FudmFzID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBjdHggPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhc0ZpcmVkID0gdXNlUmVmKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUNhbnZhcyA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIGNhbnZhcy5jdXJyZW50LndpZHRoID0gY2FudmFzLmN1cnJlbnQub2Zmc2V0V2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgIGNhbnZhcy5jdXJyZW50LmhlaWdodCA9IGNhbnZhcy5jdXJyZW50Lm9mZnNldEhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgZm4oY2FudmFzLmN1cnJlbnQsIGN0eC5jdXJyZW50KTtcbiAgICB9LCAyNTApO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVDYW52YXMpO1xuICAgIGlmICghaGFzRmlyZWQuY3VycmVudCkge1xuICAgICAgaGFuZGxlQ2FudmFzKCk7XG4gICAgICBoYXNGaXJlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVDYW52YXMpO1xuICB9LCBbZm5dKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjdHguY3VycmVudCA9IGNhbnZhcy5jdXJyZW50LmdldENvbnRleHQoJzJkJyk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtjYW52YXMsIGN0eF07XG59XG5cbmZ1bmN0aW9uIHVzZVRyYW5zZm9ybSgpIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBsb2NhbCA9IHVzZVJlZih7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH0pO1xuICBjb25zdCBzZXQgPSB1c2VDYWxsYmFjayhwb2ludCA9PiB7XG4gICAgT2JqZWN0LmFzc2lnbihsb2NhbC5jdXJyZW50LCBwb2ludCk7XG4gICAgaWYgKHJlZi5jdXJyZW50KSByZWYuY3VycmVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHtsb2NhbC5jdXJyZW50Lnh9cHgsICR7bG9jYWwuY3VycmVudC55fXB4LCAwKWA7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtyZWYsIHNldF07XG59XG5cbmNvbnN0IF9leGNsdWRlZCQzID0gW1wiX19yZWZDb3VudFwiXTtcbmNvbnN0IGdldElucHV0QXRQYXRoID0gKGRhdGEsIHBhdGgpID0+IHtcbiAgaWYgKCFkYXRhW3BhdGhdKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgX2RhdGEkcGF0aCA9IGRhdGFbcGF0aF0sXG4gICAgaW5wdXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX2RhdGEkcGF0aCwgX2V4Y2x1ZGVkJDMpO1xuICByZXR1cm4gaW5wdXQ7XG59O1xuZnVuY3Rpb24gdXNlSW5wdXQocGF0aCkge1xuICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlQ29udGV4dCgpO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKGdldElucHV0QXRQYXRoKHN0b3JlLmdldERhdGEoKSwgcGF0aCkpO1xuICBjb25zdCBzZXQgPSB1c2VDYWxsYmFjayh2YWx1ZSA9PiBzdG9yZS5zZXRWYWx1ZUF0UGF0aChwYXRoLCB2YWx1ZSwgdHJ1ZSksIFtwYXRoLCBzdG9yZV0pO1xuICBjb25zdCBzZXRTZXR0aW5ncyA9IHVzZUNhbGxiYWNrKHNldHRpbmdzID0+IHN0b3JlLnNldFNldHRpbmdzQXRQYXRoKHBhdGgsIHNldHRpbmdzKSwgW3BhdGgsIHN0b3JlXSk7XG4gIGNvbnN0IGRpc2FibGUgPSB1c2VDYWxsYmFjayhmbGFnID0+IHN0b3JlLmRpc2FibGVJbnB1dEF0UGF0aChwYXRoLCBmbGFnKSwgW3BhdGgsIHN0b3JlXSk7XG4gIGNvbnN0IGVtaXRPbkVkaXRTdGFydCA9IHVzZUNhbGxiYWNrKCgpID0+IHN0b3JlLmVtaXRPbkVkaXRTdGFydChwYXRoKSwgW3BhdGgsIHN0b3JlXSk7XG4gIGNvbnN0IGVtaXRPbkVkaXRFbmQgPSB1c2VDYWxsYmFjaygoKSA9PiBzdG9yZS5lbWl0T25FZGl0RW5kKHBhdGgpLCBbcGF0aCwgc3RvcmVdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRTdGF0ZShnZXRJbnB1dEF0UGF0aChzdG9yZS5nZXREYXRhKCksIHBhdGgpKTtcbiAgICBjb25zdCB1bnN1YiA9IHN0b3JlLnVzZVN0b3JlLnN1YnNjcmliZShzID0+IGdldElucHV0QXRQYXRoKHMuZGF0YSwgcGF0aCksIHNldFN0YXRlLCB7XG4gICAgICBlcXVhbGl0eUZuOiBzaGFsbG93XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHVuc3ViKCk7XG4gIH0sIFtzdG9yZSwgcGF0aF0pO1xuICByZXR1cm4gW3N0YXRlLCB7XG4gICAgc2V0LFxuICAgIHNldFNldHRpbmdzLFxuICAgIGRpc2FibGUsXG4gICAgc3RvcmVJZDogc3RvcmUuc3RvcmVJZCxcbiAgICBlbWl0T25FZGl0U3RhcnQsXG4gICAgZW1pdE9uRWRpdEVuZFxuICB9XTtcbn1cblxuY29uc3QgUmFuZ2VHcmlkID0gc3R5bGVkKCdkaXYnLCB7XG4gIHZhcmlhbnRzOiB7XG4gICAgaGFzUmFuZ2U6IHtcbiAgICAgIHRydWU6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJ2F1dG8gJHNpemVzJG51bWJlcklucHV0TWluV2lkdGgnLFxuICAgICAgICBjb2x1bW5HYXA6ICckY29sR2FwJyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5jb25zdCBSYW5nZSA9IHN0eWxlZCgnZGl2Jywge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAyLFxuICBib3JkZXJSYWRpdXM6ICckeHMnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICckZWxldmF0aW9uMSdcbn0pO1xuY29uc3QgU2NydWJiZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdpZHRoOiAnJHNjcnViYmVyV2lkdGgnLFxuICBoZWlnaHQ6ICckc2NydWJiZXJIZWlnaHQnLFxuICBib3JkZXJSYWRpdXM6ICckeHMnLFxuICBib3hTaGFkb3c6ICcwIDAgMCAycHggJGNvbG9ycyRlbGV2YXRpb24yJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnJGFjY2VudDInLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgJGFjdGl2ZTogJ25vbmUgJGFjY2VudDEnLFxuICAkaG92ZXI6ICdub25lICRhY2NlbnQzJyxcbiAgdmFyaWFudHM6IHtcbiAgICBwb3NpdGlvbjoge1xuICAgICAgbGVmdDoge1xuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogMCxcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoY2FsYygtMC41ICogKCRzaXplcyRzY3J1YmJlcldpZHRoICsgNHB4KSkpJ1xuICAgICAgfSxcbiAgICAgIHJpZ2h0OiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoY2FsYygwLjUgKiAoJHNpemVzJHNjcnViYmVyV2lkdGggKyA0cHgpKSknXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbmNvbnN0IFJhbmdlV3JhcHBlciA9IHN0eWxlZCgnZGl2Jywge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgJGZsZXg6ICcnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHRvdWNoQWN0aW9uOiAnbm9uZSdcbn0pO1xuY29uc3QgSW5kaWNhdG9yID0gc3R5bGVkKCdkaXYnLCB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnJGFjY2VudDInXG59KTtcblxuZnVuY3Rpb24gUmFuZ2VTbGlkZXIoe1xuICB2YWx1ZSxcbiAgbWluLFxuICBtYXgsXG4gIG9uRHJhZyxcbiAgc3RlcCxcbiAgaW5pdGlhbFZhbHVlXG59KSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3Qgc2NydWJiZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJhbmdlV2lkdGggPSB1c2VSZWYoMCk7XG4gIGNvbnN0IHNjcnViYmVyV2lkdGggPSB1c2VUaCgnc2l6ZXMnLCAnc2NydWJiZXJXaWR0aCcpO1xuICBjb25zdCBiaW5kID0gdXNlRHJhZygoe1xuICAgIGV2ZW50LFxuICAgIGZpcnN0LFxuICAgIHh5OiBbeF0sXG4gICAgbW92ZW1lbnQ6IFtteF0sXG4gICAgbWVtb1xuICB9KSA9PiB7XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBsZWZ0XG4gICAgICB9ID0gcmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByYW5nZVdpZHRoLmN1cnJlbnQgPSB3aWR0aCAtIHBhcnNlRmxvYXQoc2NydWJiZXJXaWR0aCk7XG4gICAgICBjb25zdCB0YXJnZXRJc1NjcnViID0gKGV2ZW50ID09PSBudWxsIHx8IGV2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudC50YXJnZXQpID09PSBzY3J1YmJlclJlZi5jdXJyZW50O1xuICAgICAgbWVtbyA9IHRhcmdldElzU2NydWIgPyB2YWx1ZSA6IGludmVydGVkUmFuZ2UoKHggLSBsZWZ0KSAvIHdpZHRoLCBtaW4sIG1heCk7XG4gICAgfVxuICAgIGNvbnN0IG5ld1ZhbHVlID0gbWVtbyArIGludmVydGVkUmFuZ2UobXggLyByYW5nZVdpZHRoLmN1cnJlbnQsIDAsIG1heCAtIG1pbik7XG4gICAgb25EcmFnKHNhbml0aXplU3RlcCQxKG5ld1ZhbHVlLCB7XG4gICAgICBzdGVwLFxuICAgICAgaW5pdGlhbFZhbHVlXG4gICAgfSkpO1xuICAgIHJldHVybiBtZW1vO1xuICB9KTtcbiAgY29uc3QgcG9zID0gcmFuZ2UodmFsdWUsIG1pbiwgbWF4KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmFuZ2VXcmFwcGVyLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgYmluZCgpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChSYW5nZSwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChJbmRpY2F0b3IsIHtcbiAgICBzdHlsZToge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiBgJHsoMSAtIHBvcykgKiAxMDB9JWBcbiAgICB9XG4gIH0pKSwgUmVhY3QuY3JlYXRlRWxlbWVudChTY3J1YmJlciwge1xuICAgIHJlZjogc2NydWJiZXJSZWYsXG4gICAgc3R5bGU6IHtcbiAgICAgIGxlZnQ6IGBjYWxjKCR7cG9zfSAqICgxMDAlIC0gJHtzY3J1YmJlcldpZHRofSkpYFxuICAgIH1cbiAgfSkpO1xufVxuXG5jb25zdCBEcmFnZ2FibGVMYWJlbCA9IFJlYWN0Lm1lbW8oKHtcbiAgbGFiZWwsXG4gIG9uVXBkYXRlLFxuICBzdGVwLFxuICBpbm5lckxhYmVsVHJpbVxufSkgPT4ge1xuICBjb25zdCBbZHJhZ2dpbmcsIHNldERyYWdnaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgYmluZCA9IHVzZURyYWcoKHtcbiAgICBhY3RpdmUsXG4gICAgZGVsdGE6IFtkeF0sXG4gICAgZXZlbnQsXG4gICAgbWVtbzogX21lbW8gPSAwLFxuICAgIGZpcnN0LFxuICAgIGxhc3QsXG4gICAgdGFyZ2V0XG4gIH0pID0+IHtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIGNvbnN0IGxhYmVsID0gdGFyZ2V0O1xuICAgICAgbGFiZWwucmVxdWVzdFBvaW50ZXJMb2NrKCk7XG4gICAgfVxuICAgIGlmIChsYXN0KSB7XG4gICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2soKTtcbiAgICB9XG4gICAgc2V0RHJhZ2dpbmcoYWN0aXZlKTtcbiAgICBfbWVtbyArPSBkeCAvIDI7XG4gICAgaWYgKE1hdGguYWJzKF9tZW1vKSA+PSAxKSB7XG4gICAgICBvblVwZGF0ZSh2ID0+IHBhcnNlRmxvYXQodikgKyBNYXRoLmZsb29yKF9tZW1vKSAqIHN0ZXAgKiBtdWx0aXBseVN0ZXAoZXZlbnQpKTtcbiAgICAgIF9tZW1vID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIF9tZW1vO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5uZXJOdW1iZXJMYWJlbCwgX2V4dGVuZHMoe1xuICAgIGRyYWdnaW5nOiBkcmFnZ2luZyxcbiAgICB0aXRsZTogbGFiZWwubGVuZ3RoID4gMSA/IGxhYmVsIDogJydcbiAgfSwgYmluZCgpKSwgbGFiZWwuc2xpY2UoMCwgaW5uZXJMYWJlbFRyaW0pKTtcbn0pO1xuZnVuY3Rpb24gTnVtYmVyJDEoe1xuICBsYWJlbCxcbiAgaWQsXG4gIGRpc3BsYXlWYWx1ZSxcbiAgb25VcGRhdGUsXG4gIG9uQ2hhbmdlLFxuICBzZXR0aW5ncyxcbiAgaW5uZXJMYWJlbFRyaW0gPSAxXG59KSB7XG4gIGNvbnN0IElubmVyTGFiZWwgPSBpbm5lckxhYmVsVHJpbSA+IDAgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChEcmFnZ2FibGVMYWJlbCwge1xuICAgIGxhYmVsOiBsYWJlbCxcbiAgICBzdGVwOiBzZXR0aW5ncy5zdGVwLFxuICAgIG9uVXBkYXRlOiBvblVwZGF0ZSxcbiAgICBpbm5lckxhYmVsVHJpbTogaW5uZXJMYWJlbFRyaW1cbiAgfSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE51bWJlcklucHV0LCB7XG4gICAgaWQ6IGlkLFxuICAgIHZhbHVlOiBTdHJpbmcoZGlzcGxheVZhbHVlKSxcbiAgICBvblVwZGF0ZTogb25VcGRhdGUsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgIGlubmVyTGFiZWw6IElubmVyTGFiZWxcbiAgfSk7XG59XG5mdW5jdGlvbiBOdW1iZXJDb21wb25lbnQoKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlSW5wdXRDb250ZXh0KCk7XG4gIGNvbnN0IHtcbiAgICBsYWJlbCxcbiAgICB2YWx1ZSxcbiAgICBvblVwZGF0ZSxcbiAgICBzZXR0aW5ncyxcbiAgICBpZFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHtcbiAgICBtaW4sXG4gICAgbWF4XG4gIH0gPSBzZXR0aW5ncztcbiAgY29uc3QgaGFzUmFuZ2UgPSBtYXggIT09IEluZmluaXR5ICYmIG1pbiAhPT0gLUluZmluaXR5O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3csIHtcbiAgICBpbnB1dDogdHJ1ZVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KExhYmVsLCBudWxsLCBsYWJlbCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmFuZ2VHcmlkLCB7XG4gICAgaGFzUmFuZ2U6IGhhc1JhbmdlXG4gIH0sIGhhc1JhbmdlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmFuZ2VTbGlkZXIsIF9leHRlbmRzKHtcbiAgICB2YWx1ZTogcGFyc2VGbG9hdCh2YWx1ZSksXG4gICAgb25EcmFnOiBvblVwZGF0ZVxuICB9LCBzZXR0aW5ncykpLCBSZWFjdC5jcmVhdGVFbGVtZW50KE51bWJlciQxLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBpZDogaWQsXG4gICAgbGFiZWw6IFwidmFsdWVcIixcbiAgICBpbm5lckxhYmVsVHJpbTogaGFzUmFuZ2UgPyAwIDogMVxuICB9KSkpKTtcbn1cblxuY29uc3Qge1xuICAgIHNhbml0aXplU3RlcFxuICB9ID0gcHJvcHMkMyxcbiAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcyQzLCBbXCJzYW5pdGl6ZVN0ZXBcIl0pO1xudmFyIG51bWJlciA9IGNyZWF0ZUludGVybmFsUGx1Z2luKF9vYmplY3RTcHJlYWQyKHtcbiAgY29tcG9uZW50OiBOdW1iZXJDb21wb25lbnRcbn0sIHJlc3QpKTtcblxuY29uc3Qgc2NoZW1hJDIgPSAoX28sIHMpID0+IHY4bigpLnNjaGVtYSh7XG4gIG9wdGlvbnM6IHY4bigpLnBhc3Nlc0FueU9mKHY4bigpLm9iamVjdCgpLCB2OG4oKS5hcnJheSgpKVxufSkudGVzdChzKTtcbmNvbnN0IHNhbml0aXplJDIgPSAodmFsdWUsIHtcbiAgdmFsdWVzXG59KSA9PiB7XG4gIGlmICh2YWx1ZXMuaW5kZXhPZih2YWx1ZSkgPCAwKSB0aHJvdyBFcnJvcihgU2VsZWN0ZWQgdmFsdWUgZG9lc24ndCBtYXRjaCBTZWxlY3Qgb3B0aW9uc2ApO1xuICByZXR1cm4gdmFsdWU7XG59O1xuY29uc3QgZm9ybWF0ID0gKHZhbHVlLCB7XG4gIHZhbHVlc1xufSkgPT4ge1xuICByZXR1cm4gdmFsdWVzLmluZGV4T2YodmFsdWUpO1xufTtcbmNvbnN0IG5vcm1hbGl6ZSQxID0gaW5wdXQgPT4ge1xuICBsZXQge1xuICAgIHZhbHVlLFxuICAgIG9wdGlvbnNcbiAgfSA9IGlucHV0O1xuICBsZXQga2V5cztcbiAgbGV0IHZhbHVlcztcbiAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICB2YWx1ZXMgPSBvcHRpb25zO1xuICAgIGtleXMgPSBvcHRpb25zLm1hcChvID0+IFN0cmluZyhvKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyhvcHRpb25zKTtcbiAgICBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIH1cbiAgaWYgKCEoJ3ZhbHVlJyBpbiBpbnB1dCkpIHZhbHVlID0gdmFsdWVzWzBdO2Vsc2UgaWYgKCF2YWx1ZXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAga2V5cy51bnNoaWZ0KFN0cmluZyh2YWx1ZSkpO1xuICAgIHZhbHVlcy51bnNoaWZ0KHZhbHVlKTtcbiAgfVxuICBpZiAoIU9iamVjdC52YWx1ZXMob3B0aW9ucykuaW5jbHVkZXModmFsdWUpKSBvcHRpb25zW1N0cmluZyh2YWx1ZSldID0gdmFsdWU7XG4gIHJldHVybiB7XG4gICAgdmFsdWUsXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgIGtleXMsXG4gICAgICB2YWx1ZXNcbiAgICB9XG4gIH07XG59O1xuXG52YXIgcHJvcHMkMiA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBzY2hlbWE6IHNjaGVtYSQyLFxuICBzYW5pdGl6ZTogc2FuaXRpemUkMixcbiAgZm9ybWF0OiBmb3JtYXQsXG4gIG5vcm1hbGl6ZTogbm9ybWFsaXplJDFcbn0pO1xuXG5jb25zdCBTZWxlY3RDb250YWluZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgJGZsZXhDZW50ZXI6ICcnLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgJz4gc3ZnJzoge1xuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICByaWdodDogJyRtZCdcbiAgfVxufSk7XG5jb25zdCBOYXRpdmVTZWxlY3QgPSBzdHlsZWQoJ3NlbGVjdCcsIHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIG9wYWNpdHk6IDBcbn0pO1xuY29uc3QgUHJlc2VudGF0aW9uYWxTZWxlY3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnJHJvd0hlaWdodCcsXG4gIGJhY2tncm91bmRDb2xvcjogJyRlbGV2YXRpb24zJyxcbiAgYm9yZGVyUmFkaXVzOiAnJHNtJyxcbiAgcGFkZGluZzogJzAgJHNtJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIFtgJHtOYXRpdmVTZWxlY3R9OmZvY3VzICsgJmBdOiB7XG4gICAgJGZvY3VzU3R5bGU6ICcnXG4gIH0sXG4gIFtgJHtOYXRpdmVTZWxlY3R9OmhvdmVyICsgJmBdOiB7XG4gICAgJGhvdmVyU3R5bGU6ICcnXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBTZWxlY3Qoe1xuICBkaXNwbGF5VmFsdWUsXG4gIHZhbHVlLFxuICBvblVwZGF0ZSxcbiAgaWQsXG4gIHNldHRpbmdzLFxuICBkaXNhYmxlZFxufSkge1xuICBjb25zdCB7XG4gICAga2V5cyxcbiAgICB2YWx1ZXNcbiAgfSA9IHNldHRpbmdzO1xuICBjb25zdCBsYXN0RGlzcGxheWVkVmFsdWUgPSB1c2VSZWYoKTtcblxuICBpZiAodmFsdWUgPT09IHZhbHVlc1tkaXNwbGF5VmFsdWVdKSB7XG4gICAgbGFzdERpc3BsYXllZFZhbHVlLmN1cnJlbnQgPSBrZXlzW2Rpc3BsYXlWYWx1ZV07XG4gIH1cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0Q29udGFpbmVyLCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdGl2ZVNlbGVjdCwge1xuICAgIGlkOiBpZCxcbiAgICB2YWx1ZTogZGlzcGxheVZhbHVlLFxuICAgIG9uQ2hhbmdlOiBlID0+IG9uVXBkYXRlKHZhbHVlc1tOdW1iZXIoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKV0pLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9LCBrZXlzLm1hcCgoa2V5LCBpbmRleCkgPT4gUmVhY3QuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XG4gICAga2V5OiBrZXksXG4gICAgdmFsdWU6IGluZGV4XG4gIH0sIGtleSkpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChQcmVzZW50YXRpb25hbFNlbGVjdCwgbnVsbCwgbGFzdERpc3BsYXllZFZhbHVlLmN1cnJlbnQpLCBSZWFjdC5jcmVhdGVFbGVtZW50KENoZXZyb24sIHtcbiAgICB0b2dnbGVkOiB0cnVlXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIFNlbGVjdENvbXBvbmVudCgpIHtcbiAgY29uc3Qge1xuICAgIGxhYmVsLFxuICAgIHZhbHVlLFxuICAgIGRpc3BsYXlWYWx1ZSxcbiAgICBvblVwZGF0ZSxcbiAgICBpZCxcbiAgICBkaXNhYmxlZCxcbiAgICBzZXR0aW5nc1xuICB9ID0gdXNlSW5wdXRDb250ZXh0KCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdywge1xuICAgIGlucHV0OiB0cnVlXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGFiZWwsIG51bGwsIGxhYmVsKSwgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHtcbiAgICBpZDogaWQsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGRpc3BsYXlWYWx1ZTogZGlzcGxheVZhbHVlLFxuICAgIG9uVXBkYXRlOiBvblVwZGF0ZSxcbiAgICBzZXR0aW5nczogc2V0dGluZ3MsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0pKTtcbn1cblxudmFyIHNlbGVjdCA9IGNyZWF0ZUludGVybmFsUGx1Z2luKF9vYmplY3RTcHJlYWQyKHtcbiAgY29tcG9uZW50OiBTZWxlY3RDb21wb25lbnRcbn0sIHByb3BzJDIpKTtcblxuY29uc3Qgc2NoZW1hJDEgPSBvID0+IHY4bigpLnN0cmluZygpLnRlc3Qobyk7XG5jb25zdCBzYW5pdGl6ZSQxID0gdiA9PiB7XG4gIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHRocm93IEVycm9yKGBJbnZhbGlkIHN0cmluZ2ApO1xuICByZXR1cm4gdjtcbn07XG5jb25zdCBub3JtYWxpemUgPSAoe1xuICB2YWx1ZSxcbiAgZWRpdGFibGU6IF9lZGl0YWJsZSA9IHRydWUsXG4gIHJvd3M6IF9yb3dzID0gZmFsc2Vcbn0pID0+IHtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZSxcbiAgICBzZXR0aW5nczoge1xuICAgICAgZWRpdGFibGU6IF9lZGl0YWJsZSxcbiAgICAgIHJvd3M6IHR5cGVvZiBfcm93cyA9PT0gJ251bWJlcicgPyBfcm93cyA6IF9yb3dzID8gNSA6IDBcbiAgICB9XG4gIH07XG59O1xuXG52YXIgcHJvcHMkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBzY2hlbWE6IHNjaGVtYSQxLFxuICBzYW5pdGl6ZTogc2FuaXRpemUkMSxcbiAgbm9ybWFsaXplOiBub3JtYWxpemVcbn0pO1xuXG5jb25zdCBfZXhjbHVkZWQkMiA9IFtcImRpc3BsYXlWYWx1ZVwiLCBcIm9uVXBkYXRlXCIsIFwib25DaGFuZ2VcIiwgXCJlZGl0YWJsZVwiXTtcbmNvbnN0IE5vbkVkaXRhYmxlU3RyaW5nID0gc3R5bGVkKCdkaXYnLCB7XG4gIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCdcbn0pO1xuZnVuY3Rpb24gU3RyaW5nJDEoX3JlZikge1xuICBsZXQge1xuICAgICAgZGlzcGxheVZhbHVlLFxuICAgICAgb25VcGRhdGUsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIGVkaXRhYmxlID0gdHJ1ZVxuICAgIH0gPSBfcmVmLFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCQyKTtcbiAgaWYgKGVkaXRhYmxlKSByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChWYWx1ZUlucHV0LCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IGRpc3BsYXlWYWx1ZSxcbiAgICBvblVwZGF0ZTogb25VcGRhdGUsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gIH0sIHByb3BzKSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE5vbkVkaXRhYmxlU3RyaW5nLCBudWxsLCBkaXNwbGF5VmFsdWUpO1xufVxuZnVuY3Rpb24gU3RyaW5nQ29tcG9uZW50KCkge1xuICBjb25zdCB7XG4gICAgbGFiZWwsXG4gICAgc2V0dGluZ3MsXG4gICAgZGlzcGxheVZhbHVlLFxuICAgIG9uVXBkYXRlLFxuICAgIG9uQ2hhbmdlXG4gIH0gPSB1c2VJbnB1dENvbnRleHQoKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm93LCB7XG4gICAgaW5wdXQ6IHRydWVcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChMYWJlbCwgbnVsbCwgbGFiZWwpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFN0cmluZyQxLCBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheVZhbHVlOiBkaXNwbGF5VmFsdWUsXG4gICAgb25VcGRhdGU6IG9uVXBkYXRlLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICB9LCBzZXR0aW5ncykpKTtcbn1cblxudmFyIHN0cmluZyA9IGNyZWF0ZUludGVybmFsUGx1Z2luKF9vYmplY3RTcHJlYWQyKHtcbiAgY29tcG9uZW50OiBTdHJpbmdDb21wb25lbnRcbn0sIHByb3BzJDEpKTtcblxuY29uc3Qgc2NoZW1hID0gbyA9PiB2OG4oKS5ib29sZWFuKCkudGVzdChvKTtcbmNvbnN0IHNhbml0aXplID0gdiA9PiB7XG4gIGlmICh0eXBlb2YgdiAhPT0gJ2Jvb2xlYW4nKSB0aHJvdyBFcnJvcignSW52YWxpZCBib29sZWFuJyk7XG4gIHJldHVybiB2O1xufTtcblxudmFyIHByb3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIHNjaGVtYTogc2NoZW1hLFxuICBzYW5pdGl6ZTogc2FuaXRpemVcbn0pO1xuXG5jb25zdCBTdHlsZWRJbnB1dFdyYXBwZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICRmbGV4OiAnJyxcbiAgaGVpZ2h0OiAnJHJvd0hlaWdodCcsXG4gIGlucHV0OiB7XG4gICAgJHJlc2V0OiAnJyxcbiAgICBoZWlnaHQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgb3BhY2l0eTogMCxcbiAgICBtYXJnaW46IDBcbiAgfSxcbiAgbGFiZWw6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAkZmxleENlbnRlcjogJycsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGhlaWdodDogJyRjaGVja2JveFNpemUnLFxuICAgIHdpZHRoOiAnJGNoZWNrYm94U2l6ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnJGVsZXZhdGlvbjMnLFxuICAgIGJvcmRlclJhZGl1czogJyRzbScsXG4gICAgJGhvdmVyOiAnJ1xuICB9LFxuICAnaW5wdXQ6Zm9jdXMgKyBsYWJlbCc6IHtcbiAgICAkZm9jdXNTdHlsZTogJydcbiAgfSxcbiAgJ2lucHV0OmZvY3VzOmNoZWNrZWQgKyBsYWJlbCwgaW5wdXQ6Y2hlY2tlZCArIGxhYmVsOmhvdmVyJzoge1xuICAgICRob3ZlclN0eWxlOiAnJGFjY2VudDMnXG4gIH0sXG4gICdpbnB1dCArIGxhYmVsOmFjdGl2ZSc6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICckYWNjZW50MSdcbiAgfSxcbiAgJ2lucHV0OmNoZWNrZWQgKyBsYWJlbDphY3RpdmUnOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnJGFjY2VudDEnXG4gIH0sXG4gICdsYWJlbCA+IHN2Zyc6IHtcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgd2lkdGg6ICc5MCUnLFxuICAgIGhlaWdodDogJzkwJScsXG4gICAgc3Ryb2tlOiAnJGhpZ2hsaWdodDMnXG4gIH0sXG4gICdpbnB1dDpjaGVja2VkICsgbGFiZWwnOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnJGFjY2VudDInXG4gIH0sXG4gICdpbnB1dDpjaGVja2VkICsgbGFiZWwgPiBzdmcnOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9XG59KTtcblxuZnVuY3Rpb24gQm9vbGVhbih7XG4gIHZhbHVlLFxuICBvblVwZGF0ZSxcbiAgaWQsXG4gIGRpc2FibGVkXG59KSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlZElucHV0V3JhcHBlciwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICBpZDogaWQsXG4gICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgIGNoZWNrZWQ6IHZhbHVlLFxuICAgIG9uQ2hhbmdlOiBlID0+IG9uVXBkYXRlKGUuY3VycmVudFRhcmdldC5jaGVja2VkKSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgaHRtbEZvcjogaWRcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIixcbiAgICBzdHJva2VXaWR0aDogMixcbiAgICBkOiBcIk01IDEzbDQgNEwxOSA3XCJcbiAgfSkpKSk7XG59XG5mdW5jdGlvbiBCb29sZWFuQ29tcG9uZW50KCkge1xuICBjb25zdCB7XG4gICAgbGFiZWwsXG4gICAgdmFsdWUsXG4gICAgb25VcGRhdGUsXG4gICAgZGlzYWJsZWQsXG4gICAgaWRcbiAgfSA9IHVzZUlucHV0Q29udGV4dCgpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3csIHtcbiAgICBpbnB1dDogdHJ1ZVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KExhYmVsLCBudWxsLCBsYWJlbCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQm9vbGVhbiwge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBvblVwZGF0ZTogb25VcGRhdGUsXG4gICAgaWQ6IGlkLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9KSk7XG59XG5cbnZhciBib29sZWFuID0gY3JlYXRlSW50ZXJuYWxQbHVnaW4oX29iamVjdFNwcmVhZDIoe1xuICBjb21wb25lbnQ6IEJvb2xlYW5Db21wb25lbnRcbn0sIHByb3BzKSk7XG5cbmNvbnN0IF9leGNsdWRlZCQxID0gW1wibG9ja2VkXCJdO1xuZnVuY3Rpb24gQ29vcmRpbmF0ZSh7XG4gIHZhbHVlLFxuICBpZCxcbiAgdmFsdWVLZXksXG4gIHNldHRpbmdzLFxuICBvblVwZGF0ZSxcbiAgaW5uZXJMYWJlbFRyaW1cbn0pIHtcblxuICBjb25zdCB2YWx1ZVJlZiA9IHVzZVJlZih2YWx1ZVt2YWx1ZUtleV0pO1xuICB2YWx1ZVJlZi5jdXJyZW50ID0gdmFsdWVbdmFsdWVLZXldO1xuICBjb25zdCBzZXRWYWx1ZSA9IHVzZUNhbGxiYWNrKG5ld1ZhbHVlID0+XG4gIG9uVXBkYXRlKHtcbiAgICBbdmFsdWVLZXldOiBzYW5pdGl6ZVZhbHVlKHtcbiAgICAgIHR5cGU6ICdOVU1CRVInLFxuICAgICAgdmFsdWU6IHZhbHVlUmVmLmN1cnJlbnQsXG4gICAgICBzZXR0aW5nc1xuICAgIH0sIG5ld1ZhbHVlKVxuICB9KSwgW29uVXBkYXRlLCBzZXR0aW5ncywgdmFsdWVLZXldKTtcbiAgY29uc3QgbnVtYmVyID0gdXNlSW5wdXRTZXR0ZXJzKHtcbiAgICB0eXBlOiAnTlVNQkVSJyxcbiAgICB2YWx1ZTogdmFsdWVbdmFsdWVLZXldLFxuICAgIHNldHRpbmdzLFxuICAgIHNldFZhbHVlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChOdW1iZXIkMSwge1xuICAgIGlkOiBpZCxcbiAgICBsYWJlbDogdmFsdWVLZXksXG4gICAgdmFsdWU6IHZhbHVlW3ZhbHVlS2V5XSxcbiAgICBkaXNwbGF5VmFsdWU6IG51bWJlci5kaXNwbGF5VmFsdWUsXG4gICAgb25VcGRhdGU6IG51bWJlci5vblVwZGF0ZSxcbiAgICBvbkNoYW5nZTogbnVtYmVyLm9uQ2hhbmdlLFxuICAgIHNldHRpbmdzOiBzZXR0aW5ncyxcbiAgICBpbm5lckxhYmVsVHJpbTogaW5uZXJMYWJlbFRyaW1cbiAgfSk7XG59XG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgZGlzcGxheTogJ2dyaWQnLFxuICBjb2x1bW5HYXA6ICckY29sR2FwJyxcbiAgZ3JpZEF1dG9GbG93OiAnY29sdW1uIGRlbnNlJyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHZhcmlhbnRzOiB7XG4gICAgd2l0aExvY2s6IHtcbiAgICAgIHRydWU6IHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzEwcHggYXV0bycsXG4gICAgICAgICc+IHN2Zyc6IHtcbiAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gTG9jayhfcmVmKSB7XG4gIGxldCB7XG4gICAgICBsb2NrZWRcbiAgICB9ID0gX3JlZixcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQkMSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB3aWR0aDogXCIxMFwiLFxuICAgIGhlaWdodDogXCIxMFwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDE1IDE1XCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB9LCBwcm9wcyksIGxvY2tlZCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk01IDQuNjM2MDFDNSAzLjc2MDMxIDUuMjQyMTkgMy4xMDU0IDUuNjQzMjMgMi42NzM1N0M2LjAzOTM0IDIuMjQ3MDUgNi42NDU4MiAxLjk3ODMgNy41MDE0IDEuOTc4M0M4LjM1NzQ1IDEuOTc4MyA4Ljk2MzA2IDIuMjQ2NTIgOS4zNTgyMyAyLjY3MjA4QzkuNzU4MzggMy4xMDI5OSAxMCAzLjc1NzA4IDEwIDQuNjMzMjVWNS45OTk5OUg1VjQuNjM2MDFaTTQgNS45OTk5OVY0LjYzNjAxQzQgMy41ODE0OCA0LjI5MzM5IDIuNjU3NTQgNC45MTA0OSAxLjk5MzA3QzUuNTMyNTIgMS4zMjMyOSA2LjQyNjc1IDAuOTc4MzAyIDcuNTAxNCAwLjk3ODMwMkM4LjU3NTgzIDAuOTc4MzAyIDkuNDY5NTIgMS4zMjIzMyAxMC4wOTEgMS45OTE2MkMxMC43MDc2IDIuNjU1NTcgMTEgMy41Nzg5NiAxMSA0LjYzMzI1VjUuOTk5OTlIMTJDMTIuNTUyMyA1Ljk5OTk5IDEzIDYuNDQ3NzEgMTMgNi45OTk5OVYxM0MxMyAxMy41NTIzIDEyLjU1MjMgMTQgMTIgMTRIM0MyLjQ0NzcyIDE0IDIgMTMuNTUyMyAyIDEzVjYuOTk5OTlDMiA2LjQ0NzcxIDIuNDQ3NzIgNS45OTk5OSAzIDUuOTk5OTlINFpNMyA2Ljk5OTk5SDEyVjEzSDNWNi45OTk5OVpcIixcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCJcbiAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNOSAzLjYzNjAxQzkgMi43NjA0NCA5LjI0MjA3IDIuMTEyMTEgOS42NDE1NCAxLjY4NjIzQzEwLjAzNjYgMS4yNjUwMiAxMC42NDMyIDEgMTEuNTAxNCAxQzEyLjQ0ODUgMSAxMy4wODM5IDEuMzA1NTIgMTMuNDcyMiAxLjgwNjM2QzEzLjgwMzEgMi4yMzMxMiAxNCAyLjg0MzEzIDE0IDMuNjMzMjVIMTVDMTUgMi42ODI0MiAxNC43NjI2IDEuODM4NTYgMTQuMjYyNSAxLjE5MzYxQzEzLjYzODkgMC4zODk0MyAxMi42NzQzIDAgMTEuNTAxNCAwQzEwLjQyOTQgMCA5LjUzNTIzIDAuMzM3ODcxIDguOTEyMTggMS4wMDIxQzguMjkzNTEgMS42NjE2NyA4IDIuNTgxMzUgOCAzLjYzNjAxVjZIMUMwLjQ0NzcxNSA2IDAgNi40NDc3MiAwIDdWMTNDMCAxMy41NTIzIDAuNDQ3NzE1IDE0IDEgMTRIMTBDMTAuNTUyMyAxNCAxMSAxMy41NTIzIDExIDEzVjdDMTEgNi40NDc3MiAxMC41NTIzIDYgMTAgNkg5VjMuNjM2MDFaTTEgN0gxMFYxM0gxVjdaXCIsXG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIFZlY3Rvcih7XG4gIHZhbHVlLFxuICBvblVwZGF0ZSxcbiAgc2V0dGluZ3MsXG4gIGlubmVyTGFiZWxUcmltXG59KSB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICBzZXRTZXR0aW5nc1xuICB9ID0gdXNlSW5wdXRDb250ZXh0KCk7XG5cbiAgY29uc3Qge1xuICAgIGxvY2ssXG4gICAgbG9ja2VkXG4gIH0gPSBzZXR0aW5ncztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCB7XG4gICAgd2l0aExvY2s6IGxvY2tcbiAgfSwgbG9jayAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KExvY2ssIHtcbiAgICBsb2NrZWQ6IGxvY2tlZCxcbiAgICBvbkNsaWNrOiAoKSA9PiBzZXRTZXR0aW5ncyh7XG4gICAgICBsb2NrZWQ6ICFsb2NrZWRcbiAgICB9KVxuICB9KSwgT2JqZWN0LmtleXModmFsdWUpLm1hcCgoa2V5LCBpKSA9PiBSZWFjdC5jcmVhdGVFbGVtZW50KENvb3JkaW5hdGUsIHtcbiAgICBpZDogaSA9PT0gMCA/IGlkIDogYCR7aWR9LiR7a2V5fWAsXG4gICAga2V5OiBrZXksXG4gICAgdmFsdWVLZXk6IGtleSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgc2V0dGluZ3M6IHNldHRpbmdzW2tleV0sXG4gICAgb25VcGRhdGU6IG9uVXBkYXRlLFxuICAgIGlubmVyTGFiZWxUcmltOiBpbm5lckxhYmVsVHJpbVxuICB9KSkpO1xufVxuXG5jb25zdCBub3JtYWxpemVLZXllZE51bWJlclNldHRpbmdzID0gKHZhbHVlLCBzZXR0aW5ncykgPT4ge1xuICBjb25zdCBfc2V0dGluZ3MgPSB7fTtcbiAgbGV0IG1heFN0ZXAgPSAwO1xuICBsZXQgbWluUGFkID0gSW5maW5pdHk7XG4gIE9iamVjdC5lbnRyaWVzKHZhbHVlKS5mb3JFYWNoKChba2V5LCB2XSkgPT4ge1xuICAgIF9zZXR0aW5nc1trZXldID0gbm9ybWFsaXplJDIoX29iamVjdFNwcmVhZDIoe1xuICAgICAgdmFsdWU6IHZcbiAgICB9LCBzZXR0aW5nc1trZXldKSkuc2V0dGluZ3M7XG4gICAgbWF4U3RlcCA9IE1hdGgubWF4KG1heFN0ZXAsIF9zZXR0aW5nc1trZXldLnN0ZXApO1xuICAgIG1pblBhZCA9IE1hdGgubWluKG1pblBhZCwgX3NldHRpbmdzW2tleV0ucGFkKTtcbiAgfSk7XG5cbiAgZm9yIChsZXQga2V5IGluIF9zZXR0aW5ncykge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0ZXAsXG4gICAgICBtaW4sXG4gICAgICBtYXhcbiAgICB9ID0gc2V0dGluZ3Nba2V5XSB8fCB7fTtcbiAgICBpZiAoIWlzRmluaXRlKHN0ZXApICYmICghaXNGaW5pdGUobWluKSB8fCAhaXNGaW5pdGUobWF4KSkpIHtcbiAgICAgIF9zZXR0aW5nc1trZXldLnN0ZXAgPSBtYXhTdGVwO1xuICAgICAgX3NldHRpbmdzW2tleV0ucGFkID0gbWluUGFkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX3NldHRpbmdzO1xufTtcblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wibG9ja1wiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcInZhbHVlXCJdO1xuZnVuY3Rpb24gZ2V0VmVjdG9yU2NoZW1hKGRpbWVuc2lvbikge1xuICBjb25zdCBpc1ZlY3RvckFycmF5ID0gdjhuKCkuYXJyYXkoKS5sZW5ndGgoZGltZW5zaW9uKS5ldmVyeS5udW1iZXIoKTtcblxuICBjb25zdCBpc1ZlY3Rvck9iamVjdCA9IG8gPT4ge1xuICAgIGlmICghbyB8fCB0eXBlb2YgbyAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKG8pO1xuICAgIHJldHVybiB2YWx1ZXMubGVuZ3RoID09PSBkaW1lbnNpb24gJiYgdmFsdWVzLmV2ZXJ5KHYgPT4gaXNGaW5pdGUodikpO1xuICB9O1xuICByZXR1cm4gbyA9PiB7XG4gICAgcmV0dXJuIGlzVmVjdG9yQXJyYXkudGVzdChvKSB8fCBpc1ZlY3Rvck9iamVjdChvKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VmVjdG9yVHlwZSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyAnYXJyYXknIDogJ29iamVjdCc7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnQodmFsdWUsIGZvcm1hdCwga2V5cykge1xuICBpZiAoZ2V0VmVjdG9yVHlwZSh2YWx1ZSkgPT09IGZvcm1hdCkgcmV0dXJuIHZhbHVlO1xuICByZXR1cm4gZm9ybWF0ID09PSAnYXJyYXknID8gT2JqZWN0LnZhbHVlcyh2YWx1ZSkgOiBtYXBBcnJheVRvS2V5cyh2YWx1ZSwga2V5cyk7XG59XG5cbmNvbnN0IHNhbml0aXplVmVjdG9yID0gKHZhbHVlLCBzZXR0aW5ncywgcHJldmlvdXNWYWx1ZSkgPT4ge1xuICBjb25zdCBfdmFsdWUgPSBjb252ZXJ0KHZhbHVlLCAnb2JqZWN0Jywgc2V0dGluZ3Mua2V5cyk7XG4gIGZvciAobGV0IGtleSBpbiBfdmFsdWUpIF92YWx1ZVtrZXldID0gc2FuaXRpemUkMyhfdmFsdWVba2V5XSwgc2V0dGluZ3Nba2V5XSk7XG5cbiAgY29uc3QgX3ZhbHVlS2V5cyA9IE9iamVjdC5rZXlzKF92YWx1ZSk7XG4gIGxldCBuZXdWYWx1ZSA9IHt9O1xuXG4gIGlmIChfdmFsdWVLZXlzLmxlbmd0aCA9PT0gc2V0dGluZ3Mua2V5cy5sZW5ndGgpIG5ld1ZhbHVlID0gX3ZhbHVlO1xuICBlbHNlIHtcbiAgICBjb25zdCBfcHJldmlvdXNWYWx1ZSA9IGNvbnZlcnQocHJldmlvdXNWYWx1ZSwgJ29iamVjdCcsIHNldHRpbmdzLmtleXMpO1xuICAgIGlmIChfdmFsdWVLZXlzLmxlbmd0aCA9PT0gMSAmJiBzZXR0aW5ncy5sb2NrZWQpIHtcbiAgICAgIGNvbnN0IGxvY2tlZEtleSA9IF92YWx1ZUtleXNbMF07XG4gICAgICBjb25zdCBsb2NrZWRDb29yZGluYXRlID0gX3ZhbHVlW2xvY2tlZEtleV07XG4gICAgICBjb25zdCBwcmV2aW91c0xvY2tlZENvb3JkaW5hdGUgPSBfcHJldmlvdXNWYWx1ZVtsb2NrZWRLZXldO1xuICAgICAgY29uc3QgcmF0aW8gPSBwcmV2aW91c0xvY2tlZENvb3JkaW5hdGUgIT09IDAgPyBsb2NrZWRDb29yZGluYXRlIC8gcHJldmlvdXNMb2NrZWRDb29yZGluYXRlIDogMTtcbiAgICAgIGZvciAobGV0IGtleSBpbiBfcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICBpZiAoa2V5ID09PSBsb2NrZWRLZXkpIG5ld1ZhbHVlW2xvY2tlZEtleV0gPSBsb2NrZWRDb29yZGluYXRlO1xuICAgICAgICBlbHNlIG5ld1ZhbHVlW2tleV0gPSBfcHJldmlvdXNWYWx1ZVtrZXldICogcmF0aW87XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbHVlID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIF9wcmV2aW91c1ZhbHVlKSwgX3ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbnZlcnQobmV3VmFsdWUsIHNldHRpbmdzLmZvcm1hdCwgc2V0dGluZ3Mua2V5cyk7XG59O1xuXG5jb25zdCBmb3JtYXRWZWN0b3IgPSAodmFsdWUsIHNldHRpbmdzKSA9PiBjb252ZXJ0KHZhbHVlLCAnb2JqZWN0Jywgc2V0dGluZ3Mua2V5cyk7XG5cbmNvbnN0IGlzTnVtYmVyU2V0dGluZ3MgPSBvID0+ICEhbyAmJiAoJ3N0ZXAnIGluIG8gfHwgJ21pbicgaW4gbyB8fCAnbWF4JyBpbiBvKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplVmVjdG9yKHZhbHVlLCBzZXR0aW5ncywgZGVmYXVsdEtleXMgPSBbXSkge1xuICBjb25zdCB7XG4gICAgICBsb2NrID0gZmFsc2VcbiAgICB9ID0gc2V0dGluZ3MsXG4gICAgX3NldHRpbmdzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNldHRpbmdzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBmb3JtYXQgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/ICdhcnJheScgOiAnb2JqZWN0JztcbiAgY29uc3Qga2V5cyA9IGZvcm1hdCA9PT0gJ29iamVjdCcgPyBPYmplY3Qua2V5cyh2YWx1ZSkgOiBkZWZhdWx0S2V5cztcbiAgY29uc3QgX3ZhbHVlID0gY29udmVydCh2YWx1ZSwgJ29iamVjdCcsIGtleXMpO1xuXG4gIGNvbnN0IG1lcmdlZFNldHRpbmdzID0gaXNOdW1iZXJTZXR0aW5ncyhfc2V0dGluZ3MpID8ga2V5cy5yZWR1Y2UoKGFjYywgaykgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICBba106IF9zZXR0aW5nc1xuICB9KSwge30pIDogX3NldHRpbmdzO1xuICBjb25zdCBudW1iZXJTZXR0aW5ncyA9IG5vcm1hbGl6ZUtleWVkTnVtYmVyU2V0dGluZ3MoX3ZhbHVlLCBtZXJnZWRTZXR0aW5ncyk7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IGZvcm1hdCA9PT0gJ2FycmF5JyA/IHZhbHVlIDogX3ZhbHVlLFxuICAgIHNldHRpbmdzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbnVtYmVyU2V0dGluZ3MpLCB7fSwge1xuICAgICAgZm9ybWF0LFxuICAgICAga2V5cyxcbiAgICAgIGxvY2ssXG4gICAgICBsb2NrZWQ6IGZhbHNlXG4gICAgfSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFZlY3RvclBsdWdpbihkZWZhdWx0S2V5cykge1xuICByZXR1cm4ge1xuICAgIHNjaGVtYTogZ2V0VmVjdG9yU2NoZW1hKGRlZmF1bHRLZXlzLmxlbmd0aCksXG4gICAgbm9ybWFsaXplOiBfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSA9IF9yZWYsXG4gICAgICAgIHNldHRpbmdzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZDIpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVZlY3Rvcih2YWx1ZSwgc2V0dGluZ3MsIGRlZmF1bHRLZXlzKTtcbiAgICB9LFxuICAgIGZvcm1hdDogKHZhbHVlLCBzZXR0aW5ncykgPT4gZm9ybWF0VmVjdG9yKHZhbHVlLCBzZXR0aW5ncyksXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgc2V0dGluZ3MsIHByZXZWYWx1ZSkgPT4gc2FuaXRpemVWZWN0b3IodmFsdWUsIHNldHRpbmdzLCBwcmV2VmFsdWUpXG4gIH07XG59XG5cbmV4cG9ydCB7IFRoZW1lQ29udGV4dCBhcyAkLCB1c2VJbnB1dFNldHRlcnMgYXMgQSwgUGx1Z2lucyBhcyBCLCBJbnB1dENvbnRleHQgYXMgQywgU3R5bGVkSW5wdXRXcmFwcGVyJDEgYXMgRCwgdXNlU3RvcmVDb250ZXh0IGFzIEUsIHVzZUNhbnZhczJkIGFzIEYsIHVzZUlucHV0IGFzIEcsIGxvZyBhcyBILCBJbmRpY2F0b3IgYXMgSSwgU3R5bGVkVGl0bGUgYXMgSiwgQ2hldnJvbiBhcyBLLCBMYWJlbCBhcyBMLCBTdHlsZWRXcmFwcGVyIGFzIE0sIFN0eWxlZENvbnRlbnQgYXMgTiwgT3ZlcmxheSBhcyBPLCBQb3J0YWwgYXMgUCwgU3R5bGVkRm9sZGVyIGFzIFEsIFJvdyBhcyBSLCBTY3J1YmJlciBhcyBTLCBTdHlsZWRJbnB1dFJvdyBhcyBULCBkZWJvdW5jZSBhcyBVLCBWYWx1ZUlucHV0IGFzIFYsIGdsb2JhbFN0eWxlcyBhcyBXLCBQYW5lbFNldHRpbmdzQ29udGV4dCBhcyBYLCBTdG9yZUNvbnRleHQgYXMgWSwgbWVyZ2VUaGVtZSBhcyBaLCBfb2JqZWN0U3ByZWFkMiBhcyBfLCBWZWN0b3IgYXMgYSwgcmVnaXN0ZXIgYXMgYTAsIExldmFJbnB1dHMgYXMgYTEsIHNlbGVjdCBhcyBhMiwgbnVtYmVyIGFzIGEzLCBzdHJpbmcgYXMgYTQsIGJvb2xlYW4gYXMgYTUsIExldmFTdG9yZVByb3ZpZGVyIGFzIGE2LCBTdHJpbmckMSBhcyBhNywgTnVtYmVyJDEgYXMgYTgsIEJvb2xlYW4gYXMgYTksIFNlbGVjdCBhcyBhYSwgSW5uZXJMYWJlbCBhcyBhYiwgcGFkIGFzIGFjLCBldmFsdWF0ZSBhcyBhZCwgY3JlYXRlUGx1Z2luIGFzIGFlLCBrZXlmcmFtZXMgYXMgYWYsIGdldFZlY3RvclNjaGVtYSBhcyBhZywgZ2V0VmVjdG9yVHlwZSBhcyBhaCwgc2FuaXRpemVWZWN0b3IgYXMgYWksIGZvcm1hdFZlY3RvciBhcyBhaiwgbm9ybWFsaXplVmVjdG9yIGFzIGFrLCB1c2VUcmFuc2Zvcm0gYXMgYiwgY3JlYXRlSW50ZXJuYWxQbHVnaW4gYXMgYywgdXNlVGggYXMgZCwgdXNlRHJhZyBhcyBlLCBfZXh0ZW5kcyBhcyBmLCBnZXRWZWN0b3JQbHVnaW4gYXMgZywgY2xhbXAgYXMgaCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGFzIGksIGludmVydGVkUmFuZ2UgYXMgaiwgc2FuaXRpemVTdGVwIGFzIGssIFJhbmdlV3JhcHBlciBhcyBsLCBtdWx0aXBseVN0ZXAgYXMgbSwgbm9ybWFsaXplS2V5ZWROdW1iZXJTZXR0aW5ncyBhcyBuLCBvbWl0IGFzIG8sIHBpY2sgYXMgcCwgUmFuZ2UgYXMgcSwgcmFuZ2UgYXMgciwgc3R5bGVkIGFzIHMsIGdldFVpZCBhcyB0LCB1c2VJbnB1dENvbnRleHQgYXMgdSwgU3BlY2lhbElucHV0cyBhcyB2LCB3YXJuIGFzIHcsIExldmFFcnJvcnMgYXMgeCwgdXBkYXRlSW5wdXQgYXMgeSwgbm9ybWFsaXplSW5wdXQgYXMgeiB9O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VSZWYiLCJ1c2VDYWxsYmFjayIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiUCIsImRlcXVhbCIsInNoYWxsb3ciLCJ2OG4iLCJjcmVhdGVTdGl0Y2hlcyIsInVzZURyYWciLCJ1c2VEcmFnJDEiLCJSYWRpeFRvb2x0aXAiLCJBcnJvdyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlIiwiZXhjbHVkZWQiLCJ0YXJnZXQiLCJzb3VyY2VLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImkiLCJsZW5ndGgiLCJpbmRleE9mIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3RvdHlwZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY2FsbCIsIkxldmFFcnJvcnMiLCJFcnJvckxpc3QiLCJVTlNVUFBPUlRFRF9JTlBVVCIsInR5cGUiLCJwYXRoIiwiTk9fQ09NUE9ORU5UX0ZPUl9UWVBFIiwiVU5LTk9XTl9JTlBVVCIsInZhbHVlIiwiRFVQTElDQVRFX0tFWVMiLCJwcmV2UGF0aCIsIkFMUkVBRFlfUkVHSVNURVJFRF9UWVBFIiwiQ0xJUEJPQVJEX0VSUk9SIiwiVEhFTUVfRVJST1IiLCJjYXRlZ29yeSIsIlBBVEhfRE9FU05UX0VYSVNUIiwiSU5QVVRfVFlQRV9PVkVSUklERSIsIndyb25nVHlwZSIsIkVNUFRZX0tFWSIsIl9sb2ciLCJmbiIsImVycm9yVHlwZSIsImFyZ3MiLCJtZXNzYWdlIiwicmVzdCIsImNvbnNvbGUiLCJ3YXJuIiwiYmluZCIsImxvZyIsIl9leGNsdWRlZCRhIiwiX2V4Y2x1ZGVkMiQ0IiwiX2V4Y2x1ZGVkMyQxIiwiU2NoZW1hcyIsIlBsdWdpbnMiLCJnZXRWYWx1ZVR5cGUiLCJfcmVmIiwic2V0dGluZ3MiLCJjaGVja2VyIiwidW5kZWZpbmVkIiwicmVnaXN0ZXIiLCJfcmVmMiIsInNjaGVtYSIsInBsdWdpbiIsInB1c2giLCJnZXRVbmlxdWVUeXBlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiY3JlYXRlSW50ZXJuYWxQbHVnaW4iLCJjcmVhdGVQbHVnaW4iLCJpbnB1dCIsIl9fY3VzdG9tSW5wdXQiLCJub3JtYWxpemUkMyIsImRhdGEiLCJub3JtYWxpemUiLCJfbm9ybWFsaXplIiwic2FuaXRpemUkNCIsInByZXZWYWx1ZSIsInN0b3JlIiwic2FuaXRpemUiLCJmb3JtYXQkMiIsImZvcm1hdCIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFwcGx5IiwiX29iamVjdFNwcmVhZDIiLCJhcmd1bWVudHMiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjbGFtcCIsIngiLCJtaW4iLCJtYXgiLCJwYWQiLCJTdHJpbmciLCJwYWRTdGFydCIsInBhcnNlTnVtYmVyIiwidiIsIl92IiwiZXZhbHVhdGUiLCJpc05hTiIsIl91bnVzZWQiLCJwYXJzZUZsb2F0IiwibG9nMTAiLCJnZXRTdGVwIiwibnVtYmVyIiwibiIsImFicyIsInJlcGxhY2UiLCJzaWduaWZpY2FudERpZ2l0cyIsImZsb29yIiwibnVtYmVyTG9nIiwic3RlcCIsInBvdyIsInJhbmdlIiwiaW52ZXJ0ZWRSYW5nZSIsInAiLCJnZXRVaWQiLCJwYXJlbnMiLCJleHAiLCJtdWwiLCJkaXYiLCJhZGQiLCJzdWIiLCJleHByIiwiTnVtYmVyIiwidGVzdCIsIm5ld0V4cHIiLCJtYXRjaCIsInN1YkV4cHIiLCJiYXNlIiwiYSIsImIiLCJFcnJvciIsInBpY2siLCJyZWR1Y2UiLCJoYXNPd25Qcm9wZXJ0eSIsIm9taXQiLCJrIiwibWFwQXJyYXlUb0tleXMiLCJhY2MiLCJhc3NpZ24iLCJpc09iamVjdCIsInZhcmlhYmxlIiwiaXNFbXB0eU9iamVjdCIsIlNwZWNpYWxJbnB1dHMiLCJMZXZhSW5wdXRzIiwiX2V4Y2x1ZGVkJDkiLCJfZXhjbHVkZWQyJDMiLCJfZXhjbHVkZWQzIiwicGFyc2VPcHRpb25zIiwiX2lucHV0IiwibWVyZ2VkT3B0aW9ucyIsImN1c3RvbVR5cGUiLCJfY29tbW9uT3B0aW9ucyRvcHRpb24iLCJfY29tbW9uT3B0aW9ucyRkaXNhYmwiLCJBcnJheSIsImlzQXJyYXkiLCJvcHRpb25zIiwibGFiZWwiLCJvcHRpb25hbCIsImRpc2FibGVkIiwib3JkZXIiLCJfdHlwZSIsInJlbmRlciIsImhpbnQiLCJvbkNoYW5nZSIsIm9uRWRpdFN0YXJ0Iiwib25FZGl0RW5kIiwidHJhbnNpZW50IiwiaW5wdXRXaXRoVHlwZSIsImNvbW1vbk9wdGlvbnMiLCJjb21wdXRlZElucHV0Iiwibm9ybWFsaXplSW5wdXQiLCJwYXJzZWRJbnB1dEFuZE9wdGlvbnMiLCJwYXJzZWRJbnB1dCIsImlucHV0VHlwZSIsInVwZGF0ZUlucHV0IiwibmV3VmFsdWUiLCJmcm9tUGFuZWwiLCJzYW5pdGl6ZVZhbHVlIiwiVmFsdWVFcnJvciIsImVycm9yIiwicHJldmlvdXNWYWx1ZSIsIl9uZXdWYWx1ZSIsInNhbml0aXplZE5ld1ZhbHVlIiwiZSIsImRlYm91bmNlIiwiY2FsbGJhY2siLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZW91dCIsImNhbGxOb3ciLCJuZXh0Iiwid2luZG93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIm11bHRpcGx5U3RlcCIsImV2ZW50Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJfZXhjbHVkZWQkOCIsIl9leGNsdWRlZDIkMiIsInNjaGVtYSQzIiwic3VmZml4Iiwic3Vic3RyaW5nIiwidHJpbSIsInNhbml0aXplJDMiLCJfbWluIiwiSW5maW5pdHkiLCJfbWF4IiwiZiIsImZvcm1hdCQxIiwiX3BhZCIsInRvRml4ZWQiLCJub3JtYWxpemUkMiIsIl9zZXR0aW5ncyIsIl92YWx1ZSIsImlzRmluaXRlIiwidG9QcmVjaXNpb24iLCJwYWRTdGVwIiwicm91bmQiLCJpbml0aWFsVmFsdWUiLCJzYW5pdGl6ZVN0ZXAkMSIsInN0ZXBzIiwicHJvcHMkMyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsInNhbml0aXplU3RlcCIsIl9leHRlbmRzIiwiSW5wdXRDb250ZXh0IiwidXNlSW5wdXRDb250ZXh0IiwiVGhlbWVDb250ZXh0IiwiU3RvcmVDb250ZXh0IiwiUGFuZWxTZXR0aW5nc0NvbnRleHQiLCJ1c2VTdG9yZUNvbnRleHQiLCJ1c2VQYW5lbFNldHRpbmdzQ29udGV4dCIsIkxldmFTdG9yZVByb3ZpZGVyIiwiY2hpbGRyZW4iLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJnZXREZWZhdWx0VGhlbWUiLCJjb2xvcnMiLCJlbGV2YXRpb24xIiwiZWxldmF0aW9uMiIsImVsZXZhdGlvbjMiLCJhY2NlbnQxIiwiYWNjZW50MiIsImFjY2VudDMiLCJoaWdobGlnaHQxIiwiaGlnaGxpZ2h0MiIsImhpZ2hsaWdodDMiLCJ2aXZpZDEiLCJmb2xkZXJXaWRnZXRDb2xvciIsImZvbGRlclRleHRDb2xvciIsInRvb2xUaXBCYWNrZ3JvdW5kIiwidG9vbFRpcFRleHQiLCJyYWRpaSIsInhzIiwic20iLCJsZyIsInNwYWNlIiwibWQiLCJyb3dHYXAiLCJjb2xHYXAiLCJmb250cyIsIm1vbm8iLCJzYW5zIiwiZm9udFNpemVzIiwicm9vdCIsInRvb2xUaXAiLCJzaXplcyIsInJvb3RXaWR0aCIsImNvbnRyb2xXaWR0aCIsIm51bWJlcklucHV0TWluV2lkdGgiLCJzY3J1YmJlcldpZHRoIiwic2NydWJiZXJIZWlnaHQiLCJyb3dIZWlnaHQiLCJmb2xkZXJUaXRsZUhlaWdodCIsImNoZWNrYm94U2l6ZSIsImpveXN0aWNrV2lkdGgiLCJqb3lzdGlja0hlaWdodCIsImNvbG9yUGlja2VyV2lkdGgiLCJjb2xvclBpY2tlckhlaWdodCIsImltYWdlUHJldmlld1dpZHRoIiwiaW1hZ2VQcmV2aWV3SGVpZ2h0IiwibW9uaXRvckhlaWdodCIsInRpdGxlQmFySGVpZ2h0Iiwic2hhZG93cyIsImxldmVsMSIsImxldmVsMiIsImJvcmRlcldpZHRocyIsImZvY3VzIiwiaG92ZXIiLCJhY3RpdmUiLCJmb2xkZXIiLCJmb250V2VpZ2h0cyIsImJ1dHRvbiIsImNyZWF0ZVN0YXRlQ2xhc3MiLCJib3JkZXJDb2xvciIsImJnQ29sb3IiLCJzcGxpdCIsImNzcyIsImJveFNoYWRvdyIsImluc2V0IiwiYmFja2dyb3VuZENvbG9yIiwidXRpbHMiLCIkaW5wdXRTdHlsZSIsIiRmb2N1c1N0eWxlIiwiJGhvdmVyU3R5bGUiLCIkYWN0aXZlU3R5bGUiLCJzdHlsZWQiLCJjcmVhdGVUaGVtZSIsImdsb2JhbENzcyIsImtleWZyYW1lcyIsInByZWZpeCIsInRoZW1lIiwiJGZsZXgiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsIiRmbGV4Q2VudGVyIiwianVzdGlmeUNvbnRlbnQiLCIkcmVzZXQiLCJvdXRsaW5lIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY29sb3IiLCJmb250RmFtaWx5IiwiYm9yZGVyIiwiYXBwZWFyYW5jZSIsIiRkcmFnZ2FibGUiLCJ0b3VjaEFjdGlvbiIsIldlYmtpdFVzZXJEcmFnIiwidXNlclNlbGVjdCIsIiRmb2N1cyIsIiRmb2N1c1dpdGhpbiIsIiRob3ZlciIsIiRhY3RpdmUiLCJnbG9iYWxTdHlsZXMiLCJjdXJzb3IiLCJtZXJnZVRoZW1lIiwibmV3VGhlbWUiLCJkZWZhdWx0VGhlbWUiLCJjbGFzc05hbWUiLCJjdXN0b21UaGVtZSIsInVzZVRoIiwiX2tleSIsImNoYXJBdCIsIlN0eWxlZElucHV0IiwicGFkZGluZyIsIndpZHRoIiwibWluV2lkdGgiLCJmbGV4IiwiaGVpZ2h0IiwidmFyaWFudHMiLCJsZXZhVHlwZSIsInRleHRBbGlnbiIsImFzIiwidGV4dGFyZWEiLCJJbm5lckxhYmVsIiwicG9zaXRpb24iLCJvcGFjaXR5IiwicGFkZGluZ0xlZnQiLCJJbm5lck51bWJlckxhYmVsIiwibWFyZ2luUmlnaHQiLCJ0ZXh0VHJhbnNmb3JtIiwiZHJhZ2dpbmciLCJ0cnVlIiwiSW5wdXRDb250YWluZXIiLCJib3JkZXJSYWRpdXMiLCJvdmVyZmxvdyIsInRleHRBcmVhIiwiX2V4Y2x1ZGVkJDciLCJfZXhjbHVkZWQyJDEiLCJWYWx1ZUlucHV0IiwiaW5uZXJMYWJlbCIsIm9uVXBkYXRlIiwib25LZXlEb3duIiwiaWQiLCJyb3dzIiwicHJvcHMiLCJfaWQiLCJlbWl0T25FZGl0U3RhcnQiLCJlbWl0T25FZGl0RW5kIiwiaW5wdXRJZCIsImlucHV0UmVmIiwiaXNUZXh0QXJlYSIsImFzVHlwZSIsInVwZGF0ZSIsImN1cnJlbnRUYXJnZXQiLCJyZWYiLCJjdXJyZW50IiwiX29uVXBkYXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbktleVByZXNzIiwiaW5wdXRQcm9wcyIsImF1dG9Db21wbGV0ZSIsInNwZWxsQ2hlY2siLCJvbkZvY3VzIiwiTnVtYmVySW5wdXQiLCJkaXIiLCJwcmV2ZW50RGVmYXVsdCIsIlN0eWxlZEZvbGRlciIsIlN0eWxlZFdyYXBwZXIiLCJiYWNrZ3JvdW5kIiwidHJhbnNpdGlvbiIsImZpbGwiLCJmYWxzZSIsImZsYXQiLCJpc1Jvb3QiLCJjb250ZW50IiwibGVmdCIsInRvcCIsInRyYW5zZm9ybSIsImNvbXBvdW5kVmFyaWFudHMiLCJvdmVyZmxvd1kiLCJtYXhIZWlnaHQiLCJTdHlsZWRUaXRsZSIsIm1hcmdpbkxlZnQiLCJTdHlsZWRDb250ZW50IiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsInRvZ2dsZWQiLCJ0cmFuc2l0aW9uRGVsYXkiLCJwb2ludGVyRXZlbnRzIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5Ub3AiLCJib3JkZXJUb3AiLCJTdHlsZWRSb3ciLCJ6SW5kZXgiLCJncmlkVGVtcGxhdGVSb3dzIiwibWFyZ2luQm90dG9tIiwiU3R5bGVkSW5wdXRSb3ciLCJjb2x1bW5HYXAiLCJDb3B5TGFiZWxDb250YWluZXIiLCJhbGlnbiIsIlN0eWxlZE9wdGlvbmFsVG9nZ2xlIiwibWFyZ2luIiwiU3R5bGVkTGFiZWwiLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwiU3R5bGVkSW5wdXRXcmFwcGVyJDEiLCJPdmVybGF5IiwiYm90dG9tIiwicmlnaHQiLCJTdHlsZWRUb29sVGlwQ29udGVudCIsIm1heFdpZHRoIiwiVG9vbFRpcEFycm93IiwiUG9ydGFsIiwiUm9vdCIsIl9leGNsdWRlZCQ2IiwiT3B0aW9uYWxUb2dnbGUiLCJkaXNhYmxlIiwiRnJhZ21lbnQiLCJjaGVja2VkIiwiaHRtbEZvciIsIlJhd0xhYmVsIiwidGl0bGUiLCJUcmlnZ2VyIiwiYXNDaGlsZCIsIkNvbnRlbnQiLCJzaWRlIiwic2lkZU9mZnNldCIsIkxhYmVsIiwiaGlkZUNvcHlCdXR0b24iLCJjb3B5RW5hYmxlZCIsImNvcGllZCIsInNldENvcGllZCIsImhhbmRsZUNsaWNrIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwiSlNPTiIsInN0cmluZ2lmeSIsIm9uUG9pbnRlckxlYXZlIiwib25DbGljayIsInhtbG5zIiwidmlld0JveCIsImQiLCJmaWxsUnVsZSIsImNsaXBSdWxlIiwiX2V4Y2x1ZGVkJDUiLCJTdmciLCJDaGV2cm9uIiwic3R5bGUiLCJfZXhjbHVkZWQkNCIsIlJvdyIsInVzZUlucHV0U2V0dGVycyIsInNldFZhbHVlIiwiZGlzcGxheVZhbHVlIiwic2V0RGlzcGxheVZhbHVlIiwicHJldmlvdXNWYWx1ZVJlZiIsInNldHRpbmdzUmVmIiwic2V0Rm9ybWF0IiwidXBkYXRlZFZhbHVlIiwiaGFuZGxlciIsImNvbmZpZyIsInN0YXRlIiwiZmlyc3QiLCJkb2N1bWVudCIsImJvZHkiLCJjbGFzc0xpc3QiLCJyZXN1bHQiLCJsYXN0IiwicmVtb3ZlIiwidXNlQ2FudmFzMmQiLCJjYW52YXMiLCJjdHgiLCJoYXNGaXJlZCIsImhhbmRsZUNhbnZhcyIsIm9mZnNldFdpZHRoIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm9mZnNldEhlaWdodCIsImdldENvbnRleHQiLCJ1c2VUcmFuc2Zvcm0iLCJsb2NhbCIsInkiLCJzZXQiLCJwb2ludCIsIl9leGNsdWRlZCQzIiwiZ2V0SW5wdXRBdFBhdGgiLCJfZGF0YSRwYXRoIiwidXNlSW5wdXQiLCJzZXRTdGF0ZSIsImdldERhdGEiLCJzZXRWYWx1ZUF0UGF0aCIsInNldFNldHRpbmdzIiwic2V0U2V0dGluZ3NBdFBhdGgiLCJmbGFnIiwiZGlzYWJsZUlucHV0QXRQYXRoIiwidW5zdWIiLCJ1c2VTdG9yZSIsInN1YnNjcmliZSIsInMiLCJlcXVhbGl0eUZuIiwic3RvcmVJZCIsIlJhbmdlR3JpZCIsImhhc1JhbmdlIiwiUmFuZ2UiLCJTY3J1YmJlciIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsIlJhbmdlV3JhcHBlciIsIkluZGljYXRvciIsIlJhbmdlU2xpZGVyIiwib25EcmFnIiwic2NydWJiZXJSZWYiLCJyYW5nZVdpZHRoIiwieHkiLCJtb3ZlbWVudCIsIm14IiwibWVtbyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRhcmdldElzU2NydWIiLCJwb3MiLCJEcmFnZ2FibGVMYWJlbCIsImlubmVyTGFiZWxUcmltIiwic2V0RHJhZ2dpbmciLCJkZWx0YSIsImR4IiwiX21lbW8iLCJyZXF1ZXN0UG9pbnRlckxvY2siLCJleGl0UG9pbnRlckxvY2siLCJzbGljZSIsIk51bWJlciQxIiwiTnVtYmVyQ29tcG9uZW50IiwiY29tcG9uZW50Iiwic2NoZW1hJDIiLCJfbyIsInBhc3Nlc0FueU9mIiwiYXJyYXkiLCJzYW5pdGl6ZSQyIiwidmFsdWVzIiwibm9ybWFsaXplJDEiLCJtYXAiLCJvIiwiaW5jbHVkZXMiLCJ1bnNoaWZ0IiwicHJvcHMkMiIsIlNlbGVjdENvbnRhaW5lciIsIk5hdGl2ZVNlbGVjdCIsIlByZXNlbnRhdGlvbmFsU2VsZWN0IiwiU2VsZWN0IiwibGFzdERpc3BsYXllZFZhbHVlIiwiaW5kZXgiLCJTZWxlY3RDb21wb25lbnQiLCJzZWxlY3QiLCJzY2hlbWEkMSIsInN0cmluZyIsInNhbml0aXplJDEiLCJlZGl0YWJsZSIsIl9lZGl0YWJsZSIsIl9yb3dzIiwicHJvcHMkMSIsIl9leGNsdWRlZCQyIiwiTm9uRWRpdGFibGVTdHJpbmciLCJTdHJpbmckMSIsIlN0cmluZ0NvbXBvbmVudCIsImJvb2xlYW4iLCJTdHlsZWRJbnB1dFdyYXBwZXIiLCJzdHJva2UiLCJCb29sZWFuIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwic3Ryb2tlV2lkdGgiLCJCb29sZWFuQ29tcG9uZW50IiwiX2V4Y2x1ZGVkJDEiLCJDb29yZGluYXRlIiwidmFsdWVLZXkiLCJ2YWx1ZVJlZiIsIkNvbnRhaW5lciIsImdyaWRBdXRvRmxvdyIsIndpdGhMb2NrIiwiTG9jayIsImxvY2tlZCIsIlZlY3RvciIsImxvY2siLCJub3JtYWxpemVLZXllZE51bWJlclNldHRpbmdzIiwibWF4U3RlcCIsIm1pblBhZCIsImVudHJpZXMiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiZ2V0VmVjdG9yU2NoZW1hIiwiZGltZW5zaW9uIiwiaXNWZWN0b3JBcnJheSIsImV2ZXJ5IiwiaXNWZWN0b3JPYmplY3QiLCJnZXRWZWN0b3JUeXBlIiwiY29udmVydCIsInNhbml0aXplVmVjdG9yIiwiX3ZhbHVlS2V5cyIsIl9wcmV2aW91c1ZhbHVlIiwibG9ja2VkS2V5IiwibG9ja2VkQ29vcmRpbmF0ZSIsInByZXZpb3VzTG9ja2VkQ29vcmRpbmF0ZSIsInJhdGlvIiwiZm9ybWF0VmVjdG9yIiwiaXNOdW1iZXJTZXR0aW5ncyIsIm5vcm1hbGl6ZVZlY3RvciIsImRlZmF1bHRLZXlzIiwibWVyZ2VkU2V0dGluZ3MiLCJudW1iZXJTZXR0aW5ncyIsImdldFZlY3RvclBsdWdpbiIsIiQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJHIiwiSCIsIkkiLCJKIiwiSyIsIkwiLCJNIiwiTiIsIk8iLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiXyIsImEwIiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImE2IiwiYTciLCJhOCIsImE5IiwiYWEiLCJhYiIsImFjIiwiYWQiLCJhZSIsImFmIiwiYWciLCJhaCIsImFpIiwiYWoiLCJhayIsImMiLCJnIiwiaCIsImoiLCJsIiwibSIsInEiLCJyIiwidCIsInUiLCJ3IiwieiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/dist/vector-plugin-a4ae7e76.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/node_modules/@radix-ui/react-compose-refs/dist/index.module.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/leva/node_modules/@radix-ui/react-compose-refs/dist/index.module.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   composeRefs: () => (/* binding */ $6ed0406888f73fc4$export$43e446d32b3d21af),\n/* harmony export */   useComposedRefs: () => (/* binding */ $6ed0406888f73fc4$export$c7b2cbe3552a0d05)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$var$setRef(ref, value) {\n    if (typeof ref === \"function\") ref(value);\n    else if (ref !== null && ref !== undefined) ref.current = value;\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {\n    return (node)=>refs.forEach((ref)=>$6ed0406888f73fc4$var$setRef(ref, node));\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);\n}\n //# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGV2YS9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWNvbXBvc2UtcmVmcy9kaXN0L2luZGV4Lm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEO0FBR3hEOzs7Q0FHQyxHQUFHLFNBQVNFLDZCQUE2QkMsR0FBRyxFQUFFQyxLQUFLO0lBQ2hELElBQUksT0FBT0QsUUFBUSxZQUFZQSxJQUFJQztTQUM5QixJQUFJRCxRQUFRLFFBQVFBLFFBQVFFLFdBQVdGLElBQUlHLE9BQU8sR0FBR0Y7QUFDOUQ7QUFDQTs7O0NBR0MsR0FBRyxTQUFTRywwQ0FBMEMsR0FBR0MsSUFBSTtJQUMxRCxPQUFPLENBQUNDLE9BQU9ELEtBQUtFLE9BQU8sQ0FBQyxDQUFDUCxNQUFNRCw2QkFBNkJDLEtBQUtNO0FBR3pFO0FBQ0E7OztDQUdDLEdBQUcsU0FBU0UsMENBQTBDLEdBQUdILElBQUk7SUFDMUQsdURBQXVEO0lBQ3ZELE9BQU9QLGtEQUFrQkEsQ0FBQ00sNkNBQTZDQyxPQUFPQTtBQUNsRjtBQUtnSSxDQUNoSSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvbGV2YS9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWNvbXBvc2UtcmVmcy9kaXN0L2luZGV4Lm1vZHVsZS5qcz80ZjVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXNlQ2FsbGJhY2sgYXMgJDN2cW1yJHVzZUNhbGxiYWNrfSBmcm9tIFwicmVhY3RcIjtcblxuXG4vKipcbiAqIFNldCBhIGdpdmVuIHJlZiB0byBhIGdpdmVuIHZhbHVlXG4gKiBUaGlzIHV0aWxpdHkgdGFrZXMgY2FyZSBvZiBkaWZmZXJlbnQgdHlwZXMgb2YgcmVmczogY2FsbGJhY2sgcmVmcyBhbmQgUmVmT2JqZWN0KHMpXG4gKi8gZnVuY3Rpb24gJDZlZDA0MDY4ODhmNzNmYzQkdmFyJHNldFJlZihyZWYsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHJlZih2YWx1ZSk7XG4gICAgZWxzZSBpZiAocmVmICE9PSBudWxsICYmIHJlZiAhPT0gdW5kZWZpbmVkKSByZWYuY3VycmVudCA9IHZhbHVlO1xufVxuLyoqXG4gKiBBIHV0aWxpdHkgdG8gY29tcG9zZSBtdWx0aXBsZSByZWZzIHRvZ2V0aGVyXG4gKiBBY2NlcHRzIGNhbGxiYWNrIHJlZnMgYW5kIFJlZk9iamVjdChzKVxuICovIGZ1bmN0aW9uICQ2ZWQwNDA2ODg4ZjczZmM0JGV4cG9ydCQ0M2U0NDZkMzJiM2QyMWFmKC4uLnJlZnMpIHtcbiAgICByZXR1cm4gKG5vZGUpPT5yZWZzLmZvckVhY2goKHJlZik9PiQ2ZWQwNDA2ODg4ZjczZmM0JHZhciRzZXRSZWYocmVmLCBub2RlKVxuICAgICAgICApXG4gICAgO1xufVxuLyoqXG4gKiBBIGN1c3RvbSBob29rIHRoYXQgY29tcG9zZXMgbXVsdGlwbGUgcmVmc1xuICogQWNjZXB0cyBjYWxsYmFjayByZWZzIGFuZCBSZWZPYmplY3QocylcbiAqLyBmdW5jdGlvbiAkNmVkMDQwNjg4OGY3M2ZjNCRleHBvcnQkYzdiMmNiZTM1NTJhMGQwNSguLi5yZWZzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIHJldHVybiAkM3ZxbXIkdXNlQ2FsbGJhY2soJDZlZDA0MDY4ODhmNzNmYzQkZXhwb3J0JDQzZTQ0NmQzMmIzZDIxYWYoLi4ucmVmcyksIHJlZnMpO1xufVxuXG5cblxuXG5leHBvcnQgeyQ2ZWQwNDA2ODg4ZjczZmM0JGV4cG9ydCQ0M2U0NDZkMzJiM2QyMWFmIGFzIGNvbXBvc2VSZWZzLCAkNmVkMDQwNjg4OGY3M2ZjNCRleHBvcnQkYzdiMmNiZTM1NTJhMGQwNSBhcyB1c2VDb21wb3NlZFJlZnN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwiJDN2cW1yJHVzZUNhbGxiYWNrIiwiJDZlZDA0MDY4ODhmNzNmYzQkdmFyJHNldFJlZiIsInJlZiIsInZhbHVlIiwidW5kZWZpbmVkIiwiY3VycmVudCIsIiQ2ZWQwNDA2ODg4ZjczZmM0JGV4cG9ydCQ0M2U0NDZkMzJiM2QyMWFmIiwicmVmcyIsIm5vZGUiLCJmb3JFYWNoIiwiJDZlZDA0MDY4ODhmNzNmYzQkZXhwb3J0JGM3YjJjYmUzNTUyYTBkMDUiLCJjb21wb3NlUmVmcyIsInVzZUNvbXBvc2VkUmVmcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/node_modules/@radix-ui/react-compose-refs/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/node_modules/@radix-ui/react-portal/dist/index.module.js":
/*!************************************************************************************!*\
  !*** ./node_modules/leva/node_modules/@radix-ui/react-portal/dist/index.module.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Portal: () => (/* binding */ $f1701beae083dbae$export$602eac185826482c),\n/* harmony export */   Root: () => (/* binding */ $f1701beae083dbae$export$be92b6f5f03c0fe9)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-primitive */ \"(ssr)/./node_modules/leva/node_modules/@radix-ui/react-primitive/dist/index.module.js\");\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Portal\n * -----------------------------------------------------------------------------------------------*/ const $f1701beae083dbae$var$PORTAL_NAME = \"Portal\";\nconst $f1701beae083dbae$export$602eac185826482c = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    var _globalThis$document;\n    const { container: container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body, ...portalProps } = props;\n    return container ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_2___default().createPortal(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, portalProps, {\n        ref: forwardedRef\n    })), container) : null;\n});\n/*#__PURE__*/ Object.assign($f1701beae083dbae$export$602eac185826482c, {\n    displayName: $f1701beae083dbae$var$PORTAL_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ const $f1701beae083dbae$export$be92b6f5f03c0fe9 = $f1701beae083dbae$export$602eac185826482c;\n //# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGV2YS9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LXBvcnRhbC9kaXN0L2luZGV4Lm1vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRjtBQUNPO0FBQ3JEO0FBQ2dDO0FBTXhFOztrR0FFa0csR0FBRyxNQUFNUSxvQ0FBb0M7QUFDL0ksTUFBTUMsNENBQTRDLFdBQVcsR0FBR1AsaURBQWlCQSxDQUFDLENBQUNRLE9BQU9DO0lBQ3RGLElBQUlDO0lBQ0osTUFBTSxFQUFFQyxXQUFXQSxZQUFZQyxlQUFlLFFBQVFBLGVBQWUsS0FBSyxJQUFJLEtBQUssSUFBSSxDQUFDRix1QkFBdUJFLFdBQVdDLFFBQVEsTUFBTSxRQUFRSCx5QkFBeUIsS0FBSyxJQUFJLEtBQUssSUFBSUEscUJBQXFCSSxJQUFJLEVBQUcsR0FBR0MsYUFBYSxHQUFHUDtJQUMxTyxPQUFPRyxZQUFZLFdBQVcsR0FBR1IsNkRBQTRCLENBQUMsV0FBVyxHQUFHRCxvREFBb0JBLENBQUNHLGdFQUFnQkEsQ0FBQ1ksR0FBRyxFQUFFbkIsOEVBQW9DQSxDQUFDLENBQUMsR0FBR2lCLGFBQWE7UUFDektHLEtBQUtUO0lBQ1QsS0FBS0UsYUFBYTtBQUN0QjtBQUNBLFdBQVcsR0FBR1EsT0FBT0MsTUFBTSxDQUFDYiwyQ0FBMkM7SUFDbkVjLGFBQWFmO0FBQ2pCO0FBQ0Esa0dBQWtHLEdBQUcsTUFBTWdCLDRDQUE0Q2Y7QUFLdkMsQ0FDaEgsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL2xldmEvbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC1wb3J0YWwvZGlzdC9pbmRleC5tb2R1bGUuanM/YWQ4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJDdTWGwyJGJhYmVscnVudGltZWhlbHBlcnNlc21leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQge2ZvcndhcmRSZWYgYXMgJDdTWGwyJGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQgYXMgJDdTWGwyJGNyZWF0ZUVsZW1lbnR9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICQ3U1hsMiRyZWFjdGRvbSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQge1ByaW1pdGl2ZSBhcyAkN1NYbDIkUHJpbWl0aXZlfSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LXByaW1pdGl2ZVwiO1xuXG5cblxuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBvcnRhbFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLyBjb25zdCAkZjE3MDFiZWFlMDgzZGJhZSR2YXIkUE9SVEFMX05BTUUgPSAnUG9ydGFsJztcbmNvbnN0ICRmMTcwMWJlYWUwODNkYmFlJGV4cG9ydCQ2MDJlYWMxODU4MjY0ODJjID0gLyojX19QVVJFX18qLyAkN1NYbDIkZm9yd2FyZFJlZigocHJvcHMsIGZvcndhcmRlZFJlZik9PntcbiAgICB2YXIgX2dsb2JhbFRoaXMkZG9jdW1lbnQ7XG4gICAgY29uc3QgeyBjb250YWluZXI6IGNvbnRhaW5lciA9IGdsb2JhbFRoaXMgPT09IG51bGwgfHwgZ2xvYmFsVGhpcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9nbG9iYWxUaGlzJGRvY3VtZW50ID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkgPT09IG51bGwgfHwgX2dsb2JhbFRoaXMkZG9jdW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nbG9iYWxUaGlzJGRvY3VtZW50LmJvZHkgLCAuLi5wb3J0YWxQcm9wcyB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIGNvbnRhaW5lciA/IC8qI19fUFVSRV9fKi8gJDdTWGwyJHJlYWN0ZG9tLmNyZWF0ZVBvcnRhbCgvKiNfX1BVUkVfXyovICQ3U1hsMiRjcmVhdGVFbGVtZW50KCQ3U1hsMiRQcmltaXRpdmUuZGl2LCAkN1NYbDIkYmFiZWxydW50aW1laGVscGVyc2VzbWV4dGVuZHMoe30sIHBvcnRhbFByb3BzLCB7XG4gICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgfSkpLCBjb250YWluZXIpIDogbnVsbDtcbn0pO1xuLyojX19QVVJFX18qLyBPYmplY3QuYXNzaWduKCRmMTcwMWJlYWUwODNkYmFlJGV4cG9ydCQ2MDJlYWMxODU4MjY0ODJjLCB7XG4gICAgZGlzcGxheU5hbWU6ICRmMTcwMWJlYWUwODNkYmFlJHZhciRQT1JUQUxfTkFNRVxufSk7XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovIGNvbnN0ICRmMTcwMWJlYWUwODNkYmFlJGV4cG9ydCRiZTkyYjZmNWYwM2MwZmU5ID0gJGYxNzAxYmVhZTA4M2RiYWUkZXhwb3J0JDYwMmVhYzE4NTgyNjQ4MmM7XG5cblxuXG5cbmV4cG9ydCB7JGYxNzAxYmVhZTA4M2RiYWUkZXhwb3J0JDYwMmVhYzE4NTgyNjQ4MmMgYXMgUG9ydGFsLCAkZjE3MDFiZWFlMDgzZGJhZSRleHBvcnQkYmU5MmI2ZjVmMDNjMGZlOSBhcyBSb290fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyIkN1NYbDIkYmFiZWxydW50aW1laGVscGVyc2VzbWV4dGVuZHMiLCJmb3J3YXJkUmVmIiwiJDdTWGwyJGZvcndhcmRSZWYiLCJjcmVhdGVFbGVtZW50IiwiJDdTWGwyJGNyZWF0ZUVsZW1lbnQiLCIkN1NYbDIkcmVhY3Rkb20iLCJQcmltaXRpdmUiLCIkN1NYbDIkUHJpbWl0aXZlIiwiJGYxNzAxYmVhZTA4M2RiYWUkdmFyJFBPUlRBTF9OQU1FIiwiJGYxNzAxYmVhZTA4M2RiYWUkZXhwb3J0JDYwMmVhYzE4NTgyNjQ4MmMiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsIl9nbG9iYWxUaGlzJGRvY3VtZW50IiwiY29udGFpbmVyIiwiZ2xvYmFsVGhpcyIsImRvY3VtZW50IiwiYm9keSIsInBvcnRhbFByb3BzIiwiY3JlYXRlUG9ydGFsIiwiZGl2IiwicmVmIiwiT2JqZWN0IiwiYXNzaWduIiwiZGlzcGxheU5hbWUiLCIkZjE3MDFiZWFlMDgzZGJhZSRleHBvcnQkYmU5MmI2ZjVmMDNjMGZlOSIsIlBvcnRhbCIsIlJvb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/node_modules/@radix-ui/react-portal/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/node_modules/@radix-ui/react-primitive/dist/index.module.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/leva/node_modules/@radix-ui/react-primitive/dist/index.module.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Primitive: () => (/* binding */ $8927f6f2acc4f386$export$250ffa63cdc0d034),\n/* harmony export */   Root: () => (/* binding */ $8927f6f2acc4f386$export$be92b6f5f03c0fe9),\n/* harmony export */   dispatchDiscreteCustomEvent: () => (/* binding */ $8927f6f2acc4f386$export$6d1a0317bde7de7f)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/leva/node_modules/@radix-ui/react-slot/dist/index.module.js\");\n\n\n\n\nconst $8927f6f2acc4f386$var$NODES = [\n    \"a\",\n    \"button\",\n    \"div\",\n    \"form\",\n    \"h2\",\n    \"h3\",\n    \"img\",\n    \"input\",\n    \"label\",\n    \"li\",\n    \"nav\",\n    \"ol\",\n    \"p\",\n    \"span\",\n    \"svg\",\n    \"ul\"\n]; // Temporary while we await merge of this fix:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396\n// prettier-ignore\n/* -------------------------------------------------------------------------------------------------\n * Primitive\n * -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node)=>{\n    const Node = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n        const { asChild: asChild, ...primitiveProps } = props;\n        const Comp = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__.Slot : node;\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n            window[Symbol.for(\"radix-ui\")] = true;\n        }, []);\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(Comp, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, primitiveProps, {\n            ref: forwardedRef\n        }));\n    });\n    Node.displayName = `Primitive.${node}`;\n    return {\n        ...primitive,\n        [node]: Node\n    };\n}, {});\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/ /**\n * Flush custom event dispatch\n * https://github.com/radix-ui/primitives/pull/1378\n *\n * React batches *all* event handlers since version 18, this introduces certain considerations when using custom event types.\n *\n * Internally, React prioritises events in the following order:\n *  - discrete\n *  - continuous\n *  - default\n *\n * https://github.com/facebook/react/blob/a8a4742f1c54493df00da648a3f9d26e3db9c8b5/packages/react-dom/src/events/ReactDOMEventListener.js#L294-L350\n *\n * `discrete` is an  important distinction as updates within these events are applied immediately.\n * React however, is not able to infer the priority of custom event types due to how they are detected internally.\n * Because of this, it's possible for updates from custom events to be unexpectedly batched when\n * dispatched by another `discrete` event.\n *\n * In order to ensure that updates from custom events are applied predictably, we need to manually flush the batch.\n * This utility should be used when dispatching a custom event from within another `discrete` event, this utility\n * is not nessesary when dispatching known event types, or if dispatching a custom type inside a non-discrete event.\n * For example:\n *\n * dispatching a known click 👎\n * target.dispatchEvent(new Event(‘click’))\n *\n * dispatching a custom type within a non-discrete event 👎\n * onScroll={(event) => event.target.dispatchEvent(new CustomEvent(‘customType’))}\n *\n * dispatching a custom type within a `discrete` event 👍\n * onPointerDown={(event) => dispatchDiscreteCustomEvent(event.target, new CustomEvent(‘customType’))}\n *\n * Note: though React classifies `focus`, `focusin` and `focusout` events as `discrete`, it's  not recommended to use\n * this utility with them. This is because it's possible for those handlers to be called implicitly during render\n * e.g. when focus is within a component as it is unmounted, or when managing focus on mount.\n */ function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {\n    if (target) (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync)(()=>target.dispatchEvent(event));\n}\n/* -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$be92b6f5f03c0fe9 = $8927f6f2acc4f386$export$250ffa63cdc0d034;\n //# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/node_modules/@radix-ui/react-primitive/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/node_modules/@radix-ui/react-slot/dist/index.module.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/leva/node_modules/@radix-ui/react-slot/dist/index.module.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Root: () => (/* binding */ $5e63c961fc1ce211$export$be92b6f5f03c0fe9),\n/* harmony export */   Slot: () => (/* binding */ $5e63c961fc1ce211$export$8c6ed5c666ac1360),\n/* harmony export */   Slottable: () => (/* binding */ $5e63c961fc1ce211$export$d9f1ccf0bdb05d45)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ \"(ssr)/./node_modules/leva/node_modules/@radix-ui/react-compose-refs/dist/index.module.js\");\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { children: children, ...slotProps } = props;\n    const childrenArray = react__WEBPACK_IMPORTED_MODULE_1__.Children.toArray(children);\n    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n    if (slottable) {\n        // the new element to render is the one passed as a child of `Slottable`\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                // because the new element will be the one rendered, we are only interested\n                // in grabbing its children (`newElement.props.children`)\n                if (react__WEBPACK_IMPORTED_MODULE_1__.Children.count(newElement) > 1) return react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null);\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(newElement) ? newElement.props.children : null;\n            } else return child;\n        });\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($5e63c961fc1ce211$var$SlotClone, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, slotProps, {\n            ref: forwardedRef\n        }), /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(newElement) ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(newElement, undefined, newChildren) : null);\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($5e63c961fc1ce211$var$SlotClone, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, slotProps, {\n        ref: forwardedRef\n    }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = \"Slot\";\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { children: children, ...slotProps } = props;\n    if (/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(children)) return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(children, {\n        ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),\n        ref: (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(forwardedRef, children.ref)\n    });\n    return react__WEBPACK_IMPORTED_MODULE_1__.Children.count(children) > 1 ? react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = \"SlotClone\";\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children: children })=>{\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */ function $5e63c961fc1ce211$var$isSlottable(child) {\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n    // all child props should override\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            // if the handler exists on both, we compose them\n            if (slotPropValue && childPropValue) overrideProps[propName] = (...args)=>{\n                childPropValue(...args);\n                slotPropValue(...args);\n            };\n            else if (slotPropValue) overrideProps[propName] = slotPropValue;\n        } else if (propName === \"style\") overrideProps[propName] = {\n            ...slotPropValue,\n            ...childPropValue\n        };\n        else if (propName === \"className\") overrideProps[propName] = [\n            slotPropValue,\n            childPropValue\n        ].filter(Boolean).join(\" \");\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nconst $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\n //# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/node_modules/@radix-ui/react-slot/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/node_modules/zustand/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/leva/node_modules/zustand/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction createStore(createState) {\n    let state;\n    const listeners = /* @__PURE__ */ new Set();\n    const setState = (partial, replace)=>{\n        const nextState = typeof partial === \"function\" ? partial(state) : partial;\n        if (nextState !== state) {\n            const previousState = state;\n            state = replace ? nextState : Object.assign({}, state, nextState);\n            listeners.forEach((listener)=>listener(state, previousState));\n        }\n    };\n    const getState = ()=>state;\n    const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is)=>{\n        console.warn(\"[DEPRECATED] Please use `subscribeWithSelector` middleware\");\n        let currentSlice = selector(state);\n        function listenerToAdd() {\n            const nextSlice = selector(state);\n            if (!equalityFn(currentSlice, nextSlice)) {\n                const previousSlice = currentSlice;\n                listener(currentSlice = nextSlice, previousSlice);\n            }\n        }\n        listeners.add(listenerToAdd);\n        return ()=>listeners.delete(listenerToAdd);\n    };\n    const subscribe = (listener, selector, equalityFn)=>{\n        if (selector || equalityFn) {\n            return subscribeWithSelector(listener, selector, equalityFn);\n        }\n        listeners.add(listener);\n        return ()=>listeners.delete(listener);\n    };\n    const destroy = ()=>listeners.clear();\n    const api = {\n        setState,\n        getState,\n        subscribe,\n        destroy\n    };\n    state = createState(setState, getState, api);\n    return api;\n}\nconst isSSR =  true || 0;\nconst useIsomorphicLayoutEffect = isSSR ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\nfunction create(createState) {\n    const api = typeof createState === \"function\" ? createStore(createState) : createState;\n    const useStore = (selector = api.getState, equalityFn = Object.is)=>{\n        const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((c)=>c + 1, 0);\n        const state = api.getState();\n        const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n        const selectorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selector);\n        const equalityFnRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(equalityFn);\n        const erroredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n        const currentSliceRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n        if (currentSliceRef.current === void 0) {\n            currentSliceRef.current = selector(state);\n        }\n        let newStateSlice;\n        let hasNewStateSlice = false;\n        if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n            newStateSlice = selector(state);\n            hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n        }\n        useIsomorphicLayoutEffect(()=>{\n            if (hasNewStateSlice) {\n                currentSliceRef.current = newStateSlice;\n            }\n            stateRef.current = state;\n            selectorRef.current = selector;\n            equalityFnRef.current = equalityFn;\n            erroredRef.current = false;\n        });\n        const stateBeforeSubscriptionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n        useIsomorphicLayoutEffect(()=>{\n            const listener = ()=>{\n                try {\n                    const nextState = api.getState();\n                    const nextStateSlice = selectorRef.current(nextState);\n                    if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n                        stateRef.current = nextState;\n                        currentSliceRef.current = nextStateSlice;\n                        forceUpdate();\n                    }\n                } catch (error) {\n                    erroredRef.current = true;\n                    forceUpdate();\n                }\n            };\n            const unsubscribe = api.subscribe(listener);\n            if (api.getState() !== stateBeforeSubscriptionRef.current) {\n                listener();\n            }\n            return unsubscribe;\n        }, []);\n        const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(sliceToReturn);\n        return sliceToReturn;\n    };\n    Object.assign(useStore, api);\n    useStore[Symbol.iterator] = function() {\n        console.warn(\"[useStore, api] = create() is deprecated and will be removed in v4\");\n        const items = [\n            useStore,\n            api\n        ];\n        return {\n            next () {\n                const done = items.length <= 0;\n                return {\n                    value: items.shift(),\n                    done\n                };\n            }\n        };\n    };\n    return useStore;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGV2YS9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNGO0FBRXRGLFNBQVNLLFlBQVlDLFdBQVc7SUFDOUIsSUFBSUM7SUFDSixNQUFNQyxZQUFZLGFBQWEsR0FBRyxJQUFJQztJQUN0QyxNQUFNQyxXQUFXLENBQUNDLFNBQVNDO1FBQ3pCLE1BQU1DLFlBQVksT0FBT0YsWUFBWSxhQUFhQSxRQUFRSixTQUFTSTtRQUNuRSxJQUFJRSxjQUFjTixPQUFPO1lBQ3ZCLE1BQU1PLGdCQUFnQlA7WUFDdEJBLFFBQVFLLFVBQVVDLFlBQVlFLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdULE9BQU9NO1lBQ3ZETCxVQUFVUyxPQUFPLENBQUMsQ0FBQ0MsV0FBYUEsU0FBU1gsT0FBT087UUFDbEQ7SUFDRjtJQUNBLE1BQU1LLFdBQVcsSUFBTVo7SUFDdkIsTUFBTWEsd0JBQXdCLENBQUNGLFVBQVVHLFdBQVdGLFFBQVEsRUFBRUcsYUFBYVAsT0FBT1EsRUFBRTtRQUNsRkMsUUFBUUMsSUFBSSxDQUFDO1FBQ2IsSUFBSUMsZUFBZUwsU0FBU2Q7UUFDNUIsU0FBU29CO1lBQ1AsTUFBTUMsWUFBWVAsU0FBU2Q7WUFDM0IsSUFBSSxDQUFDZSxXQUFXSSxjQUFjRSxZQUFZO2dCQUN4QyxNQUFNQyxnQkFBZ0JIO2dCQUN0QlIsU0FBU1EsZUFBZUUsV0FBV0M7WUFDckM7UUFDRjtRQUNBckIsVUFBVXNCLEdBQUcsQ0FBQ0g7UUFDZCxPQUFPLElBQU1uQixVQUFVdUIsTUFBTSxDQUFDSjtJQUNoQztJQUNBLE1BQU1LLFlBQVksQ0FBQ2QsVUFBVUcsVUFBVUM7UUFDckMsSUFBSUQsWUFBWUMsWUFBWTtZQUMxQixPQUFPRixzQkFBc0JGLFVBQVVHLFVBQVVDO1FBQ25EO1FBQ0FkLFVBQVVzQixHQUFHLENBQUNaO1FBQ2QsT0FBTyxJQUFNVixVQUFVdUIsTUFBTSxDQUFDYjtJQUNoQztJQUNBLE1B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QUk7Z0JBQzdCLE9BQU87b0JBQUVDLE9BQU9KLE1BQU1LLEtBQUs7b0JBQUlIO2dCQUFLO1lBQ3RDO1FBQ0Y7SUFDRjtJQUNBLE9BQU9wQjtBQUNUO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL2xldmEvbm9kZV9tb2R1bGVzL3p1c3RhbmQvZXNtL2luZGV4LmpzPzg0ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VEZWJ1Z1ZhbHVlLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUoY3JlYXRlU3RhdGUpIHtcbiAgbGV0IHN0YXRlO1xuICBjb25zdCBsaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBjb25zdCBzZXRTdGF0ZSA9IChwYXJ0aWFsLCByZXBsYWNlKSA9PiB7XG4gICAgY29uc3QgbmV4dFN0YXRlID0gdHlwZW9mIHBhcnRpYWwgPT09IFwiZnVuY3Rpb25cIiA/IHBhcnRpYWwoc3RhdGUpIDogcGFydGlhbDtcbiAgICBpZiAobmV4dFN0YXRlICE9PSBzdGF0ZSkge1xuICAgICAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IHN0YXRlO1xuICAgICAgc3RhdGUgPSByZXBsYWNlID8gbmV4dFN0YXRlIDogT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKHN0YXRlLCBwcmV2aW91c1N0YXRlKSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXRTdGF0ZSA9ICgpID0+IHN0YXRlO1xuICBjb25zdCBzdWJzY3JpYmVXaXRoU2VsZWN0b3IgPSAobGlzdGVuZXIsIHNlbGVjdG9yID0gZ2V0U3RhdGUsIGVxdWFsaXR5Rm4gPSBPYmplY3QuaXMpID0+IHtcbiAgICBjb25zb2xlLndhcm4oXCJbREVQUkVDQVRFRF0gUGxlYXNlIHVzZSBgc3Vic2NyaWJlV2l0aFNlbGVjdG9yYCBtaWRkbGV3YXJlXCIpO1xuICAgIGxldCBjdXJyZW50U2xpY2UgPSBzZWxlY3RvcihzdGF0ZSk7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXJUb0FkZCgpIHtcbiAgICAgIGNvbnN0IG5leHRTbGljZSA9IHNlbGVjdG9yKHN0YXRlKTtcbiAgICAgIGlmICghZXF1YWxpdHlGbihjdXJyZW50U2xpY2UsIG5leHRTbGljZSkpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTbGljZSA9IGN1cnJlbnRTbGljZTtcbiAgICAgICAgbGlzdGVuZXIoY3VycmVudFNsaWNlID0gbmV4dFNsaWNlLCBwcmV2aW91c1NsaWNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGlzdGVuZXJzLmFkZChsaXN0ZW5lclRvQWRkKTtcbiAgICByZXR1cm4gKCkgPT4gbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lclRvQWRkKTtcbiAgfTtcbiAgY29uc3Qgc3Vic2NyaWJlID0gKGxpc3RlbmVyLCBzZWxlY3RvciwgZXF1YWxpdHlGbikgPT4ge1xuICAgIGlmIChzZWxlY3RvciB8fCBlcXVhbGl0eUZuKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaWJlV2l0aFNlbGVjdG9yKGxpc3RlbmVyLCBzZWxlY3RvciwgZXF1YWxpdHlGbik7XG4gICAgfVxuICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IGxpc3RlbmVycy5jbGVhcigpO1xuICBjb25zdCBhcGkgPSB7IHNldFN0YXRlLCBnZXRTdGF0ZSwgc3Vic2NyaWJlLCBkZXN0cm95IH07XG4gIHN0YXRlID0gY3JlYXRlU3RhdGUoc2V0U3RhdGUsIGdldFN0YXRlLCBhcGkpO1xuICByZXR1cm4gYXBpO1xufVxuXG5jb25zdCBpc1NTUiA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgIXdpbmRvdy5uYXZpZ2F0b3IgfHwgL1NlcnZlclNpZGVSZW5kZXJpbmd8XkRlbm9cXC8vLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzU1NSID8gdXNlRWZmZWN0IDogdXNlTGF5b3V0RWZmZWN0O1xuZnVuY3Rpb24gY3JlYXRlKGNyZWF0ZVN0YXRlKSB7XG4gIGNvbnN0IGFwaSA9IHR5cGVvZiBjcmVhdGVTdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gY3JlYXRlU3RvcmUoY3JlYXRlU3RhdGUpIDogY3JlYXRlU3RhdGU7XG4gIGNvbnN0IHVzZVN0b3JlID0gKHNlbGVjdG9yID0gYXBpLmdldFN0YXRlLCBlcXVhbGl0eUZuID0gT2JqZWN0LmlzKSA9PiB7XG4gICAgY29uc3QgWywgZm9yY2VVcGRhdGVdID0gdXNlUmVkdWNlcigoYykgPT4gYyArIDEsIDApO1xuICAgIGNvbnN0IHN0YXRlID0gYXBpLmdldFN0YXRlKCk7XG4gICAgY29uc3Qgc3RhdGVSZWYgPSB1c2VSZWYoc3RhdGUpO1xuICAgIGNvbnN0IHNlbGVjdG9yUmVmID0gdXNlUmVmKHNlbGVjdG9yKTtcbiAgICBjb25zdCBlcXVhbGl0eUZuUmVmID0gdXNlUmVmKGVxdWFsaXR5Rm4pO1xuICAgIGNvbnN0IGVycm9yZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGN1cnJlbnRTbGljZVJlZiA9IHVzZVJlZigpO1xuICAgIGlmIChjdXJyZW50U2xpY2VSZWYuY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBjdXJyZW50U2xpY2VSZWYuY3VycmVudCA9IHNlbGVjdG9yKHN0YXRlKTtcbiAgICB9XG4gICAgbGV0IG5ld1N0YXRlU2xpY2U7XG4gICAgbGV0IGhhc05ld1N0YXRlU2xpY2UgPSBmYWxzZTtcbiAgICBpZiAoc3RhdGVSZWYuY3VycmVudCAhPT0gc3RhdGUgfHwgc2VsZWN0b3JSZWYuY3VycmVudCAhPT0gc2VsZWN0b3IgfHwgZXF1YWxpdHlGblJlZi5jdXJyZW50ICE9PSBlcXVhbGl0eUZuIHx8IGVycm9yZWRSZWYuY3VycmVudCkge1xuICAgICAgbmV3U3RhdGVTbGljZSA9IHNlbGVjdG9yKHN0YXRlKTtcbiAgICAgIGhhc05ld1N0YXRlU2xpY2UgPSAhZXF1YWxpdHlGbihjdXJyZW50U2xpY2VSZWYuY3VycmVudCwgbmV3U3RhdGVTbGljZSk7XG4gICAgfVxuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGhhc05ld1N0YXRlU2xpY2UpIHtcbiAgICAgICAgY3VycmVudFNsaWNlUmVmLmN1cnJlbnQgPSBuZXdTdGF0ZVNsaWNlO1xuICAgICAgfVxuICAgICAgc3RhdGVSZWYuY3VycmVudCA9IHN0YXRlO1xuICAgICAgc2VsZWN0b3JSZWYuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgICAgZXF1YWxpdHlGblJlZi5jdXJyZW50ID0gZXF1YWxpdHlGbjtcbiAgICAgIGVycm9yZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIGNvbnN0IHN0YXRlQmVmb3JlU3Vic2NyaXB0aW9uUmVmID0gdXNlUmVmKHN0YXRlKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIGNvbnN0IG5leHRTdGF0ZVNsaWNlID0gc2VsZWN0b3JSZWYuY3VycmVudChuZXh0U3RhdGUpO1xuICAgICAgICAgIGlmICghZXF1YWxpdHlGblJlZi5jdXJyZW50KGN1cnJlbnRTbGljZVJlZi5jdXJyZW50LCBuZXh0U3RhdGVTbGljZSkpIHtcbiAgICAgICAgICAgIHN0YXRlUmVmLmN1cnJlbnQgPSBuZXh0U3RhdGU7XG4gICAgICAgICAgICBjdXJyZW50U2xpY2VSZWYuY3VycmVudCA9IG5leHRTdGF0ZVNsaWNlO1xuICAgICAgICAgICAgZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZXJyb3JlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSBhcGkuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgIGlmIChhcGkuZ2V0U3RhdGUoKSAhPT0gc3RhdGVCZWZvcmVTdWJzY3JpcHRpb25SZWYuY3VycmVudCkge1xuICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCBzbGljZVRvUmV0dXJuID0gaGFzTmV3U3RhdGVTbGljZSA/IG5ld1N0YXRlU2xpY2UgOiBjdXJyZW50U2xpY2VSZWYuY3VycmVudDtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNsaWNlVG9SZXR1cm4pO1xuICAgIHJldHVybiBzbGljZVRvUmV0dXJuO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHVzZVN0b3JlLCBhcGkpO1xuICB1c2VTdG9yZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS53YXJuKFwiW3VzZVN0b3JlLCBhcGldID0gY3JlYXRlKCkgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY0XCIpO1xuICAgIGNvbnN0IGl0ZW1zID0gW3VzZVN0b3JlLCBhcGldO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0KCkge1xuICAgICAgICBjb25zdCBkb25lID0gaXRlbXMubGVuZ3RoIDw9IDA7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBpdGVtcy5zaGlmdCgpLCBkb25lIH07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHVzZVN0b3JlO1xufVxuXG5leHBvcnQgeyBjcmVhdGUgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwiY3JlYXRlU3RvcmUiLCJjcmVhdGVTdGF0ZSIsInN0YXRlIiwibGlzdGVuZXJzIiwiU2V0Iiwic2V0U3RhdGUiLCJwYXJ0aWFsIiwicmVwbGFjZSIsIm5leHRTdGF0ZSIsInByZXZpb3VzU3RhdGUiLCJPYmplY3QiLCJhc3NpZ24iLCJmb3JFYWNoIiwibGlzdGVuZXIiLCJnZXRTdGF0ZSIsInN1YnNjcmliZVdpdGhTZWxlY3RvciIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsImlzIiwiY29uc29sZSIsIndhcm4iLCJjdXJyZW50U2xpY2UiLCJsaXN0ZW5lclRvQWRkIiwibmV4dFNsaWNlIiwicHJldmlvdXNTbGljZSIsImFkZCIsImRlbGV0ZSIsInN1YnNjcmliZSIsImRlc3Ryb3kiLCJjbGVhciIsImFwaSIsImlzU1NSIiwid2luZG93IiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJjcmVhdGUiLCJ1c2VTdG9yZSIsImZvcmNlVXBkYXRlIiwiYyIsInN0YXRlUmVmIiwic2VsZWN0b3JSZWYiLCJlcXVhbGl0eUZuUmVmIiwiZXJyb3JlZFJlZiIsImN1cnJlbnRTbGljZVJlZiIsImN1cnJlbnQiLCJuZXdTdGF0ZVNsaWNlIiwiaGFzTmV3U3RhdGVTbGljZSIsInN0YXRlQmVmb3JlU3Vic2NyaXB0aW9uUmVmIiwibmV4dFN0YXRlU2xpY2UiLCJlcnJvciIsInVuc3Vic2NyaWJlIiwic2xpY2VUb1JldHVybiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaXRlbXMiLCJuZXh0IiwiZG9uZSIsImxlbmd0aCIsInZhbHVlIiwic2hpZnQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/node_modules/zustand/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/node_modules/zustand/esm/middleware.js":
/*!******************************************************************!*\
  !*** ./node_modules/leva/node_modules/zustand/esm/middleware.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   devtools: () => (/* binding */ devtools),\n/* harmony export */   persist: () => (/* binding */ persist),\n/* harmony export */   redux: () => (/* binding */ redux),\n/* harmony export */   subscribeWithSelector: () => (/* binding */ subscribeWithSelector)\n/* harmony export */ });\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues$1 = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n    if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)){\n        if (__propIsEnum$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n    }\n    return a;\n};\nconst redux = (reducer, initial)=>(set, get, api)=>{\n        api.dispatch = (action)=>{\n            set((state)=>reducer(state, action), false, action);\n            return action;\n        };\n        api.dispatchFromDevtools = true;\n        return __spreadValues$1({\n            dispatch: (...a)=>api.dispatch(...a)\n        }, initial);\n    };\nfunction devtools(fn, options) {\n    return (set, get, api)=>{\n        var _a;\n        let didWarnAboutNameDeprecation = false;\n        if (typeof options === \"string\" && !didWarnAboutNameDeprecation) {\n            console.warn(\"[zustand devtools middleware]: passing `name` as directly will be not allowed in next majorpass the `name` in an object `{ name: ... }` instead\");\n            didWarnAboutNameDeprecation = true;\n        }\n        const devtoolsOptions = options === void 0 ? {\n            name: void 0,\n            anonymousActionType: void 0\n        } : typeof options === \"string\" ? {\n            name: options\n        } : options;\n        if (typeof ((_a = devtoolsOptions == null ? void 0 : devtoolsOptions.serialize) == null ? void 0 : _a.options) !== \"undefined\") {\n            console.warn(\"[zustand devtools middleware]: `serialize.options` is deprecated, just use `serialize`\");\n        }\n        let extensionConnector;\n        try {\n            extensionConnector = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;\n        } catch  {}\n        if (!extensionConnector) {\n            if (false) {}\n            return fn(set, get, api);\n        }\n        let extension = Object.create(extensionConnector.connect(devtoolsOptions));\n        let didWarnAboutDevtools = false;\n        Object.defineProperty(api, \"devtools\", {\n            get: ()=>{\n                if (!didWarnAboutDevtools) {\n                    console.warn(\"[zustand devtools middleware] `devtools` property on the store is deprecated it will be removed in the next major.\\nYou shouldn't interact with the extension directly. But in case you still want to you can patch `window.__REDUX_DEVTOOLS_EXTENSION__` directly\");\n                    didWarnAboutDevtools = true;\n                }\n                return extension;\n            },\n            set: (value)=>{\n                if (!didWarnAboutDevtools) {\n                    console.warn(\"[zustand devtools middleware] `api.devtools` is deprecated, it will be removed in the next major.\\nYou shouldn't interact with the extension directly. But in case you still want to you can patch `window.__REDUX_DEVTOOLS_EXTENSION__` directly\");\n                    didWarnAboutDevtools = true;\n                }\n                extension = value;\n            }\n        });\n        let didWarnAboutPrefix = false;\n        Object.defineProperty(extension, \"prefix\", {\n            get: ()=>{\n                if (!didWarnAboutPrefix) {\n                    console.warn(\"[zustand devtools middleware] along with `api.devtools`, `api.devtools.prefix` is deprecated.\\nWe no longer prefix the actions/names\" + devtoolsOptions.name === void 0 ? \", pass the `name` option to create a separate instance of devtools for each store.\" : \", because the `name` option already creates a separate instance of devtools for each store.\");\n                    didWarnAboutPrefix = true;\n                }\n                return \"\";\n            },\n            set: ()=>{\n                if (!didWarnAboutPrefix) {\n                    console.warn(\"[zustand devtools middleware] along with `api.devtools`, `api.devtools.prefix` is deprecated.\\nWe no longer prefix the actions/names\" + devtoolsOptions.name === void 0 ? \", pass the `name` option to create a separate instance of devtools for each store.\" : \", because the `name` option already creates a separate instance of devtools for each store.\");\n                    didWarnAboutPrefix = true;\n                }\n            }\n        });\n        let isRecording = true;\n        api.setState = (state, replace, nameOrAction)=>{\n            set(state, replace);\n            if (!isRecording) return;\n            extension.send(nameOrAction === void 0 ? {\n                type: devtoolsOptions.anonymousActionType || \"anonymous\"\n            } : typeof nameOrAction === \"string\" ? {\n                type: nameOrAction\n            } : nameOrAction, get());\n        };\n        const setStateFromDevtools = (...a)=>{\n            const originalIsRecording = isRecording;\n            isRecording = false;\n            set(...a);\n            isRecording = originalIsRecording;\n        };\n        const initialState = fn(api.setState, get, api);\n        extension.init(initialState);\n        if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\n            let didWarnAboutReservedActionType = false;\n            const originalDispatch = api.dispatch;\n            api.dispatch = (...a)=>{\n                if (a[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\n                    console.warn('[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.');\n                    didWarnAboutReservedActionType = true;\n                }\n                originalDispatch(...a);\n            };\n        }\n        extension.subscribe((message)=>{\n            var _a2;\n            switch(message.type){\n                case \"ACTION\":\n                    if (typeof message.payload !== \"string\") {\n                        console.error(\"[zustand devtools middleware] Unsupported action format\");\n                        return;\n                    }\n                    return parseJsonThen(message.payload, (action)=>{\n                        if (action.type === \"__setState\") {\n                            setStateFromDevtools(action.state);\n                            return;\n                        }\n                        if (!api.dispatchFromDevtools) return;\n                        if (typeof api.dispatch !== \"function\") return;\n                        api.dispatch(action);\n                    });\n                case \"DISPATCH\":\n                    switch(message.payload.type){\n                        case \"RESET\":\n                            setStateFromDevtools(initialState);\n                            return extension.init(api.getState());\n                        case \"COMMIT\":\n                            return extension.init(api.getState());\n                        case \"ROLLBACK\":\n                            return parseJsonThen(message.state, (state)=>{\n                                setStateFromDevtools(state);\n                                extension.init(api.getState());\n                            });\n                        case \"JUMP_TO_STATE\":\n                        case \"JUMP_TO_ACTION\":\n                            return parseJsonThen(message.state, (state)=>{\n                                setStateFromDevtools(state);\n                            });\n                        case \"IMPORT_STATE\":\n                            {\n                                const { nextLiftedState } = message.payload;\n                                const lastComputedState = (_a2 = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a2.state;\n                                if (!lastComputedState) return;\n                                setStateFromDevtools(lastComputedState);\n                                extension.send(null, nextLiftedState);\n                                return;\n                            }\n                        case \"PAUSE_RECORDING\":\n                            return isRecording = !isRecording;\n                    }\n                    return;\n            }\n        });\n        return initialState;\n    };\n}\nconst parseJsonThen = (stringified, f)=>{\n    let parsed;\n    try {\n        parsed = JSON.parse(stringified);\n    } catch (e) {\n        console.error(\"[zustand devtools middleware] Could not parse the received json\", e);\n    }\n    if (parsed !== void 0) f(parsed);\n};\nconst subscribeWithSelector = (fn)=>(set, get, api)=>{\n        const origSubscribe = api.subscribe;\n        api.subscribe = (selector, optListener, options)=>{\n            let listener = selector;\n            if (optListener) {\n                const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n                let currentSlice = selector(api.getState());\n                listener = (state)=>{\n                    const nextSlice = selector(state);\n                    if (!equalityFn(currentSlice, nextSlice)) {\n                        const previousSlice = currentSlice;\n                        optListener(currentSlice = nextSlice, previousSlice);\n                    }\n                };\n                if (options == null ? void 0 : options.fireImmediately) {\n                    optListener(currentSlice, currentSlice);\n                }\n            }\n            return origSubscribe(listener);\n        };\n        const initialState = fn(set, get, api);\n        return initialState;\n    };\nconst combine = (initialState, create)=>(set, get, api)=>Object.assign({}, initialState, create(set, get, api));\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nconst toThenable = (fn)=>(input)=>{\n        try {\n            const result = fn(input);\n            if (result instanceof Promise) {\n                return result;\n            }\n            return {\n                then (onFulfilled) {\n                    return toThenable(onFulfilled)(result);\n                },\n                catch (_onRejected) {\n                    return this;\n                }\n            };\n        } catch (e) {\n            return {\n                then (_onFulfilled) {\n                    return this;\n                },\n                catch (onRejected) {\n                    return toThenable(onRejected)(e);\n                }\n            };\n        }\n    };\nconst persist = (config, baseOptions)=>(set, get, api)=>{\n        let options = __spreadValues({\n            getStorage: ()=>localStorage,\n            serialize: JSON.stringify,\n            deserialize: JSON.parse,\n            partialize: (state)=>state,\n            version: 0,\n            merge: (persistedState, currentState)=>__spreadValues(__spreadValues({}, currentState), persistedState)\n        }, baseOptions);\n        if (options.blacklist || options.whitelist) {\n            console.warn(`The ${options.blacklist ? \"blacklist\" : \"whitelist\"} option is deprecated and will be removed in the next version. Please use the 'partialize' option instead.`);\n        }\n        let hasHydrated = false;\n        const hydrationListeners = /* @__PURE__ */ new Set();\n        const finishHydrationListeners = /* @__PURE__ */ new Set();\n        let storage;\n        try {\n            storage = options.getStorage();\n        } catch (e) {}\n        if (!storage) {\n            return config((...args)=>{\n                console.warn(`[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`);\n                set(...args);\n            }, get, api);\n        } else if (!storage.removeItem) {\n            console.warn(`[zustand persist middleware] The given storage for item '${options.name}' does not contain a 'removeItem' method, which will be required in v4.`);\n        }\n        const thenableSerialize = toThenable(options.serialize);\n        const setItem = ()=>{\n            const state = options.partialize(__spreadValues({}, get()));\n            if (options.whitelist) {\n                Object.keys(state).forEach((key)=>{\n                    var _a;\n                    !((_a = options.whitelist) == null ? void 0 : _a.includes(key)) && delete state[key];\n                });\n            }\n            if (options.blacklist) {\n                options.blacklist.forEach((key)=>delete state[key]);\n            }\n            let errorInSync;\n            const thenable = thenableSerialize({\n                state,\n                version: options.version\n            }).then((serializedValue)=>storage.setItem(options.name, serializedValue)).catch((e)=>{\n                errorInSync = e;\n            });\n            if (errorInSync) {\n                throw errorInSync;\n            }\n            return thenable;\n        };\n        const savedSetState = api.setState;\n        api.setState = (state, replace)=>{\n            savedSetState(state, replace);\n            void setItem();\n        };\n        const configResult = config((...args)=>{\n            set(...args);\n            void setItem();\n        }, get, api);\n        let stateFromStorage;\n        const hydrate = ()=>{\n            var _a;\n            if (!storage) return;\n            hasHydrated = false;\n            hydrationListeners.forEach((cb)=>cb(get()));\n            const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get())) || void 0;\n            return toThenable(storage.getItem.bind(storage))(options.name).then((storageValue)=>{\n                if (storageValue) {\n                    return options.deserialize(storageValue);\n                }\n            }).then((deserializedStorageValue)=>{\n                if (deserializedStorageValue) {\n                    if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n                        if (options.migrate) {\n                            return options.migrate(deserializedStorageValue.state, deserializedStorageValue.version);\n                        }\n                        console.error(`State loaded from storage couldn't be migrated since no migrate function was provided`);\n                    } else {\n                        return deserializedStorageValue.state;\n                    }\n                }\n            }).then((migratedState)=>{\n                var _a2;\n                stateFromStorage = options.merge(migratedState, (_a2 = get()) != null ? _a2 : configResult);\n                set(stateFromStorage, true);\n                return setItem();\n            }).then(()=>{\n                postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n                hasHydrated = true;\n                finishHydrationListeners.forEach((cb)=>cb(stateFromStorage));\n            }).catch((e)=>{\n                postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\n            });\n        };\n        api.persist = {\n            setOptions: (newOptions)=>{\n                options = __spreadValues(__spreadValues({}, options), newOptions);\n                if (newOptions.getStorage) {\n                    storage = newOptions.getStorage();\n                }\n            },\n            clearStorage: ()=>{\n                var _a;\n                (_a = storage == null ? void 0 : storage.removeItem) == null ? void 0 : _a.call(storage, options.name);\n            },\n            rehydrate: ()=>hydrate(),\n            hasHydrated: ()=>hasHydrated,\n            onHydrate: (cb)=>{\n                hydrationListeners.add(cb);\n                return ()=>{\n                    hydrationListeners.delete(cb);\n                };\n            },\n            onFinishHydration: (cb)=>{\n                finishHydrationListeners.add(cb);\n                return ()=>{\n                    finishHydrationListeners.delete(cb);\n                };\n            }\n        };\n        hydrate();\n        return stateFromStorage || configResult;\n    };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/node_modules/zustand/esm/middleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/leva/node_modules/zustand/esm/shallow.js":
/*!***************************************************************!*\
  !*** ./node_modules/leva/node_modules/zustand/esm/shallow.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ shallow)\n/* harmony export */ });\nfunction shallow(objA, objB) {\n    if (Object.is(objA, objB)) {\n        return true;\n    }\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false;\n    }\n    const keysA = Object.keys(objA);\n    if (keysA.length !== Object.keys(objB).length) {\n        return false;\n    }\n    for(let i = 0; i < keysA.length; i++){\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGV2YS9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vc2hhbGxvdy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsUUFBUUMsSUFBSSxFQUFFQyxJQUFJO0lBQ3pCLElBQUlDLE9BQU9DLEVBQUUsQ0FBQ0gsTUFBTUMsT0FBTztRQUN6QixPQUFPO0lBQ1Q7SUFDQSxJQUFJLE9BQU9ELFNBQVMsWUFBWUEsU0FBUyxRQUFRLE9BQU9DLFNBQVMsWUFBWUEsU0FBUyxNQUFNO1FBQzFGLE9BQU87SUFDVDtJQUNBLE1BQU1HLFFBQVFGLE9BQU9HLElBQUksQ0FBQ0w7SUFDMUIsSUFBSUksTUFBTUUsTUFBTSxLQUFLSixPQUFPRyxJQUFJLENBQUNKLE1BQU1LLE1BQU0sRUFBRTtRQUM3QyxPQUFPO0lBQ1Q7SUFDQSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsTUFBTUUsTUFBTSxFQUFFQyxJQUFLO1FBQ3JDLElBQUksQ0FBQ0wsT0FBT00sU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1QsTUFBTUcsS0FBSyxDQUFDRyxFQUFFLEtBQUssQ0FBQ0wsT0FBT0MsRUFBRSxDQUFDSCxJQUFJLENBQUNJLEtBQUssQ0FBQ0csRUFBRSxDQUFDLEVBQUVOLElBQUksQ0FBQ0csS0FBSyxDQUFDRyxFQUFFLENBQUMsR0FBRztZQUN2RyxPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9sZXZhL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS9zaGFsbG93LmpzPzg1ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc2hhbGxvdyhvYmpBLCBvYmpCKSB7XG4gIGlmIChPYmplY3QuaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG9iakIpLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFPYmplY3QuaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgc2hhbGxvdyBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsic2hhbGxvdyIsIm9iakEiLCJvYmpCIiwiT2JqZWN0IiwiaXMiLCJrZXlzQSIsImtleXMiLCJsZW5ndGgiLCJpIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/leva/node_modules/zustand/esm/shallow.js\n");

/***/ })

};
;