"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hotkeys-js";
exports.ids = ["vendor-chunks/hotkeys-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/hotkeys-js/dist/hotkeys.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/hotkeys-js/dist/hotkeys.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ hotkeys)\n/* harmony export */ });\n/**! \n * hotkeys-js v3.12.0 \n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. \n * \n * Copyright (c) 2023 kenny wong <wowohoo@qq.com> \n * https://jaywcjlove.github.io/hotkeys-js \n * Licensed under the MIT license \n */ var isff = typeof navigator !== \"undefined\" ? navigator.userAgent.toLowerCase().indexOf(\"firefox\") > 0 : false;\n// 绑定事件\nfunction addEvent(object, event, method, useCapture) {\n    if (object.addEventListener) {\n        object.addEventListener(event, method, useCapture);\n    } else if (object.attachEvent) {\n        object.attachEvent(\"on\".concat(event), function() {\n            method(window.event);\n        });\n    }\n}\n// 修饰键转换成对应的键码\nfunction getMods(modifier, key) {\n    var mods = key.slice(0, key.length - 1);\n    for(var i = 0; i < mods.length; i++)mods[i] = modifier[mods[i].toLowerCase()];\n    return mods;\n}\n// 处理传的key字符串转换成数组\nfunction getKeys(key) {\n    if (typeof key !== \"string\") key = \"\";\n    key = key.replace(/\\s/g, \"\"); // 匹配任何空白字符,包括空格、制表符、换页符等等\n    var keys = key.split(\",\"); // 同时设置多个快捷键，以','分割\n    var index = keys.lastIndexOf(\"\");\n    // 快捷键可能包含','，需特殊处理\n    for(; index >= 0;){\n        keys[index - 1] += \",\";\n        keys.splice(index, 1);\n        index = keys.lastIndexOf(\"\");\n    }\n    return keys;\n}\n// 比较修饰键的数组\nfunction compareArray(a1, a2) {\n    var arr1 = a1.length >= a2.length ? a1 : a2;\n    var arr2 = a1.length >= a2.length ? a2 : a1;\n    var isIndex = true;\n    for(var i = 0; i < arr1.length; i++){\n        if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n    }\n    return isIndex;\n}\n// Special Keys\nvar _keyMap = {\n    backspace: 8,\n    \"⌫\": 8,\n    tab: 9,\n    clear: 12,\n    enter: 13,\n    \"↩\": 13,\n    return: 13,\n    esc: 27,\n    escape: 27,\n    space: 32,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    del: 46,\n    delete: 46,\n    ins: 45,\n    insert: 45,\n    home: 36,\n    end: 35,\n    pageup: 33,\n    pagedown: 34,\n    capslock: 20,\n    num_0: 96,\n    num_1: 97,\n    num_2: 98,\n    num_3: 99,\n    num_4: 100,\n    num_5: 101,\n    num_6: 102,\n    num_7: 103,\n    num_8: 104,\n    num_9: 105,\n    num_multiply: 106,\n    num_add: 107,\n    num_enter: 108,\n    num_subtract: 109,\n    num_decimal: 110,\n    num_divide: 111,\n    \"⇪\": 20,\n    \",\": 188,\n    \".\": 190,\n    \"/\": 191,\n    \"`\": 192,\n    \"-\": isff ? 173 : 189,\n    \"=\": isff ? 61 : 187,\n    \";\": isff ? 59 : 186,\n    \"'\": 222,\n    \"[\": 219,\n    \"]\": 221,\n    \"\\\\\": 220\n};\n// Modifier Keys\nvar _modifier = {\n    // shiftKey\n    \"⇧\": 16,\n    shift: 16,\n    // altKey\n    \"⌥\": 18,\n    alt: 18,\n    option: 18,\n    // ctrlKey\n    \"⌃\": 17,\n    ctrl: 17,\n    control: 17,\n    // metaKey\n    \"⌘\": 91,\n    cmd: 91,\n    command: 91\n};\nvar modifierMap = {\n    16: \"shiftKey\",\n    18: \"altKey\",\n    17: \"ctrlKey\",\n    91: \"metaKey\",\n    shiftKey: 16,\n    ctrlKey: 17,\n    altKey: 18,\n    metaKey: 91\n};\nvar _mods = {\n    16: false,\n    18: false,\n    17: false,\n    91: false\n};\nvar _handlers = {};\n// F1~F12 special key\nfor(var k = 1; k < 20; k++){\n    _keyMap[\"f\".concat(k)] = 111 + k;\n}\nvar _downKeys = []; // 记录摁下的绑定键\nvar winListendFocus = false; // window是否已经监听了focus事件\nvar _scope = \"all\"; // 默认热键范围\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n// 返回键码\nvar code = function code(x) {\n    return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n};\nvar getKey = function getKey(x) {\n    return Object.keys(_keyMap).find(function(k) {\n        return _keyMap[k] === x;\n    });\n};\nvar getModifier = function getModifier(x) {\n    return Object.keys(_modifier).find(function(k) {\n        return _modifier[k] === x;\n    });\n};\n// 设置获取当前范围（默认为'所有'）\nfunction setScope(scope) {\n    _scope = scope || \"all\";\n}\n// 获取当前范围\nfunction getScope() {\n    return _scope || \"all\";\n}\n// 获取摁下绑定键的键值\nfunction getPressedKeyCodes() {\n    return _downKeys.slice(0);\n}\nfunction getPressedKeyString() {\n    return _downKeys.map(function(c) {\n        return getKey(c) || getModifier(c) || String.fromCharCode(c);\n    });\n}\nfunction getAllKeyCodes() {\n    var result = [];\n    Object.keys(_handlers).forEach(function(k) {\n        _handlers[k].forEach(function(_ref) {\n            var key = _ref.key, scope = _ref.scope, mods = _ref.mods, shortcut = _ref.shortcut;\n            result.push({\n                scope: scope,\n                shortcut: shortcut,\n                mods: mods,\n                keys: key.split(\"+\").map(function(v) {\n                    return code(v);\n                })\n            });\n        });\n    });\n    return result;\n}\n// 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\nfunction filter(event) {\n    var target = event.target || event.srcElement;\n    var tagName = target.tagName;\n    var flag = true;\n    // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n    if (target.isContentEditable || (tagName === \"INPUT\" || tagName === \"TEXTAREA\" || tagName === \"SELECT\") && !target.readOnly) {\n        flag = false;\n    }\n    return flag;\n}\n// 判断摁下的键是否为某个键，返回true或者false\nfunction isPressed(keyCode) {\n    if (typeof keyCode === \"string\") {\n        keyCode = code(keyCode); // 转换成键码\n    }\n    return _downKeys.indexOf(keyCode) !== -1;\n}\n// 循环删除handlers中的所有 scope(范围)\nfunction deleteScope(scope, newScope) {\n    var handlers;\n    var i;\n    // 没有指定scope，获取scope\n    if (!scope) scope = getScope();\n    for(var key in _handlers){\n        if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n            handlers = _handlers[key];\n            for(i = 0; i < handlers.length;){\n                if (handlers[i].scope === scope) handlers.splice(i, 1);\n                else i++;\n            }\n        }\n    }\n    // 如果scope被删除，将scope重置为all\n    if (getScope() === scope) setScope(newScope || \"all\");\n}\n// 清除修饰键\nfunction clearModifier(event) {\n    var key = event.keyCode || event.which || event.charCode;\n    var i = _downKeys.indexOf(key);\n    // 从列表中清除按压过的键\n    if (i >= 0) {\n        _downKeys.splice(i, 1);\n    }\n    // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n    if (event.key && event.key.toLowerCase() === \"meta\") {\n        _downKeys.splice(0, _downKeys.length);\n    }\n    // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n    if (key === 93 || key === 224) key = 91;\n    if (key in _mods) {\n        _mods[key] = false;\n        // 将修饰键重置为false\n        for(var k in _modifier)if (_modifier[k] === key) hotkeys[k] = false;\n    }\n}\nfunction unbind(keysInfo) {\n    // unbind(), unbind all keys\n    if (typeof keysInfo === \"undefined\") {\n        Object.keys(_handlers).forEach(function(key) {\n            return delete _handlers[key];\n        });\n    } else if (Array.isArray(keysInfo)) {\n        // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n        keysInfo.forEach(function(info) {\n            if (info.key) eachUnbind(info);\n        });\n    } else if (typeof keysInfo === \"object\") {\n        // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n        if (keysInfo.key) eachUnbind(keysInfo);\n    } else if (typeof keysInfo === \"string\") {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        // support old method\n        // eslint-disable-line\n        var scope = args[0], method = args[1];\n        if (typeof scope === \"function\") {\n            method = scope;\n            scope = \"\";\n        }\n        eachUnbind({\n            key: keysInfo,\n            scope: scope,\n            method: method,\n            splitKey: \"+\"\n        });\n    }\n}\n// 解除绑定某个范围的快捷键\nvar eachUnbind = function eachUnbind(_ref2) {\n    var key = _ref2.key, scope = _ref2.scope, method = _ref2.method, _ref2$splitKey = _ref2.splitKey, splitKey = _ref2$splitKey === void 0 ? \"+\" : _ref2$splitKey;\n    var multipleKeys = getKeys(key);\n    multipleKeys.forEach(function(originKey) {\n        var unbindKeys = originKey.split(splitKey);\n        var len = unbindKeys.length;\n        var lastKey = unbindKeys[len - 1];\n        var keyCode = lastKey === \"*\" ? \"*\" : code(lastKey);\n        if (!_handlers[keyCode]) return;\n        // 判断是否传入范围，没有就获取范围\n        if (!scope) scope = getScope();\n        var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n        _handlers[keyCode] = _handlers[keyCode].filter(function(record) {\n            // 通过函数判断，是否解除绑定，函数相等直接返回\n            var isMatchingMethod = method ? record.method === method : true;\n            return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));\n        });\n    });\n};\n// 对监听对应快捷键的回调函数进行处理\nfunction eventHandler(event, handler, scope, element) {\n    if (handler.element !== element) {\n        return;\n    }\n    var modifiersMatch;\n    // 看它是否在当前范围\n    if (handler.scope === scope || handler.scope === \"all\") {\n        // 检查是否匹配修饰符（如果有返回true）\n        modifiersMatch = handler.mods.length > 0;\n        for(var y in _mods){\n            if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n                if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n                    modifiersMatch = false;\n                }\n            }\n        }\n        // 调用处理程序，如果是修饰键不做处理\n        if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === \"*\") {\n            handler.keys = [];\n            handler.keys = handler.keys.concat(_downKeys);\n            if (handler.method(event, handler) === false) {\n                if (event.preventDefault) event.preventDefault();\n                else event.returnValue = false;\n                if (event.stopPropagation) event.stopPropagation();\n                if (event.cancelBubble) event.cancelBubble = true;\n            }\n        }\n    }\n}\n// 处理keydown事件\nfunction dispatch(event, element) {\n    var asterisk = _handlers[\"*\"];\n    var key = event.keyCode || event.which || event.charCode;\n    // 表单控件过滤 默认表单控件不触发快捷键\n    if (!hotkeys.filter.call(this, event)) return;\n    // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n    // Webkit左右 command 键值不一样\n    if (key === 93 || key === 224) key = 91;\n    /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */ if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n    /**\n   * Jest test cases are required.\n   * ===============================\n   */ [\n        \"ctrlKey\",\n        \"altKey\",\n        \"shiftKey\",\n        \"metaKey\"\n    ].forEach(function(keyName) {\n        var keyNum = modifierMap[keyName];\n        if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n            _downKeys.push(keyNum);\n        } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n            _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n        } else if (keyName === \"metaKey\" && event[keyName] && _downKeys.length === 3) {\n            /**\n       * Fix if Command is pressed:\n       * ===============================\n       */ if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n                _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n            }\n        }\n    });\n    /**\n   * -------------------------------\n   */ if (key in _mods) {\n        _mods[key] = true;\n        // 将特殊字符的key注册到 hotkeys 上\n        for(var k in _modifier){\n            if (_modifier[k] === key) hotkeys[k] = true;\n        }\n        if (!asterisk) return;\n    }\n    // 将 modifierMap 里面的修饰键绑定到 event 中\n    for(var e in _mods){\n        if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n            _mods[e] = event[modifierMap[e]];\n        }\n    }\n    /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */ if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState(\"AltGraph\")) {\n        if (_downKeys.indexOf(17) === -1) {\n            _downKeys.push(17);\n        }\n        if (_downKeys.indexOf(18) === -1) {\n            _downKeys.push(18);\n        }\n        _mods[17] = true;\n        _mods[18] = true;\n    }\n    // 获取范围 默认为 `all`\n    var scope = getScope();\n    // 对任何快捷键都需要做的处理\n    if (asterisk) {\n        for(var i = 0; i < asterisk.length; i++){\n            if (asterisk[i].scope === scope && (event.type === \"keydown\" && asterisk[i].keydown || event.type === \"keyup\" && asterisk[i].keyup)) {\n                eventHandler(event, asterisk[i], scope, element);\n            }\n        }\n    }\n    // key 不在 _handlers 中返回\n    if (!(key in _handlers)) return;\n    for(var _i = 0; _i < _handlers[key].length; _i++){\n        if (event.type === \"keydown\" && _handlers[key][_i].keydown || event.type === \"keyup\" && _handlers[key][_i].keyup) {\n            if (_handlers[key][_i].key) {\n                var record = _handlers[key][_i];\n                var splitKey = record.splitKey;\n                var keyShortcut = record.key.split(splitKey);\n                var _downKeysCurrent = []; // 记录当前按键键值\n                for(var a = 0; a < keyShortcut.length; a++){\n                    _downKeysCurrent.push(code(keyShortcut[a]));\n                }\n                if (_downKeysCurrent.sort().join(\"\") === _downKeys.sort().join(\"\")) {\n                    // 找到处理内容\n                    eventHandler(event, record, scope, element);\n                }\n            }\n        }\n    }\n}\n// 判断 element 是否已经绑定事件\nfunction isElementBind(element) {\n    return elementHasBindEvent.indexOf(element) > -1;\n}\nfunction hotkeys(key, option, method) {\n    _downKeys = [];\n    var keys = getKeys(key); // 需要处理的快捷键列表\n    var mods = [];\n    var scope = \"all\"; // scope默认为all，所有范围都有效\n    var element = document; // 快捷键事件绑定节点\n    var i = 0;\n    var keyup = false;\n    var keydown = true;\n    var splitKey = \"+\";\n    var capture = false;\n    // 对为设定范围的判断\n    if (method === undefined && typeof option === \"function\") {\n        method = option;\n    }\n    if (Object.prototype.toString.call(option) === \"[object Object]\") {\n        if (option.scope) scope = option.scope; // eslint-disable-line\n        if (option.element) element = option.element; // eslint-disable-line\n        if (option.keyup) keyup = option.keyup; // eslint-disable-line\n        if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n        if (option.capture !== undefined) capture = option.capture; // eslint-disable-line\n        if (typeof option.splitKey === \"string\") splitKey = option.splitKey; // eslint-disable-line\n    }\n    if (typeof option === \"string\") scope = option;\n    // 对于每个快捷键进行处理\n    for(; i < keys.length; i++){\n        key = keys[i].split(splitKey); // 按键列表\n        mods = [];\n        // 如果是组合快捷键取得组合快捷键\n        if (key.length > 1) mods = getMods(_modifier, key);\n        // 将非修饰键转化为键码\n        key = key[key.length - 1];\n        key = key === \"*\" ? \"*\" : code(key); // *表示匹配所有快捷键\n        // 判断key是否在_handlers中，不在就赋一个空数组\n        if (!(key in _handlers)) _handlers[key] = [];\n        _handlers[key].push({\n            keyup: keyup,\n            keydown: keydown,\n            scope: scope,\n            mods: mods,\n            shortcut: keys[i],\n            method: method,\n            key: keys[i],\n            splitKey: splitKey,\n            element: element\n        });\n    }\n    // 在全局document上设置快捷键\n    if (typeof element !== \"undefined\" && !isElementBind(element) && window) {\n        elementHasBindEvent.push(element);\n        addEvent(element, \"keydown\", function(e) {\n            dispatch(e, element);\n        }, capture);\n        if (!winListendFocus) {\n            winListendFocus = true;\n            addEvent(window, \"focus\", function() {\n                _downKeys = [];\n            }, capture);\n        }\n        addEvent(element, \"keyup\", function(e) {\n            dispatch(e, element);\n            clearModifier(e);\n        }, capture);\n    }\n}\nfunction trigger(shortcut) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all\";\n    Object.keys(_handlers).forEach(function(key) {\n        var dataList = _handlers[key].filter(function(item) {\n            return item.scope === scope && item.shortcut === shortcut;\n        });\n        dataList.forEach(function(data) {\n            if (data && data.method) {\n                data.method();\n            }\n        });\n    });\n}\nvar _api = {\n    getPressedKeyString: getPressedKeyString,\n    setScope: setScope,\n    getScope: getScope,\n    deleteScope: deleteScope,\n    getPressedKeyCodes: getPressedKeyCodes,\n    getAllKeyCodes: getAllKeyCodes,\n    isPressed: isPressed,\n    filter: filter,\n    trigger: trigger,\n    unbind: unbind,\n    keyMap: _keyMap,\n    modifier: _modifier,\n    modifierMap: modifierMap\n};\nfor(var a in _api){\n    if (Object.prototype.hasOwnProperty.call(_api, a)) {\n        hotkeys[a] = _api[a];\n    }\n}\nif (false) { var _hotkeys; }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hotkeys-js/dist/hotkeys.esm.js\n");

/***/ })

};
;