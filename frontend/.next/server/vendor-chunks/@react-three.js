"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-three";
exports.ids = ["vendor-chunks/@react-three"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-three/drei/core/GizmoHelper.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/GizmoHelper.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GizmoHelper: () => (/* binding */ GizmoHelper),\n/* harmony export */   useGizmoContext: () => (/* binding */ useGizmoContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _OrthographicCamera_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./OrthographicCamera.js */ \"(ssr)/./node_modules/@react-three/drei/core/OrthographicCamera.js\");\n/* harmony import */ var _Hud_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Hud.js */ \"(ssr)/./node_modules/@react-three/drei/core/Hud.js\");\n\n\n\n\n\nconst Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nconst useGizmoContext = ()=>{\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(Context);\n};\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\nconst dummy = new three__WEBPACK_IMPORTED_MODULE_1__.Object3D();\nconst matrix = new three__WEBPACK_IMPORTED_MODULE_1__.Matrix4();\nconst [q1, q2] = [\n    new three__WEBPACK_IMPORTED_MODULE_1__.Quaternion(),\n    new three__WEBPACK_IMPORTED_MODULE_1__.Quaternion()\n];\nconst target = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\nconst targetPosition = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\nconst isOrbitControls = (controls)=>{\n    return \"minPolarAngle\" in controls;\n};\nconst GizmoHelper = ({ alignment = \"bottom-right\", margin = [\n    80,\n    80\n], renderPriority = 1, onUpdate, onTarget, children })=>{\n    const size = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.z)((state)=>state.size);\n    const mainCamera = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.z)((state)=>state.camera); // @ts-ignore\n    const defaultControls = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.z)((state)=>state.controls);\n    const invalidate = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.z)((state)=>state.invalidate);\n    const gizmoRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const virtualCam = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const animating = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const radius = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const focusPoint = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0));\n    const defaultUp = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        defaultUp.current.copy(mainCamera.up);\n    }, [\n        mainCamera\n    ]);\n    const tweenCamera = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((direction)=>{\n        animating.current = true;\n        if (defaultControls || onTarget) focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());\n        radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n        q1.copy(mainCamera.quaternion); // To new current camera orientation\n        targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n        dummy.lookAt(targetPosition);\n        dummy.up.copy(mainCamera.up);\n        q2.copy(dummy.quaternion);\n        invalidate();\n    }, [\n        defaultControls,\n        mainCamera,\n        onTarget,\n        invalidate\n    ]);\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.A)((_, delta)=>{\n        if (virtualCam.current && gizmoRef.current) {\n            var _gizmoRef$current;\n            // Animate step\n            if (animating.current) {\n                if (q1.angleTo(q2) < 0.01) {\n                    animating.current = false; // Orbit controls uses UP vector as the orbit axes,\n                    // so we need to reset it after the animation is done\n                    // moving it around for the controls to work correctly\n                    if (isOrbitControls(defaultControls)) {\n                        mainCamera.up.copy(defaultUp.current);\n                    }\n                } else {\n                    const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n                    q1.rotateTowards(q2, step); // animate orientation\n                    mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);\n                    mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();\n                    mainCamera.quaternion.copy(q1);\n                    if (onUpdate) onUpdate();\n                    else if (defaultControls) defaultControls.update();\n                    invalidate();\n                }\n            } // Sync Gizmo with main camera orientation\n            matrix.copy(mainCamera.matrix).invert();\n            (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix);\n        }\n    });\n    const gizmoHelperContext = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            tweenCamera\n        }), [\n        tweenCamera\n    ]); // Position gizmo component within scene\n    const [marginX, marginY] = margin;\n    const x = alignment.endsWith(\"-center\") ? 0 : alignment.endsWith(\"-left\") ? -size.width / 2 + marginX : size.width / 2 - marginX;\n    const y = alignment.startsWith(\"center-\") ? 0 : alignment.startsWith(\"top-\") ? size.height / 2 - marginY : -size.height / 2 + marginY;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Hud_js__WEBPACK_IMPORTED_MODULE_3__.Hud, {\n        renderPriority: renderPriority\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, {\n        value: gizmoHelperContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_OrthographicCamera_js__WEBPACK_IMPORTED_MODULE_4__.OrthographicCamera, {\n        makeDefault: true,\n        ref: virtualCam,\n        position: [\n            0,\n            0,\n            200\n        ]\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"group\", {\n        ref: gizmoRef,\n        position: [\n            x,\n            y,\n            0\n        ]\n    }, children)));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/GizmoHelper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/GizmoViewport.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/GizmoViewport.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GizmoViewport: () => (/* binding */ GizmoViewport)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _GizmoHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GizmoHelper.js */ \"(ssr)/./node_modules/@react-three/drei/core/GizmoHelper.js\");\n\n\n\n\n\nfunction Axis({ scale = [\n    0.8,\n    0.05,\n    0.05\n], color, rotation }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", {\n        rotation: rotation\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"mesh\", {\n        position: [\n            0.4,\n            0,\n            0\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"boxGeometry\", {\n        args: scale\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"meshBasicMaterial\", {\n        color: color,\n        toneMapped: false\n    })));\n}\nfunction AxisHead({ onClick, font, disabled, arcStyle, label, labelColor, axisHeadScale = 1, ...props }) {\n    const gl = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.z)((state)=>state.gl);\n    const texture = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>{\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 64;\n        canvas.height = 64;\n        const context = canvas.getContext(\"2d\");\n        context.beginPath();\n        context.arc(32, 32, 16, 0, 2 * Math.PI);\n        context.closePath();\n        context.fillStyle = arcStyle;\n        context.fill();\n        if (label) {\n            context.font = font;\n            context.textAlign = \"center\";\n            context.fillStyle = labelColor;\n            context.fillText(label, 32, 41);\n        }\n        return new three__WEBPACK_IMPORTED_MODULE_3__.CanvasTexture(canvas);\n    }, [\n        arcStyle,\n        label,\n        labelColor,\n        font\n    ]);\n    const [active, setActive] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const scale = (label ? 1 : 0.75) * (active ? 1.2 : 1) * axisHeadScale;\n    const handlePointerOver = (e)=>{\n        e.stopPropagation();\n        setActive(true);\n    };\n    const handlePointerOut = (e)=>{\n        e.stopPropagation();\n        setActive(false);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"sprite\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        scale: scale,\n        onPointerOver: !disabled ? handlePointerOver : undefined,\n        onPointerOut: !disabled ? onClick || handlePointerOut : undefined\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"spriteMaterial\", {\n        map: texture,\n        \"map-anisotropy\": gl.capabilities.getMaxAnisotropy() || 1,\n        alphaTest: 0.3,\n        opacity: label ? 1 : 0.75,\n        toneMapped: false\n    }));\n}\nconst GizmoViewport = ({ hideNegativeAxes, hideAxisHeads, disabled, font = \"18px Inter var, Arial, sans-serif\", axisColors = [\n    \"#ff2060\",\n    \"#20df80\",\n    \"#2080ff\"\n], axisHeadScale = 1, axisScale, labels = [\n    \"X\",\n    \"Y\",\n    \"Z\"\n], labelColor = \"#000\", onClick, ...props })=>{\n    const [colorX, colorY, colorZ] = axisColors;\n    const { tweenCamera } = (0,_GizmoHelper_js__WEBPACK_IMPORTED_MODULE_4__.useGizmoContext)();\n    const axisHeadProps = {\n        font,\n        disabled,\n        labelColor,\n        onClick,\n        axisHeadScale,\n        onPointerDown: !disabled ? (e)=>{\n            tweenCamera(e.object.position);\n            e.stopPropagation();\n        } : undefined\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        scale: 40\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Axis, {\n        color: colorX,\n        rotation: [\n            0,\n            0,\n            0\n        ],\n        scale: axisScale\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Axis, {\n        color: colorY,\n        rotation: [\n            0,\n            0,\n            Math.PI / 2\n        ],\n        scale: axisScale\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Axis, {\n        color: colorZ,\n        rotation: [\n            0,\n            -Math.PI / 2,\n            0\n        ],\n        scale: axisScale\n    }), !hideAxisHeads && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AxisHead, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        arcStyle: colorX,\n        position: [\n            1,\n            0,\n            0\n        ],\n        label: labels[0]\n    }, axisHeadProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AxisHead, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        arcStyle: colorY,\n        position: [\n            0,\n            1,\n            0\n        ],\n        label: labels[1]\n    }, axisHeadProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AxisHead, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        arcStyle: colorZ,\n        position: [\n            0,\n            0,\n            1\n        ],\n        label: labels[2]\n    }, axisHeadProps)), !hideNegativeAxes && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AxisHead, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        arcStyle: colorX,\n        position: [\n            -1,\n            0,\n            0\n        ]\n    }, axisHeadProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AxisHead, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        arcStyle: colorY,\n        position: [\n            0,\n            -1,\n            0\n        ]\n    }, axisHeadProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AxisHead, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        arcStyle: colorZ,\n        position: [\n            0,\n            0,\n            -1\n        ]\n    }, axisHeadProps)))));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/GizmoViewport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/Grid.js":
/*!*****************************************************!*\
  !*** ./node_modules/@react-three/drei/core/Grid.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Grid: () => (/* binding */ Grid)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var react_merge_refs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-merge-refs */ \"(ssr)/./node_modules/react-merge-refs/dist/react-merge-refs.esm.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n/* harmony import */ var _shaderMaterial_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shaderMaterial.js */ \"(ssr)/./node_modules/@react-three/drei/core/shaderMaterial.js\");\n\n\n\n\n\n\nconst GridMaterial = (0,_shaderMaterial_js__WEBPACK_IMPORTED_MODULE_3__.shaderMaterial)({\n    cellSize: 0.5,\n    sectionSize: 1,\n    fadeDistance: 100,\n    fadeStrength: 1,\n    cellThickness: 0.5,\n    sectionThickness: 1,\n    cellColor: new three__WEBPACK_IMPORTED_MODULE_4__.Color(),\n    sectionColor: new three__WEBPACK_IMPORTED_MODULE_4__.Color(),\n    infiniteGrid: false,\n    followCamera: false,\n    worldCamProjPosition: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(),\n    worldPlanePosition: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3()\n}, /* glsl */ `\n    varying vec3 localPosition;\n    varying vec4 worldPosition;\n\n    uniform vec3 worldCamProjPosition;\n    uniform vec3 worldPlanePosition;\n    uniform float fadeDistance;\n    uniform bool infiniteGrid;\n    uniform bool followCamera;\n\n    void main() {\n      localPosition = position.xzy;\n      if (infiniteGrid) localPosition *= 1.0 + fadeDistance;\n      \n      worldPosition = modelMatrix * vec4(localPosition, 1.0);\n      if (followCamera) {\n        worldPosition.xyz += (worldCamProjPosition - worldPlanePosition);\n        localPosition = (inverse(modelMatrix) * worldPosition).xyz;\n      }\n\n      gl_Position = projectionMatrix * viewMatrix * worldPosition;\n    }\n  `, /* glsl */ `\n    varying vec3 localPosition;\n    varying vec4 worldPosition;\n\n    uniform vec3 worldCamProjPosition;\n    uniform float cellSize;\n    uniform float sectionSize;\n    uniform vec3 cellColor;\n    uniform vec3 sectionColor;\n    uniform float fadeDistance;\n    uniform float fadeStrength;\n    uniform float cellThickness;\n    uniform float sectionThickness;\n\n    float getGrid(float size, float thickness) {\n      vec2 r = localPosition.xz / size;\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n      float line = min(grid.x, grid.y) + 1.0 - thickness;\n      return 1.0 - min(line, 1.0);\n    }\n\n    void main() {\n      float g1 = getGrid(cellSize, cellThickness);\n      float g2 = getGrid(sectionSize, sectionThickness);\n\n      float dist = distance(worldCamProjPosition, worldPosition.xyz);\n      float d = 1.0 - min(dist / fadeDistance, 1.0);\n      vec3 color = mix(cellColor, sectionColor, min(1.0, sectionThickness * g2));\n\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d, fadeStrength));\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n      if (gl_FragColor.a <= 0.0) discard;\n\n      #include <tonemapping_fragment>\n      #include <${parseInt(three__WEBPACK_IMPORTED_MODULE_4__.REVISION.replace(/\\D+/g, \"\")) >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n    }\n  `);\nconst Grid = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ args, cellColor = \"#000000\", sectionColor = \"#2080ff\", cellSize = 0.5, sectionSize = 1, followCamera = false, infiniteGrid = false, fadeDistance = 100, fadeStrength = 1, cellThickness = 0.5, sectionThickness = 1, side = three__WEBPACK_IMPORTED_MODULE_4__.BackSide, ...props }, fRef)=>{\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.e)({\n        GridMaterial\n    });\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const plane = new three__WEBPACK_IMPORTED_MODULE_4__.Plane();\n    const upVector = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 1, 0);\n    const zeroVector = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0);\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_5__.A)((state)=>{\n        plane.setFromNormalAndCoplanarPoint(upVector, zeroVector).applyMatrix4(ref.current.matrixWorld);\n        const gridMaterial = ref.current.material;\n        const worldCamProjPosition = gridMaterial.uniforms.worldCamProjPosition;\n        const worldPlanePosition = gridMaterial.uniforms.worldPlanePosition;\n        plane.projectPoint(state.camera.position, worldCamProjPosition.value);\n        worldPlanePosition.value.set(0, 0, 0).applyMatrix4(ref.current.matrixWorld);\n    });\n    const uniforms1 = {\n        cellSize,\n        sectionSize,\n        cellColor,\n        sectionColor,\n        cellThickness,\n        sectionThickness\n    };\n    const uniforms2 = {\n        fadeDistance,\n        fadeStrength,\n        infiniteGrid,\n        followCamera\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"mesh\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        ref: (0,react_merge_refs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])([\n            ref,\n            fRef\n        ]),\n        frustumCulled: false\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"gridMaterial\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        transparent: true,\n        \"extensions-derivatives\": true,\n        side: side\n    }, uniforms1, uniforms2)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"planeGeometry\", {\n        args: args\n    }));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/Grid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/Hud.js":
/*!****************************************************!*\
  !*** ./node_modules/@react-three/drei/core/Hud.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hud: () => (/* binding */ Hud)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n\n\n\nfunction RenderHud({ defaultScene, defaultCamera, renderPriority = 1 }) {\n    const { gl, scene, camera } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.z)();\n    let oldCLear;\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.A)(()=>{\n        oldCLear = gl.autoClear;\n        if (renderPriority === 1) {\n            // Clear scene and render the default scene\n            gl.autoClear = true;\n            gl.render(defaultScene, defaultCamera);\n        } // Disable cleaning and render the portal with its own camera\n        gl.autoClear = false;\n        gl.clearDepth();\n        gl.render(scene, camera); // Restore default\n        gl.autoClear = oldCLear;\n    }, renderPriority); // Without an element that receives pointer events state.pointer will always be 0/0\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"group\", {\n        onPointerOver: ()=>null\n    });\n}\nfunction Hud({ children, renderPriority = 1 }) {\n    const { scene: defaultScene, camera: defaultCamera } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.z)();\n    const [hudScene] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new three__WEBPACK_IMPORTED_MODULE_2__.Scene());\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.g)(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RenderHud, {\n        defaultScene: defaultScene,\n        defaultCamera: defaultCamera,\n        renderPriority: renderPriority\n    })), hudScene, {\n        events: {\n            priority: renderPriority + 1\n        }\n    }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9IdWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0I7QUFDQTtBQUN1QztBQUV0RSxTQUFTSyxVQUFVLEVBQ2pCQyxZQUFZLEVBQ1pDLGFBQWEsRUFDYkMsaUJBQWlCLENBQUMsRUFDbkI7SUFDQyxNQUFNLEVBQ0pDLEVBQUUsRUFDRkMsS0FBSyxFQUNMQyxNQUFNLEVBQ1AsR0FBR1QscURBQVFBO0lBQ1osSUFBSVU7SUFDSlIscURBQVFBLENBQUM7UUFDUFEsV0FBV0gsR0FBR0ksU0FBUztRQUV2QixJQUFJTCxtQkFBbUIsR0FBRztZQUN4QiwyQ0FBMkM7WUFDM0NDLEdBQUdJLFNBQVMsR0FBRztZQUNmSixHQUFHSyxNQUFNLENBQUNSLGNBQWNDO1FBQzFCLEVBQUUsNkRBQTZEO1FBRy9ERSxHQUFHSSxTQUFTLEdBQUc7UUFDZkosR0FBR00sVUFBVTtRQUNiTixHQUFHSyxNQUFNLENBQUNKLE9BQU9DLFNBQVMsa0JBQWtCO1FBRTVDRixHQUFHSSxTQUFTLEdBQUdEO0lBQ2pCLEdBQUdKLGlCQUFpQixtRkFBbUY7SUFFdkcsT0FBTyxXQUFXLEdBQUVQLGdEQUFtQixDQUFDLFNBQVM7UUFDL0NnQixlQUFlLElBQU07SUFDdkI7QUFDRjtBQUVBLFNBQVNDLElBQUksRUFDWEMsUUFBUSxFQUNSWCxpQkFBaUIsQ0FBQyxFQUNuQjtJQUNDLE1BQU0sRUFDSkUsT0FBT0osWUFBWSxFQUNuQkssUUFBUUosYUFBYSxFQUN0QixHQUFHTCxxREFBUUE7SUFDWixNQUFNLENBQUNrQixTQUFTLEdBQUduQiwyQ0FBYyxDQUFDLElBQU0sSUFBSUQsd0NBQVc7SUFDdkQsT0FBTyxXQUFXLEdBQUVDLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFLE1BQU1FLHFEQUFZQSxDQUFFLFdBQVcsR0FBRUYsZ0RBQW1CLENBQUNBLDJDQUFjLEVBQUUsTUFBTWtCLFVBQVUsV0FBVyxHQUFFbEIsZ0RBQW1CLENBQUNJLFdBQVc7UUFDdkxDLGNBQWNBO1FBQ2RDLGVBQWVBO1FBQ2ZDLGdCQUFnQkE7SUFDbEIsS0FBS1ksVUFBVTtRQUNiSSxRQUFRO1lBQ05DLFVBQVVqQixpQkFBaUI7UUFDN0I7SUFDRjtBQUNGO0FBRWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9IdWQuanM/ODg5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUaHJlZSwgY3JlYXRlUG9ydGFsLCB1c2VGcmFtZSB9IGZyb20gJ0ByZWFjdC10aHJlZS9maWJlcic7XG5cbmZ1bmN0aW9uIFJlbmRlckh1ZCh7XG4gIGRlZmF1bHRTY2VuZSxcbiAgZGVmYXVsdENhbWVyYSxcbiAgcmVuZGVyUHJpb3JpdHkgPSAxXG59KSB7XG4gIGNvbnN0IHtcbiAgICBnbCxcbiAgICBzY2VuZSxcbiAgICBjYW1lcmFcbiAgfSA9IHVzZVRocmVlKCk7XG4gIGxldCBvbGRDTGVhcjtcbiAgdXNlRnJhbWUoKCkgPT4ge1xuICAgIG9sZENMZWFyID0gZ2wuYXV0b0NsZWFyO1xuXG4gICAgaWYgKHJlbmRlclByaW9yaXR5ID09PSAxKSB7XG4gICAgICAvLyBDbGVhciBzY2VuZSBhbmQgcmVuZGVyIHRoZSBkZWZhdWx0IHNjZW5lXG4gICAgICBnbC5hdXRvQ2xlYXIgPSB0cnVlO1xuICAgICAgZ2wucmVuZGVyKGRlZmF1bHRTY2VuZSwgZGVmYXVsdENhbWVyYSk7XG4gICAgfSAvLyBEaXNhYmxlIGNsZWFuaW5nIGFuZCByZW5kZXIgdGhlIHBvcnRhbCB3aXRoIGl0cyBvd24gY2FtZXJhXG5cblxuICAgIGdsLmF1dG9DbGVhciA9IGZhbHNlO1xuICAgIGdsLmNsZWFyRGVwdGgoKTtcbiAgICBnbC5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7IC8vIFJlc3RvcmUgZGVmYXVsdFxuXG4gICAgZ2wuYXV0b0NsZWFyID0gb2xkQ0xlYXI7XG4gIH0sIHJlbmRlclByaW9yaXR5KTsgLy8gV2l0aG91dCBhbiBlbGVtZW50IHRoYXQgcmVjZWl2ZXMgcG9pbnRlciBldmVudHMgc3RhdGUucG9pbnRlciB3aWxsIGFsd2F5cyBiZSAwLzBcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJncm91cFwiLCB7XG4gICAgb25Qb2ludGVyT3ZlcjogKCkgPT4gbnVsbFxuICB9KTtcbn1cblxuZnVuY3Rpb24gSHVkKHtcbiAgY2hpbGRyZW4sXG4gIHJlbmRlclByaW9yaXR5ID0gMVxufSkge1xuICBjb25zdCB7XG4gICAgc2NlbmU6IGRlZmF1bHRTY2VuZSxcbiAgICBjYW1lcmE6IGRlZmF1bHRDYW1lcmFcbiAgfSA9IHVzZVRocmVlKCk7XG4gIGNvbnN0IFtodWRTY2VuZV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBuZXcgVEhSRUUuU2NlbmUoKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY3JlYXRlUG9ydGFsKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlckh1ZCwge1xuICAgIGRlZmF1bHRTY2VuZTogZGVmYXVsdFNjZW5lLFxuICAgIGRlZmF1bHRDYW1lcmE6IGRlZmF1bHRDYW1lcmEsXG4gICAgcmVuZGVyUHJpb3JpdHk6IHJlbmRlclByaW9yaXR5XG4gIH0pKSwgaHVkU2NlbmUsIHtcbiAgICBldmVudHM6IHtcbiAgICAgIHByaW9yaXR5OiByZW5kZXJQcmlvcml0eSArIDFcbiAgICB9XG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgSHVkIH07XG4iXSwibmFtZXMiOlsiVEhSRUUiLCJSZWFjdCIsInVzZVRocmVlIiwiY3JlYXRlUG9ydGFsIiwidXNlRnJhbWUiLCJSZW5kZXJIdWQiLCJkZWZhdWx0U2NlbmUiLCJkZWZhdWx0Q2FtZXJhIiwicmVuZGVyUHJpb3JpdHkiLCJnbCIsInNjZW5lIiwiY2FtZXJhIiwib2xkQ0xlYXIiLCJhdXRvQ2xlYXIiLCJyZW5kZXIiLCJjbGVhckRlcHRoIiwiY3JlYXRlRWxlbWVudCIsIm9uUG9pbnRlck92ZXIiLCJIdWQiLCJjaGlsZHJlbiIsImh1ZFNjZW5lIiwidXNlU3RhdGUiLCJTY2VuZSIsIkZyYWdtZW50IiwiZXZlbnRzIiwicHJpb3JpdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/Hud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/OrthographicCamera.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/OrthographicCamera.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrthographicCamera: () => (/* binding */ OrthographicCamera)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n/* harmony import */ var react_merge_refs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-merge-refs */ \"(ssr)/./node_modules/react-merge-refs/dist/react-merge-refs.esm.js\");\n/* harmony import */ var _useFBO_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useFBO.js */ \"(ssr)/./node_modules/@react-three/drei/core/useFBO.js\");\n\n\n\n\n\nconst isFunction = (node)=>typeof node === \"function\";\nconst OrthographicCamera = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ envMap, resolution = 256, frames = Infinity, children, makeDefault, ...props }, ref)=>{\n    const set = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.z)(({ set })=>set);\n    const camera = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.z)(({ camera })=>camera);\n    const size = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.z)(({ size })=>size);\n    const cameraRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const groupRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const fbo = (0,_useFBO_js__WEBPACK_IMPORTED_MODULE_4__.useFBO)(resolution);\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(()=>{\n        if (!props.manual) {\n            cameraRef.current.updateProjectionMatrix();\n        }\n    }, [\n        size,\n        props\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(()=>{\n        cameraRef.current.updateProjectionMatrix();\n    });\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(()=>{\n        if (makeDefault) {\n            const oldCam = camera;\n            set(()=>({\n                    camera: cameraRef.current\n                }));\n            return ()=>set(()=>({\n                        camera: oldCam\n                    }));\n        } // The camera should not be part of the dependency list because this components camera is a stable reference\n    // that must exchange the default, and clean up after itself on unmount.\n    }, [\n        cameraRef,\n        makeDefault,\n        set\n    ]);\n    let count = 0;\n    let oldEnvMap = null;\n    const functional = isFunction(children);\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.A)((state)=>{\n        if (functional && (frames === Infinity || count < frames)) {\n            groupRef.current.visible = false;\n            state.gl.setRenderTarget(fbo);\n            oldEnvMap = state.scene.background;\n            if (envMap) state.scene.background = envMap;\n            state.gl.render(state.scene, cameraRef.current);\n            state.scene.background = oldEnvMap;\n            state.gl.setRenderTarget(null);\n            groupRef.current.visible = true;\n            count++;\n        }\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"orthographicCamera\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        left: size.width / -2,\n        right: size.width / 2,\n        top: size.height / 2,\n        bottom: size.height / -2,\n        ref: (0,react_merge_refs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])([\n            cameraRef,\n            ref\n        ])\n    }, props), !functional && children), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", {\n        ref: groupRef\n    }, functional && children(fbo.texture)));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9PcnRob2dyYXBoaWNDYW1lcmEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwRDtBQUMzQjtBQUN5QjtBQUNmO0FBQ0o7QUFFckMsTUFBTU0sYUFBYUMsQ0FBQUEsT0FBUSxPQUFPQSxTQUFTO0FBRTNDLE1BQU1DLHFCQUFxQixXQUFXLEdBQUVQLDZDQUFnQixDQUFDLENBQUMsRUFDeERTLE1BQU0sRUFDTkMsYUFBYSxHQUFHLEVBQ2hCQyxTQUFTQyxRQUFRLEVBQ2pCQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWCxHQUFHQyxPQUNKLEVBQUVDO0lBQ0QsTUFBTUMsTUFBTWhCLHFEQUFRQSxDQUFDLENBQUMsRUFDcEJnQixHQUFHLEVBQ0osR0FBS0E7SUFDTixNQUFNQyxTQUFTakIscURBQVFBLENBQUMsQ0FBQyxFQUN2QmlCLE1BQU0sRUFDUCxHQUFLQTtJQUNOLE1BQU1DLE9BQU9sQixxREFBUUEsQ0FBQyxDQUFDLEVBQ3JCa0IsSUFBSSxFQUNMLEdBQUtBO0lBQ04sTUFBTUMsWUFBWXBCLHlDQUFZLENBQUM7SUFDL0IsTUFBTXNCLFdBQVd0Qix5Q0FBWSxDQUFDO0lBQzlCLE1BQU11QixNQUFNbkIsa0RBQU1BLENBQUNNO0lBQ25CVixrREFBcUIsQ0FBQztRQUNwQixJQUFJLENBQUNlLE1BQU1VLE1BQU0sRUFBRTtZQUNqQkwsVUFBVU0sT0FBTyxDQUFDQyxzQkFBc0I7UUFDMUM7SUFDRixHQUFHO1FBQUNSO1FBQU1KO0tBQU07SUFDaEJmLGtEQUFxQixDQUFDO1FBQ3BCb0IsVUFBVU0sT0FBTyxDQUFDQyxzQkFBc0I7SUFDMUM7SUFDQTNCLGtEQUFxQixDQUFDO1FBQ3BCLElBQUljLGFBQWE7WUFDZixNQUFNYyxTQUFTVjtZQUNmRCxJQUFJLElBQU87b0JBQ1RDLFFBQVFFLFVBQVVNLE9BQU87Z0JBQzNCO1lBQ0EsT0FBTyxJQUFNVCxJQUFJLElBQU87d0JBQ3RCQyxRQUFRVTtvQkFDVjtRQUNGLEVBQUUsNEdBQTRHO0lBQzlHLHdFQUF3RTtJQUUxRSxHQUFHO1FBQUNSO1FBQVdOO1FBQWFHO0tBQUk7SUFDaEMsSUFBSVksUUFBUTtJQUNaLElBQUlDLFlBQVk7SUFDaEIsTUFBTUMsYUFBYTFCLFdBQVdRO0lBQzlCWCxxREFBUUEsQ0FBQzhCLENBQUFBO1FBQ1AsSUFBSUQsY0FBZXBCLENBQUFBLFdBQVdDLFlBQVlpQixRQUFRbEIsTUFBSyxHQUFJO1lBQ3pEVyxTQUFTSSxPQUFPLENBQUNPLE9BQU8sR0FBRztZQUMzQkQsTUFBTUUsRUFBRSxDQUFDQyxlQUFlLENBQUNaO1lBQ3pCTyxZQUFZRSxNQUFNSSxLQUFLLENBQUNDLFVBQVU7WUFDbEMsSUFBSTVCLFFBQVF1QixNQUFNSSxLQUFLLENBQUNDLFVBQVUsR0FBRzVCO1lBQ3JDdUIsTUFBTUUsRUFBRSxDQUFDSSxNQUFNLENBQUNOLE1BQU1JLEtBQUssRUFBRWhCLFVBQVVNLE9BQU87WUFDOUNNLE1BQU1JLEtBQUssQ0FBQ0MsVUFBVSxHQUFHUDtZQUN6QkUsTUFBTUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7WUFDekJiLFNBQVNJLE9BQU8sQ0FBQ08sT0FBTyxHQUFHO1lBQzNCSjtRQUNGO0lBQ0Y7SUFDQSxPQUFPLFdBQVcsR0FBRTdCLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFLE1BQU0sV0FBVyxHQUFFQSxnREFBbUIsQ0FBQyxzQkFBc0JELDhFQUFRQSxDQUFDO1FBQzVIMEMsTUFBTXRCLEtBQUt1QixLQUFLLEdBQUcsQ0FBQztRQUNwQkMsT0FBT3hCLEtBQUt1QixLQUFLLEdBQUc7UUFDcEJFLEtBQUt6QixLQUFLMEIsTUFBTSxHQUFHO1FBQ25CQyxRQUFRM0IsS0FBSzBCLE1BQU0sR0FBRyxDQUFDO1FBQ3ZCN0IsS0FBS2IsNERBQVNBLENBQUM7WUFBQ2lCO1lBQVdKO1NBQUk7SUFDakMsR0FBR0QsUUFBUSxDQUFDZ0IsY0FBY2xCLFdBQVcsV0FBVyxHQUFFYixnREFBbUIsQ0FBQyxTQUFTO1FBQzdFZ0IsS0FBS007SUFDUCxHQUFHUyxjQUFjbEIsU0FBU1UsSUFBSXdCLE9BQU87QUFDdkM7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9PcnRob2dyYXBoaWNDYW1lcmEuanM/MDMyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUaHJlZSwgdXNlRnJhbWUgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuaW1wb3J0IG1lcmdlUmVmcyBmcm9tICdyZWFjdC1tZXJnZS1yZWZzJztcbmltcG9ydCB7IHVzZUZCTyB9IGZyb20gJy4vdXNlRkJPLmpzJztcblxuY29uc3QgaXNGdW5jdGlvbiA9IG5vZGUgPT4gdHlwZW9mIG5vZGUgPT09ICdmdW5jdGlvbic7XG5cbmNvbnN0IE9ydGhvZ3JhcGhpY0NhbWVyYSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gIGVudk1hcCxcbiAgcmVzb2x1dGlvbiA9IDI1NixcbiAgZnJhbWVzID0gSW5maW5pdHksXG4gIGNoaWxkcmVuLFxuICBtYWtlRGVmYXVsdCxcbiAgLi4ucHJvcHNcbn0sIHJlZikgPT4ge1xuICBjb25zdCBzZXQgPSB1c2VUaHJlZSgoe1xuICAgIHNldFxuICB9KSA9PiBzZXQpO1xuICBjb25zdCBjYW1lcmEgPSB1c2VUaHJlZSgoe1xuICAgIGNhbWVyYVxuICB9KSA9PiBjYW1lcmEpO1xuICBjb25zdCBzaXplID0gdXNlVGhyZWUoKHtcbiAgICBzaXplXG4gIH0pID0+IHNpemUpO1xuICBjb25zdCBjYW1lcmFSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGdyb3VwUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBmYm8gPSB1c2VGQk8ocmVzb2x1dGlvbik7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFwcm9wcy5tYW51YWwpIHtcbiAgICAgIGNhbWVyYVJlZi5jdXJyZW50LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG4gIH0sIFtzaXplLCBwcm9wc10pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNhbWVyYVJlZi5jdXJyZW50LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1ha2VEZWZhdWx0KSB7XG4gICAgICBjb25zdCBvbGRDYW0gPSBjYW1lcmE7XG4gICAgICBzZXQoKCkgPT4gKHtcbiAgICAgICAgY2FtZXJhOiBjYW1lcmFSZWYuY3VycmVudFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuICgpID0+IHNldCgoKSA9PiAoe1xuICAgICAgICBjYW1lcmE6IG9sZENhbVxuICAgICAgfSkpO1xuICAgIH0gLy8gVGhlIGNhbWVyYSBzaG91bGQgbm90IGJlIHBhcnQgb2YgdGhlIGRlcGVuZGVuY3kgbGlzdCBiZWNhdXNlIHRoaXMgY29tcG9uZW50cyBjYW1lcmEgaXMgYSBzdGFibGUgcmVmZXJlbmNlXG4gICAgLy8gdGhhdCBtdXN0IGV4Y2hhbmdlIHRoZSBkZWZhdWx0LCBhbmQgY2xlYW4gdXAgYWZ0ZXIgaXRzZWxmIG9uIHVubW91bnQuXG5cbiAgfSwgW2NhbWVyYVJlZiwgbWFrZURlZmF1bHQsIHNldF0pO1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgb2xkRW52TWFwID0gbnVsbDtcbiAgY29uc3QgZnVuY3Rpb25hbCA9IGlzRnVuY3Rpb24oY2hpbGRyZW4pO1xuICB1c2VGcmFtZShzdGF0ZSA9PiB7XG4gICAgaWYgKGZ1bmN0aW9uYWwgJiYgKGZyYW1lcyA9PT0gSW5maW5pdHkgfHwgY291bnQgPCBmcmFtZXMpKSB7XG4gICAgICBncm91cFJlZi5jdXJyZW50LnZpc2libGUgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmdsLnNldFJlbmRlclRhcmdldChmYm8pO1xuICAgICAgb2xkRW52TWFwID0gc3RhdGUuc2NlbmUuYmFja2dyb3VuZDtcbiAgICAgIGlmIChlbnZNYXApIHN0YXRlLnNjZW5lLmJhY2tncm91bmQgPSBlbnZNYXA7XG4gICAgICBzdGF0ZS5nbC5yZW5kZXIoc3RhdGUuc2NlbmUsIGNhbWVyYVJlZi5jdXJyZW50KTtcbiAgICAgIHN0YXRlLnNjZW5lLmJhY2tncm91bmQgPSBvbGRFbnZNYXA7XG4gICAgICBzdGF0ZS5nbC5zZXRSZW5kZXJUYXJnZXQobnVsbCk7XG4gICAgICBncm91cFJlZi5jdXJyZW50LnZpc2libGUgPSB0cnVlO1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwib3J0aG9ncmFwaGljQ2FtZXJhXCIsIF9leHRlbmRzKHtcbiAgICBsZWZ0OiBzaXplLndpZHRoIC8gLTIsXG4gICAgcmlnaHQ6IHNpemUud2lkdGggLyAyLFxuICAgIHRvcDogc2l6ZS5oZWlnaHQgLyAyLFxuICAgIGJvdHRvbTogc2l6ZS5oZWlnaHQgLyAtMixcbiAgICByZWY6IG1lcmdlUmVmcyhbY2FtZXJhUmVmLCByZWZdKVxuICB9LCBwcm9wcyksICFmdW5jdGlvbmFsICYmIGNoaWxkcmVuKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJncm91cFwiLCB7XG4gICAgcmVmOiBncm91cFJlZlxuICB9LCBmdW5jdGlvbmFsICYmIGNoaWxkcmVuKGZiby50ZXh0dXJlKSkpO1xufSk7XG5cbmV4cG9ydCB7IE9ydGhvZ3JhcGhpY0NhbWVyYSB9O1xuIl0sIm5hbWVzIjpbIl9leHRlbmRzIiwiUmVhY3QiLCJ1c2VUaHJlZSIsInVzZUZyYW1lIiwibWVyZ2VSZWZzIiwidXNlRkJPIiwiaXNGdW5jdGlvbiIsIm5vZGUiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJmb3J3YXJkUmVmIiwiZW52TWFwIiwicmVzb2x1dGlvbiIsImZyYW1lcyIsIkluZmluaXR5IiwiY2hpbGRyZW4iLCJtYWtlRGVmYXVsdCIsInByb3BzIiwicmVmIiwic2V0IiwiY2FtZXJhIiwic2l6ZSIsImNhbWVyYVJlZiIsInVzZVJlZiIsImdyb3VwUmVmIiwiZmJvIiwidXNlTGF5b3V0RWZmZWN0IiwibWFudWFsIiwiY3VycmVudCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJvbGRDYW0iLCJjb3VudCIsIm9sZEVudk1hcCIsImZ1bmN0aW9uYWwiLCJzdGF0ZSIsInZpc2libGUiLCJnbCIsInNldFJlbmRlclRhcmdldCIsInNjZW5lIiwiYmFja2dyb3VuZCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsImxlZnQiLCJ3aWR0aCIsInJpZ2h0IiwidG9wIiwiaGVpZ2h0IiwiYm90dG9tIiwidGV4dHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/OrthographicCamera.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/Sky.js":
/*!****************************************************!*\
  !*** ./node_modules/@react-three/drei/core/Sky.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sky: () => (/* binding */ Sky),\n/* harmony export */   calcPosFromAngles: () => (/* binding */ calcPosFromAngles)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three_stdlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/objects/Sky.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\n\n\n\nfunction calcPosFromAngles(inclination, azimuth, vector = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3()) {\n    const theta = Math.PI * (inclination - 0.5);\n    const phi = 2 * Math.PI * (azimuth - 0.5);\n    vector.x = Math.cos(phi);\n    vector.y = Math.sin(theta);\n    vector.z = Math.sin(phi);\n    return vector;\n}\nconst Sky = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ inclination = 0.6, azimuth = 0.1, distance = 1000, mieCoefficient = 0.005, mieDirectionalG = 0.8, rayleigh = 0.5, turbidity = 10, sunPosition = calcPosFromAngles(inclination, azimuth), ...props }, ref)=>{\n    const scale = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>new three__WEBPACK_IMPORTED_MODULE_2__.Vector3().setScalar(distance), [\n        distance\n    ]);\n    const [sky] = react__WEBPACK_IMPORTED_MODULE_1__.useState(()=>new three_stdlib__WEBPACK_IMPORTED_MODULE_3__.Sky());\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"primitive\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        object: sky,\n        ref: ref,\n        \"material-uniforms-mieCoefficient-value\": mieCoefficient,\n        \"material-uniforms-mieDirectionalG-value\": mieDirectionalG,\n        \"material-uniforms-rayleigh-value\": rayleigh,\n        \"material-uniforms-sunPosition-value\": sunPosition,\n        \"material-uniforms-turbidity-value\": turbidity,\n        scale: scale\n    }, props));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9Ta3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwRDtBQUMzQjtBQUNhO0FBQ1o7QUFFaEMsU0FBU0ssa0JBQWtCQyxXQUFXLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxJQUFJSiwwQ0FBT0EsRUFBRTtJQUNyRSxNQUFNSyxRQUFRQyxLQUFLQyxFQUFFLEdBQUlMLENBQUFBLGNBQWMsR0FBRTtJQUN6QyxNQUFNTSxNQUFNLElBQUlGLEtBQUtDLEVBQUUsR0FBSUosQ0FBQUEsVUFBVSxHQUFFO0lBQ3ZDQyxPQUFPSyxDQUFDLEdBQUdILEtBQUtJLEdBQUcsQ0FBQ0Y7SUFDcEJKLE9BQU9PLENBQUMsR0FBR0wsS0FBS00sR0FBRyxDQUFDUDtJQUNwQkQsT0FBT1MsQ0FBQyxHQUFHUCxLQUFLTSxHQUFHLENBQUNKO0lBQ3BCLE9BQU9KO0FBQ1Q7QUFDQSxNQUFNTixNQUFNLFdBQVcsR0FBRUQsNkNBQWdCLENBQUMsQ0FBQyxFQUN6Q0ssY0FBYyxHQUFHLEVBQ2pCQyxVQUFVLEdBQUcsRUFDYlksV0FBVyxJQUFJLEVBQ2ZDLGlCQUFpQixLQUFLLEVBQ3RCQyxrQkFBa0IsR0FBRyxFQUNyQkMsV0FBVyxHQUFHLEVBQ2RDLFlBQVksRUFBRSxFQUNkQyxjQUFjbkIsa0JBQWtCQyxhQUFhQyxRQUFRLEVBQ3JELEdBQUdrQixPQUNKLEVBQUVDO0lBQ0QsTUFBTUMsUUFBUTFCLDBDQUFhLENBQUMsSUFBTSxJQUFJRywwQ0FBT0EsR0FBR3lCLFNBQVMsQ0FBQ1YsV0FBVztRQUFDQTtLQUFTO0lBQy9FLE1BQU0sQ0FBQ1csSUFBSSxHQUFHN0IsMkNBQWMsQ0FBQyxJQUFNLElBQUlFLDZDQUFLQTtJQUM1QyxPQUFPLFdBQVcsR0FBRUYsZ0RBQW1CLENBQUMsYUFBYUQsOEVBQVFBLENBQUM7UUFDNURpQyxRQUFRSDtRQUNSSixLQUFLQTtRQUNMLDBDQUEwQ047UUFDMUMsMkNBQTJDQztRQUMzQyxvQ0FBb0NDO1FBQ3BDLHVDQUF1Q0U7UUFDdkMscUNBQXFDRDtRQUNyQ0ksT0FBT0E7SUFDVCxHQUFHRjtBQUNMO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL2NvcmUvU2t5LmpzPzJjMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2t5IGFzIFNreSQxIH0gZnJvbSAndGhyZWUtc3RkbGliJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5cbmZ1bmN0aW9uIGNhbGNQb3NGcm9tQW5nbGVzKGluY2xpbmF0aW9uLCBhemltdXRoLCB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpKSB7XG4gIGNvbnN0IHRoZXRhID0gTWF0aC5QSSAqIChpbmNsaW5hdGlvbiAtIDAuNSk7XG4gIGNvbnN0IHBoaSA9IDIgKiBNYXRoLlBJICogKGF6aW11dGggLSAwLjUpO1xuICB2ZWN0b3IueCA9IE1hdGguY29zKHBoaSk7XG4gIHZlY3Rvci55ID0gTWF0aC5zaW4odGhldGEpO1xuICB2ZWN0b3IueiA9IE1hdGguc2luKHBoaSk7XG4gIHJldHVybiB2ZWN0b3I7XG59XG5jb25zdCBTa3kgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoe1xuICBpbmNsaW5hdGlvbiA9IDAuNixcbiAgYXppbXV0aCA9IDAuMSxcbiAgZGlzdGFuY2UgPSAxMDAwLFxuICBtaWVDb2VmZmljaWVudCA9IDAuMDA1LFxuICBtaWVEaXJlY3Rpb25hbEcgPSAwLjgsXG4gIHJheWxlaWdoID0gMC41LFxuICB0dXJiaWRpdHkgPSAxMCxcbiAgc3VuUG9zaXRpb24gPSBjYWxjUG9zRnJvbUFuZ2xlcyhpbmNsaW5hdGlvbiwgYXppbXV0aCksXG4gIC4uLnByb3BzXG59LCByZWYpID0+IHtcbiAgY29uc3Qgc2NhbGUgPSBSZWFjdC51c2VNZW1vKCgpID0+IG5ldyBWZWN0b3IzKCkuc2V0U2NhbGFyKGRpc3RhbmNlKSwgW2Rpc3RhbmNlXSk7XG4gIGNvbnN0IFtza3ldID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gbmV3IFNreSQxKCkpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwcmltaXRpdmVcIiwgX2V4dGVuZHMoe1xuICAgIG9iamVjdDogc2t5LFxuICAgIHJlZjogcmVmLFxuICAgIFwibWF0ZXJpYWwtdW5pZm9ybXMtbWllQ29lZmZpY2llbnQtdmFsdWVcIjogbWllQ29lZmZpY2llbnQsXG4gICAgXCJtYXRlcmlhbC11bmlmb3Jtcy1taWVEaXJlY3Rpb25hbEctdmFsdWVcIjogbWllRGlyZWN0aW9uYWxHLFxuICAgIFwibWF0ZXJpYWwtdW5pZm9ybXMtcmF5bGVpZ2gtdmFsdWVcIjogcmF5bGVpZ2gsXG4gICAgXCJtYXRlcmlhbC11bmlmb3Jtcy1zdW5Qb3NpdGlvbi12YWx1ZVwiOiBzdW5Qb3NpdGlvbixcbiAgICBcIm1hdGVyaWFsLXVuaWZvcm1zLXR1cmJpZGl0eS12YWx1ZVwiOiB0dXJiaWRpdHksXG4gICAgc2NhbGU6IHNjYWxlXG4gIH0sIHByb3BzKSk7XG59KTtcblxuZXhwb3J0IHsgU2t5LCBjYWxjUG9zRnJvbUFuZ2xlcyB9O1xuIl0sIm5hbWVzIjpbIl9leHRlbmRzIiwiUmVhY3QiLCJTa3kiLCJTa3kkMSIsIlZlY3RvcjMiLCJjYWxjUG9zRnJvbUFuZ2xlcyIsImluY2xpbmF0aW9uIiwiYXppbXV0aCIsInZlY3RvciIsInRoZXRhIiwiTWF0aCIsIlBJIiwicGhpIiwieCIsImNvcyIsInkiLCJzaW4iLCJ6IiwiZm9yd2FyZFJlZiIsImRpc3RhbmNlIiwibWllQ29lZmZpY2llbnQiLCJtaWVEaXJlY3Rpb25hbEciLCJyYXlsZWlnaCIsInR1cmJpZGl0eSIsInN1blBvc2l0aW9uIiwicHJvcHMiLCJyZWYiLCJzY2FsZSIsInVzZU1lbW8iLCJzZXRTY2FsYXIiLCJza3kiLCJ1c2VTdGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJvYmplY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/Sky.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/TransformControls.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/TransformControls.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransformControls: () => (/* binding */ TransformControls)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n/* harmony import */ var lodash_omit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.omit */ \"(ssr)/./node_modules/lodash.omit/index.js\");\n/* harmony import */ var lodash_omit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_omit__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_pick__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash.pick */ \"(ssr)/./node_modules/lodash.pick/index.js\");\n/* harmony import */ var lodash_pick__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_pick__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three_stdlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/controls/TransformControls.js\");\n\n\n\n\n\n\n\nconst TransformControls = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.forwardRef(({ children, domElement, onChange, onMouseDown, onMouseUp, onObjectChange, object, makeDefault, ...props }, ref)=>{\n    const transformOnlyPropNames = [\n        \"enabled\",\n        \"axis\",\n        \"mode\",\n        \"translationSnap\",\n        \"rotationSnap\",\n        \"scaleSnap\",\n        \"space\",\n        \"size\",\n        \"showX\",\n        \"showY\",\n        \"showZ\"\n    ];\n    const { camera, ...rest } = props;\n    const transformProps = lodash_pick__WEBPACK_IMPORTED_MODULE_2___default()(rest, transformOnlyPropNames);\n    const objectProps = lodash_omit__WEBPACK_IMPORTED_MODULE_1___default()(rest, transformOnlyPropNames); // @ts-expect-error new in @react-three/fiber@7.0.5\n    const defaultControls = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.controls);\n    const gl = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.gl);\n    const events = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.events);\n    const defaultCamera = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.camera);\n    const invalidate = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.invalidate);\n    const get = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.get);\n    const set = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.set);\n    const explCamera = camera || defaultCamera;\n    const explDomElement = domElement || events.connected || gl.domElement;\n    const controls = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>new three_stdlib__WEBPACK_IMPORTED_MODULE_5__.TransformControls(explCamera, explDomElement), [\n        explCamera,\n        explDomElement\n    ]);\n    const group = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect(()=>{\n        if (object) {\n            controls.attach(object instanceof three__WEBPACK_IMPORTED_MODULE_6__.Object3D ? object : object.current);\n        } else if (group.current instanceof three__WEBPACK_IMPORTED_MODULE_6__.Object3D) {\n            controls.attach(group.current);\n        }\n        return ()=>void controls.detach();\n    }, [\n        object,\n        children,\n        controls\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (defaultControls) {\n            const callback = (event)=>defaultControls.enabled = !event.value;\n            controls.addEventListener(\"dragging-changed\", callback);\n            return ()=>controls.removeEventListener(\"dragging-changed\", callback);\n        }\n    }, [\n        controls,\n        defaultControls\n    ]);\n    const onChangeRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    const onMouseDownRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    const onMouseUpRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    const onObjectChangeRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect(()=>void (onChangeRef.current = onChange), [\n        onChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect(()=>void (onMouseDownRef.current = onMouseDown), [\n        onMouseDown\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect(()=>void (onMouseUpRef.current = onMouseUp), [\n        onMouseUp\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect(()=>void (onObjectChangeRef.current = onObjectChange), [\n        onObjectChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        const onChange = (e)=>{\n            invalidate();\n            onChangeRef.current == null ? void 0 : onChangeRef.current(e);\n        };\n        const onMouseDown = (e)=>onMouseDownRef.current == null ? void 0 : onMouseDownRef.current(e);\n        const onMouseUp = (e)=>onMouseUpRef.current == null ? void 0 : onMouseUpRef.current(e);\n        const onObjectChange = (e)=>onObjectChangeRef.current == null ? void 0 : onObjectChangeRef.current(e);\n        controls.addEventListener(\"change\", onChange);\n        controls.addEventListener(\"mouseDown\", onMouseDown);\n        controls.addEventListener(\"mouseUp\", onMouseUp);\n        controls.addEventListener(\"objectChange\", onObjectChange);\n        return ()=>{\n            controls.removeEventListener(\"change\", onChange);\n            controls.removeEventListener(\"mouseDown\", onMouseDown);\n            controls.removeEventListener(\"mouseUp\", onMouseUp);\n            controls.removeEventListener(\"objectChange\", onObjectChange);\n        };\n    }, [\n        invalidate,\n        controls\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (makeDefault) {\n            const old = get().controls;\n            set({\n                controls\n            });\n            return ()=>set({\n                    controls: old\n                });\n        }\n    }, [\n        makeDefault,\n        controls\n    ]);\n    return controls ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(\"primitive\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        ref: ref,\n        object: controls\n    }, transformProps)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(\"group\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        ref: group\n    }, objectProps), children)) : null;\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/TransformControls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/shaderMaterial.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/shaderMaterial.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shaderMaterial: () => (/* binding */ shaderMaterial)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n    const material = class material extends three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial {\n        constructor(parameters = {}){\n            const entries = Object.entries(uniforms); // Create unforms and shaders\n            super({\n                uniforms: entries.reduce((acc, [name, value])=>{\n                    const uniform = three__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.clone({\n                        [name]: {\n                            value\n                        }\n                    });\n                    return {\n                        ...acc,\n                        ...uniform\n                    };\n                }, {}),\n                vertexShader,\n                fragmentShader\n            }); // Create getter/setters\n            this.key = \"\";\n            entries.forEach(([name])=>Object.defineProperty(this, name, {\n                    get: ()=>this.uniforms[name].value,\n                    set: (v)=>this.uniforms[name].value = v\n                })); // Assign parameters, this might include uniforms\n            Object.assign(this, parameters); // Call onInit\n            if (onInit) onInit(this);\n        }\n    };\n    material.key = three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.generateUUID();\n    return material;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9zaGFkZXJNYXRlcmlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQjtBQUUvQixTQUFTQyxlQUFlQyxRQUFRLEVBQUVDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxNQUFNO0lBQ3BFLE1BQU1DLFdBQVcsTUFBTUEsaUJBQWlCTixpREFBb0I7UUFDMURRLFlBQVlDLGFBQWEsQ0FBQyxDQUFDLENBQUU7WUFDM0IsTUFBTUMsVUFBVUMsT0FBT0QsT0FBTyxDQUFDUixXQUFXLDZCQUE2QjtZQUV2RSxLQUFLLENBQUM7Z0JBQ0pBLFVBQVVRLFFBQVFFLE1BQU0sQ0FBQyxDQUFDQyxLQUFLLENBQUNDLE1BQU1DLE1BQU07b0JBQzFDLE1BQU1DLFVBQVVoQixnREFBbUIsQ0FBQ2tCLEtBQUssQ0FBQzt3QkFDeEMsQ0FBQ0osS0FBSyxFQUFFOzRCQUNOQzt3QkFDRjtvQkFDRjtvQkFDQSxPQUFPO3dCQUFFLEdBQUdGLEdBQUc7d0JBQ2IsR0FBR0csT0FBTztvQkFDWjtnQkFDRixHQUFHLENBQUM7Z0JBQ0piO2dCQUNBQztZQUNGLElBQUksd0JBQXdCO1lBRTVCLElBQUksQ0FBQ2UsR0FBRyxHQUFHO1lBQ1hULFFBQVFVLE9BQU8sQ0FBQyxDQUFDLENBQUNOLEtBQUssR0FBS0gsT0FBT1UsY0FBYyxDQUFDLElBQUksRUFBRVAsTUFBTTtvQkFDNURRLEtBQUssSUFBTSxJQUFJLENBQUNwQixRQUFRLENBQUNZLEtBQUssQ0FBQ0MsS0FBSztvQkFDcENRLEtBQUtDLENBQUFBLElBQUssSUFBSSxDQUFDdEIsUUFBUSxDQUFDWSxLQUFLLENBQUNDLEtBQUssR0FBR1M7Z0JBQ3hDLEtBQUssaURBQWlEO1lBRXREYixPQUFPYyxNQUFNLENBQUMsSUFBSSxFQUFFaEIsYUFBYSxjQUFjO1lBRS9DLElBQUlKLFFBQVFBLE9BQU8sSUFBSTtRQUN6QjtJQUVGO0lBQ0FDLFNBQVNhLEdBQUcsR0FBR25CLDRDQUFlLENBQUMyQixZQUFZO0lBQzNDLE9BQU9yQjtBQUNUO0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL2NvcmUvc2hhZGVyTWF0ZXJpYWwuanM/Nzc4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmZ1bmN0aW9uIHNoYWRlck1hdGVyaWFsKHVuaWZvcm1zLCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyLCBvbkluaXQpIHtcbiAgY29uc3QgbWF0ZXJpYWwgPSBjbGFzcyBtYXRlcmlhbCBleHRlbmRzIFRIUkVFLlNoYWRlck1hdGVyaWFsIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyh1bmlmb3Jtcyk7IC8vIENyZWF0ZSB1bmZvcm1zIGFuZCBzaGFkZXJzXG5cbiAgICAgIHN1cGVyKHtcbiAgICAgICAgdW5pZm9ybXM6IGVudHJpZXMucmVkdWNlKChhY2MsIFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICBjb25zdCB1bmlmb3JtID0gVEhSRUUuVW5pZm9ybXNVdGlscy5jbG9uZSh7XG4gICAgICAgICAgICBbbmFtZV06IHtcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4geyAuLi5hY2MsXG4gICAgICAgICAgICAuLi51bmlmb3JtXG4gICAgICAgICAgfTtcbiAgICAgICAgfSwge30pLFxuICAgICAgICB2ZXJ0ZXhTaGFkZXIsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyXG4gICAgICB9KTsgLy8gQ3JlYXRlIGdldHRlci9zZXR0ZXJzXG5cbiAgICAgIHRoaXMua2V5ID0gJyc7XG4gICAgICBlbnRyaWVzLmZvckVhY2goKFtuYW1lXSkgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLnVuaWZvcm1zW25hbWVdLnZhbHVlLFxuICAgICAgICBzZXQ6IHYgPT4gdGhpcy51bmlmb3Jtc1tuYW1lXS52YWx1ZSA9IHZcbiAgICAgIH0pKTsgLy8gQXNzaWduIHBhcmFtZXRlcnMsIHRoaXMgbWlnaHQgaW5jbHVkZSB1bmlmb3Jtc1xuXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHBhcmFtZXRlcnMpOyAvLyBDYWxsIG9uSW5pdFxuXG4gICAgICBpZiAob25Jbml0KSBvbkluaXQodGhpcyk7XG4gICAgfVxuXG4gIH07XG4gIG1hdGVyaWFsLmtleSA9IFRIUkVFLk1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcbiAgcmV0dXJuIG1hdGVyaWFsO1xufVxuXG5leHBvcnQgeyBzaGFkZXJNYXRlcmlhbCB9O1xuIl0sIm5hbWVzIjpbIlRIUkVFIiwic2hhZGVyTWF0ZXJpYWwiLCJ1bmlmb3JtcyIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwib25Jbml0IiwibWF0ZXJpYWwiLCJTaGFkZXJNYXRlcmlhbCIsImNvbnN0cnVjdG9yIiwicGFyYW1ldGVycyIsImVudHJpZXMiLCJPYmplY3QiLCJyZWR1Y2UiLCJhY2MiLCJuYW1lIiwidmFsdWUiLCJ1bmlmb3JtIiwiVW5pZm9ybXNVdGlscyIsImNsb25lIiwia2V5IiwiZm9yRWFjaCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwidiIsImFzc2lnbiIsIk1hdGhVdGlscyIsImdlbmVyYXRlVVVJRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/shaderMaterial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/useBVH.js":
/*!*******************************************************!*\
  !*** ./node_modules/@react-three/drei/core/useBVH.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bvh: () => (/* binding */ Bvh),\n/* harmony export */   useBVH: () => (/* binding */ useBVH)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three_mesh_bvh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three-mesh-bvh */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var three_mesh_bvh__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three-mesh-bvh */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js\");\n\n\n\n\n\nconst isMesh = (child)=>child.isMesh;\n/**\n * @deprecated Use the Bvh component instead\n */ function useBVH(mesh, options) {\n    options = {\n        strategy: three_mesh_bvh__WEBPACK_IMPORTED_MODULE_2__.SAH,\n        verbose: false,\n        setBoundingBox: true,\n        maxDepth: 40,\n        maxLeafTris: 10,\n        ...options\n    };\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        if (mesh.current) {\n            mesh.current.raycast = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_3__.acceleratedRaycast;\n            const geometry = mesh.current.geometry;\n            geometry.computeBoundsTree = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_3__.computeBoundsTree;\n            geometry.disposeBoundsTree = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_3__.disposeBoundsTree;\n            geometry.computeBoundsTree(options);\n            return ()=>{\n                if (geometry.boundsTree) {\n                    geometry.disposeBoundsTree();\n                }\n            };\n        }\n    }, [\n        mesh,\n        JSON.stringify(options)\n    ]);\n}\nconst Bvh = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ enabled = true, firstHitOnly = false, children, strategy = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_2__.SAH, verbose = false, setBoundingBox = true, maxDepth = 40, maxLeafTris = 10, ...props }, fref)=>{\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const raycaster = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)((state)=>state.raycaster);\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(fref, ()=>ref.current, []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        if (enabled) {\n            const options = {\n                strategy,\n                verbose,\n                setBoundingBox,\n                maxDepth,\n                maxLeafTris\n            };\n            const group = ref.current; // This can only safely work if the component is used once, but there is no alternative.\n            // Hijacking the raycast method to do it for individual meshes is not an option as it would\n            // cost too much memory ...\n            raycaster.firstHitOnly = firstHitOnly;\n            group.traverse((child)=>{\n                // Only include meshes that do not yet have a boundsTree and whose raycast is standard issue\n                if (isMesh(child) && !child.geometry.boundsTree && child.raycast === three__WEBPACK_IMPORTED_MODULE_5__.Mesh.prototype.raycast) {\n                    child.raycast = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_3__.acceleratedRaycast;\n                    child.geometry.computeBoundsTree = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_3__.computeBoundsTree;\n                    child.geometry.disposeBoundsTree = three_mesh_bvh__WEBPACK_IMPORTED_MODULE_3__.disposeBoundsTree;\n                    child.geometry.computeBoundsTree(options);\n                }\n            });\n            return ()=>{\n                delete raycaster.firstHitOnly;\n                group.traverse((child)=>{\n                    if (isMesh(child) && child.geometry.boundsTree) {\n                        child.geometry.disposeBoundsTree();\n                        child.raycast = three__WEBPACK_IMPORTED_MODULE_5__.Mesh.prototype.raycast;\n                    }\n                });\n            };\n        }\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        ref: ref\n    }, props), children);\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS91c2VCVkguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQ1o7QUFDZjtBQUNGO0FBQ2tFO0FBRS9GLE1BQU1RLFNBQVNDLENBQUFBLFFBQVNBLE1BQU1ELE1BQU07QUFDcEM7O0NBRUMsR0FHRCxTQUFTRSxPQUFPQyxJQUFJLEVBQUVDLE9BQU87SUFDM0JBLFVBQVU7UUFDUkMsVUFBVVQsK0NBQUdBO1FBQ2JVLFNBQVM7UUFDVEMsZ0JBQWdCO1FBQ2hCQyxVQUFVO1FBQ1ZDLGFBQWE7UUFDYixHQUFHTCxPQUFPO0lBQ1o7SUFDQVYsNENBQWUsQ0FBQztRQUNkLElBQUlTLEtBQUtRLE9BQU8sRUFBRTtZQUNoQlIsS0FBS1EsT0FBTyxDQUFDQyxPQUFPLEdBQUdmLDhEQUFrQkE7WUFDekMsTUFBTWdCLFdBQVdWLEtBQUtRLE9BQU8sQ0FBQ0UsUUFBUTtZQUN0Q0EsU0FBU2YsaUJBQWlCLEdBQUdBLDZEQUFpQkE7WUFDOUNlLFNBQVNkLGlCQUFpQixHQUFHQSw2REFBaUJBO1lBQzlDYyxTQUFTZixpQkFBaUIsQ0FBQ007WUFDM0IsT0FBTztnQkFDTCxJQUFJUyxTQUFTQyxVQUFVLEVBQUU7b0JBQ3ZCRCxTQUFTZCxpQkFBaUI7Z0JBQzVCO1lBQ0Y7UUFDRjtJQUNGLEdBQUc7UUFBQ0k7UUFBTVksS0FBS0MsU0FBUyxDQUFDWjtLQUFTO0FBQ3BDO0FBQ0EsTUFBTWEsTUFBTSxXQUFXLEdBQUV2Qiw2Q0FBZ0IsQ0FBQyxDQUFDLEVBQ3pDeUIsVUFBVSxJQUFJLEVBQ2RDLGVBQWUsS0FBSyxFQUNwQkMsUUFBUSxFQUNSaEIsV0FBV1QsK0NBQUcsRUFDZFUsVUFBVSxLQUFLLEVBQ2ZDLGlCQUFpQixJQUFJLEVBQ3JCQyxXQUFXLEVBQUUsRUFDYkMsY0FBYyxFQUFFLEVBQ2hCLEdBQUdhLE9BQ0osRUFBRUM7SUFDRCxNQUFNQyxNQUFNOUIseUNBQVksQ0FBQztJQUN6QixNQUFNZ0MsWUFBWWpDLHFEQUFRQSxDQUFDa0MsQ0FBQUEsUUFBU0EsTUFBTUQsU0FBUztJQUNuRGhDLHNEQUF5QixDQUFDNkIsTUFBTSxJQUFNQyxJQUFJYixPQUFPLEVBQUUsRUFBRTtJQUNyRGpCLDRDQUFlLENBQUM7UUFDZCxJQUFJeUIsU0FBUztZQUNYLE1BQU1mLFVBQVU7Z0JBQ2RDO2dCQUNBQztnQkFDQUM7Z0JBQ0FDO2dCQUNBQztZQUNGO1lBQ0EsTUFBTW9CLFFBQVFMLElBQUliLE9BQU8sRUFBRSx3RkFBd0Y7WUFDbkgsMkZBQTJGO1lBQzNGLDJCQUEyQjtZQUUzQmUsVUFBVU4sWUFBWSxHQUFHQTtZQUN6QlMsTUFBTUMsUUFBUSxDQUFDN0IsQ0FBQUE7Z0JBQ2IsNEZBQTRGO2dCQUM1RixJQUFJRCxPQUFPQyxVQUFVLENBQUNBLE1BQU1ZLFFBQVEsQ0FBQ0MsVUFBVSxJQUFJYixNQUFNVyxPQUFPLEtBQUtqQix1Q0FBSUEsQ0FBQ29DLFNBQVMsQ0FBQ25CLE9BQU8sRUFBRTtvQkFDM0ZYLE1BQU1XLE9BQU8sR0FBR2YsOERBQWtCQTtvQkFDbENJLE1BQU1ZLFFBQVEsQ0FBQ2YsaUJBQWlCLEdBQUdBLDZEQUFpQkE7b0JBQ3BERyxNQUFNWSxRQUFRLENBQUNkLGlCQUFpQixHQUFHQSw2REFBaUJBO29CQUNwREUsTUFBTVksUUFBUSxDQUFDZixpQkFBaUIsQ0FBQ007Z0JBQ25DO1lBQ0Y7WUFDQSxPQUFPO2dCQUNMLE9BQU9zQixVQUFVTixZQUFZO2dCQUM3QlMsTUFBTUMsUUFBUSxDQUFDN0IsQ0FBQUE7b0JBQ2IsSUFBSUQsT0FBT0MsVUFBVUEsTUFBTVksUUFBUSxDQUFDQyxVQUFVLEVBQUU7d0JBQzlDYixNQUFNWSxRQUFRLENBQUNkLGlCQUFpQjt3QkFDaENFLE1BQU1XLE9BQU8sR0FBR2pCLHVDQUFJQSxDQUFDb0MsU0FBUyxDQUFDbkIsT0FBTztvQkFDeEM7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxPQUFPLFdBQVcsR0FBRWxCLGdEQUFtQixDQUFDLFNBQVNGLDhFQUFRQSxDQUFDO1FBQ3hEZ0MsS0FBS0E7SUFDUCxHQUFHRixRQUFRRDtBQUNiO0FBRXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL2NvcmUvdXNlQlZILmpzPzc4YTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgdXNlVGhyZWUgfSBmcm9tICdAcmVhY3QtdGhyZWUvZmliZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFNBSCwgYWNjZWxlcmF0ZWRSYXljYXN0LCBjb21wdXRlQm91bmRzVHJlZSwgZGlzcG9zZUJvdW5kc1RyZWUgfSBmcm9tICd0aHJlZS1tZXNoLWJ2aCc7XG5cbmNvbnN0IGlzTWVzaCA9IGNoaWxkID0+IGNoaWxkLmlzTWVzaDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBCdmggY29tcG9uZW50IGluc3RlYWRcbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZUJWSChtZXNoLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSB7XG4gICAgc3RyYXRlZ3k6IFNBSCxcbiAgICB2ZXJib3NlOiBmYWxzZSxcbiAgICBzZXRCb3VuZGluZ0JveDogdHJ1ZSxcbiAgICBtYXhEZXB0aDogNDAsXG4gICAgbWF4TGVhZlRyaXM6IDEwLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobWVzaC5jdXJyZW50KSB7XG4gICAgICBtZXNoLmN1cnJlbnQucmF5Y2FzdCA9IGFjY2VsZXJhdGVkUmF5Y2FzdDtcbiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbWVzaC5jdXJyZW50Lmdlb21ldHJ5O1xuICAgICAgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kc1RyZWUgPSBjb21wdXRlQm91bmRzVHJlZTtcbiAgICAgIGdlb21ldHJ5LmRpc3Bvc2VCb3VuZHNUcmVlID0gZGlzcG9zZUJvdW5kc1RyZWU7XG4gICAgICBnZW9tZXRyeS5jb21wdXRlQm91bmRzVHJlZShvcHRpb25zKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChnZW9tZXRyeS5ib3VuZHNUcmVlKSB7XG4gICAgICAgICAgZ2VvbWV0cnkuZGlzcG9zZUJvdW5kc1RyZWUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sIFttZXNoLCBKU09OLnN0cmluZ2lmeShvcHRpb25zKV0pO1xufVxuY29uc3QgQnZoID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHtcbiAgZW5hYmxlZCA9IHRydWUsXG4gIGZpcnN0SGl0T25seSA9IGZhbHNlLFxuICBjaGlsZHJlbixcbiAgc3RyYXRlZ3kgPSBTQUgsXG4gIHZlcmJvc2UgPSBmYWxzZSxcbiAgc2V0Qm91bmRpbmdCb3ggPSB0cnVlLFxuICBtYXhEZXB0aCA9IDQwLFxuICBtYXhMZWFmVHJpcyA9IDEwLFxuICAuLi5wcm9wc1xufSwgZnJlZikgPT4ge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJheWNhc3RlciA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLnJheWNhc3Rlcik7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoZnJlZiwgKCkgPT4gcmVmLmN1cnJlbnQsIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RyYXRlZ3ksXG4gICAgICAgIHZlcmJvc2UsXG4gICAgICAgIHNldEJvdW5kaW5nQm94LFxuICAgICAgICBtYXhEZXB0aCxcbiAgICAgICAgbWF4TGVhZlRyaXNcbiAgICAgIH07XG4gICAgICBjb25zdCBncm91cCA9IHJlZi5jdXJyZW50OyAvLyBUaGlzIGNhbiBvbmx5IHNhZmVseSB3b3JrIGlmIHRoZSBjb21wb25lbnQgaXMgdXNlZCBvbmNlLCBidXQgdGhlcmUgaXMgbm8gYWx0ZXJuYXRpdmUuXG4gICAgICAvLyBIaWphY2tpbmcgdGhlIHJheWNhc3QgbWV0aG9kIHRvIGRvIGl0IGZvciBpbmRpdmlkdWFsIG1lc2hlcyBpcyBub3QgYW4gb3B0aW9uIGFzIGl0IHdvdWxkXG4gICAgICAvLyBjb3N0IHRvbyBtdWNoIG1lbW9yeSAuLi5cblxuICAgICAgcmF5Y2FzdGVyLmZpcnN0SGl0T25seSA9IGZpcnN0SGl0T25seTtcbiAgICAgIGdyb3VwLnRyYXZlcnNlKGNoaWxkID0+IHtcbiAgICAgICAgLy8gT25seSBpbmNsdWRlIG1lc2hlcyB0aGF0IGRvIG5vdCB5ZXQgaGF2ZSBhIGJvdW5kc1RyZWUgYW5kIHdob3NlIHJheWNhc3QgaXMgc3RhbmRhcmQgaXNzdWVcbiAgICAgICAgaWYgKGlzTWVzaChjaGlsZCkgJiYgIWNoaWxkLmdlb21ldHJ5LmJvdW5kc1RyZWUgJiYgY2hpbGQucmF5Y2FzdCA9PT0gTWVzaC5wcm90b3R5cGUucmF5Y2FzdCkge1xuICAgICAgICAgIGNoaWxkLnJheWNhc3QgPSBhY2NlbGVyYXRlZFJheWNhc3Q7XG4gICAgICAgICAgY2hpbGQuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kc1RyZWUgPSBjb21wdXRlQm91bmRzVHJlZTtcbiAgICAgICAgICBjaGlsZC5nZW9tZXRyeS5kaXNwb3NlQm91bmRzVHJlZSA9IGRpc3Bvc2VCb3VuZHNUcmVlO1xuICAgICAgICAgIGNoaWxkLmdlb21ldHJ5LmNvbXB1dGVCb3VuZHNUcmVlKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRlbGV0ZSByYXljYXN0ZXIuZmlyc3RIaXRPbmx5O1xuICAgICAgICBncm91cC50cmF2ZXJzZShjaGlsZCA9PiB7XG4gICAgICAgICAgaWYgKGlzTWVzaChjaGlsZCkgJiYgY2hpbGQuZ2VvbWV0cnkuYm91bmRzVHJlZSkge1xuICAgICAgICAgICAgY2hpbGQuZ2VvbWV0cnkuZGlzcG9zZUJvdW5kc1RyZWUoKTtcbiAgICAgICAgICAgIGNoaWxkLnJheWNhc3QgPSBNZXNoLnByb3RvdHlwZS5yYXljYXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdyb3VwXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcyksIGNoaWxkcmVuKTtcbn0pO1xuXG5leHBvcnQgeyBCdmgsIHVzZUJWSCB9O1xuIl0sIm5hbWVzIjpbIl9leHRlbmRzIiwidXNlVGhyZWUiLCJSZWFjdCIsIk1lc2giLCJTQUgiLCJhY2NlbGVyYXRlZFJheWNhc3QiLCJjb21wdXRlQm91bmRzVHJlZSIsImRpc3Bvc2VCb3VuZHNUcmVlIiwiaXNNZXNoIiwiY2hpbGQiLCJ1c2VCVkgiLCJtZXNoIiwib3B0aW9ucyIsInN0cmF0ZWd5IiwidmVyYm9zZSIsInNldEJvdW5kaW5nQm94IiwibWF4RGVwdGgiLCJtYXhMZWFmVHJpcyIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJyYXljYXN0IiwiZ2VvbWV0cnkiLCJib3VuZHNUcmVlIiwiSlNPTiIsInN0cmluZ2lmeSIsIkJ2aCIsImZvcndhcmRSZWYiLCJlbmFibGVkIiwiZmlyc3RIaXRPbmx5IiwiY2hpbGRyZW4iLCJwcm9wcyIsImZyZWYiLCJyZWYiLCJ1c2VSZWYiLCJyYXljYXN0ZXIiLCJzdGF0ZSIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJncm91cCIsInRyYXZlcnNlIiwicHJvdG90eXBlIiwiY3JlYXRlRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/useBVH.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/useFBO.js":
/*!*******************************************************!*\
  !*** ./node_modules/@react-three/drei/core/useFBO.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFBO: () => (/* binding */ useFBO)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n\n\n\n// 👇 uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(/** Width in pixels, or settings (will render fullscreen by default) */ width, /** Height in pixels */ height, /**Settings */ settings) {\n    const size = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.z)((state)=>state.size);\n    const viewport = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_1__.z)((state)=>state.viewport);\n    const _width = typeof width === \"number\" ? width : size.width * viewport.dpr;\n    const _height = typeof height === \"number\" ? height : size.height * viewport.dpr;\n    const _settings = (typeof width === \"number\" ? settings : width) || {};\n    const { samples = 0, depth, ...targetSettings } = _settings;\n    const target = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const target = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderTarget(_width, _height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_2__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_2__.LinearFilter,\n            type: three__WEBPACK_IMPORTED_MODULE_2__.HalfFloatType,\n            ...targetSettings\n        });\n        if (depth) {\n            target.depthTexture = new three__WEBPACK_IMPORTED_MODULE_2__.DepthTexture(_width, _height, three__WEBPACK_IMPORTED_MODULE_2__.FloatType);\n        }\n        target.samples = samples;\n        return target;\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        target.setSize(_width, _height);\n        if (samples) target.samples = samples;\n    }, [\n        samples,\n        target,\n        _width,\n        _height\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return ()=>target.dispose();\n    }, []);\n    return target;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS91c2VGQk8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0I7QUFDQTtBQUNlO0FBRTlDLDJEQUEyRDtBQUMzRCxpREFBaUQ7QUFDakQsU0FBU0csT0FDVCxxRUFBcUUsR0FDckVDLEtBQUssRUFDTCxxQkFBcUIsR0FDckJDLE1BQU0sRUFDTixZQUFZLEdBQ1pDLFFBQVE7SUFDTixNQUFNQyxPQUFPTCxxREFBUUEsQ0FBQ00sQ0FBQUEsUUFBU0EsTUFBTUQsSUFBSTtJQUN6QyxNQUFNRSxXQUFXUCxxREFBUUEsQ0FBQ00sQ0FBQUEsUUFBU0EsTUFBTUMsUUFBUTtJQUVqRCxNQUFNQyxTQUFTLE9BQU9OLFVBQVUsV0FBV0EsUUFBUUcsS0FBS0gsS0FBSyxHQUFHSyxTQUFTRSxHQUFHO0lBRTVFLE1BQU1DLFVBQVUsT0FBT1AsV0FBVyxXQUFXQSxTQUFTRSxLQUFLRixNQUFNLEdBQUdJLFNBQVNFLEdBQUc7SUFFaEYsTUFBTUUsWUFBWSxDQUFDLE9BQU9ULFVBQVUsV0FBV0UsV0FBV0YsS0FBSSxLQUFNLENBQUM7SUFFckUsTUFBTSxFQUNKVSxVQUFVLENBQUMsRUFDWEMsS0FBSyxFQUNMLEdBQUdDLGdCQUNKLEdBQUdIO0lBQ0osTUFBTUksU0FBU2pCLDBDQUFhLENBQUM7UUFDM0IsTUFBTWlCLFNBQVMsSUFBSWhCLG9EQUF1QixDQUFDUyxRQUFRRSxTQUFTO1lBQzFEUSxXQUFXbkIsK0NBQWtCO1lBQzdCcUIsV0FBV3JCLCtDQUFrQjtZQUM3QnNCLE1BQU10QixnREFBbUI7WUFDekIsR0FBR2UsY0FBYztRQUNuQjtRQUVBLElBQUlELE9BQU87WUFDVEUsT0FBT1EsWUFBWSxHQUFHLElBQUl4QiwrQ0FBa0IsQ0FBQ1MsUUFBUUUsU0FBU1gsNENBQWU7UUFDL0U7UUFFQWdCLE9BQU9ILE9BQU8sR0FBR0E7UUFDakIsT0FBT0c7SUFDVCxHQUFHLEVBQUU7SUFDTGpCLGtEQUFxQixDQUFDO1FBQ3BCaUIsT0FBT1ksT0FBTyxDQUFDbkIsUUFBUUU7UUFDdkIsSUFBSUUsU0FBU0csT0FBT0gsT0FBTyxHQUFHQTtJQUNoQyxHQUFHO1FBQUNBO1FBQVNHO1FBQVFQO1FBQVFFO0tBQVE7SUFDckNaLDRDQUFlLENBQUM7UUFDZCxPQUFPLElBQU1pQixPQUFPYyxPQUFPO0lBQzdCLEdBQUcsRUFBRTtJQUNMLE9BQU9kO0FBQ1Q7QUFFa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS91c2VGQk8uanM/ZjllNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyB1c2VUaHJlZSB9IGZyb20gJ0ByZWFjdC10aHJlZS9maWJlcic7XG5cbi8vIPCfkYcgdW5jb21tZW50IHdoZW4gVFMgdmVyc2lvbiBzdXBwb3J0cyBmdW5jdGlvbiBvdmVybG9hZHNcbi8vIGV4cG9ydCBmdW5jdGlvbiB1c2VGQk8oc2V0dGluZ3M/OiBGQk9TZXR0aW5ncylcbmZ1bmN0aW9uIHVzZUZCTyhcbi8qKiBXaWR0aCBpbiBwaXhlbHMsIG9yIHNldHRpbmdzICh3aWxsIHJlbmRlciBmdWxsc2NyZWVuIGJ5IGRlZmF1bHQpICovXG53aWR0aCxcbi8qKiBIZWlnaHQgaW4gcGl4ZWxzICovXG5oZWlnaHQsXG4vKipTZXR0aW5ncyAqL1xuc2V0dGluZ3MpIHtcbiAgY29uc3Qgc2l6ZSA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLnNpemUpO1xuICBjb25zdCB2aWV3cG9ydCA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLnZpZXdwb3J0KTtcblxuICBjb25zdCBfd2lkdGggPSB0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInID8gd2lkdGggOiBzaXplLndpZHRoICogdmlld3BvcnQuZHByO1xuXG4gIGNvbnN0IF9oZWlnaHQgPSB0eXBlb2YgaGVpZ2h0ID09PSAnbnVtYmVyJyA/IGhlaWdodCA6IHNpemUuaGVpZ2h0ICogdmlld3BvcnQuZHByO1xuXG4gIGNvbnN0IF9zZXR0aW5ncyA9ICh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInID8gc2V0dGluZ3MgOiB3aWR0aCkgfHwge307XG5cbiAgY29uc3Qge1xuICAgIHNhbXBsZXMgPSAwLFxuICAgIGRlcHRoLFxuICAgIC4uLnRhcmdldFNldHRpbmdzXG4gIH0gPSBfc2V0dGluZ3M7XG4gIGNvbnN0IHRhcmdldCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldChfd2lkdGgsIF9oZWlnaHQsIHtcbiAgICAgIG1pbkZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLFxuICAgICAgbWFnRmlsdGVyOiBUSFJFRS5MaW5lYXJGaWx0ZXIsXG4gICAgICB0eXBlOiBUSFJFRS5IYWxmRmxvYXRUeXBlLFxuICAgICAgLi4udGFyZ2V0U2V0dGluZ3NcbiAgICB9KTtcblxuICAgIGlmIChkZXB0aCkge1xuICAgICAgdGFyZ2V0LmRlcHRoVGV4dHVyZSA9IG5ldyBUSFJFRS5EZXB0aFRleHR1cmUoX3dpZHRoLCBfaGVpZ2h0LCBUSFJFRS5GbG9hdFR5cGUpO1xuICAgIH1cblxuICAgIHRhcmdldC5zYW1wbGVzID0gc2FtcGxlcztcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgdGFyZ2V0LnNldFNpemUoX3dpZHRoLCBfaGVpZ2h0KTtcbiAgICBpZiAoc2FtcGxlcykgdGFyZ2V0LnNhbXBsZXMgPSBzYW1wbGVzO1xuICB9LCBbc2FtcGxlcywgdGFyZ2V0LCBfd2lkdGgsIF9oZWlnaHRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4gdGFyZ2V0LmRpc3Bvc2UoKTtcbiAgfSwgW10pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5leHBvcnQgeyB1c2VGQk8gfTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIlRIUkVFIiwidXNlVGhyZWUiLCJ1c2VGQk8iLCJ3aWR0aCIsImhlaWdodCIsInNldHRpbmdzIiwic2l6ZSIsInN0YXRlIiwidmlld3BvcnQiLCJfd2lkdGgiLCJkcHIiLCJfaGVpZ2h0IiwiX3NldHRpbmdzIiwic2FtcGxlcyIsImRlcHRoIiwidGFyZ2V0U2V0dGluZ3MiLCJ0YXJnZXQiLCJ1c2VNZW1vIiwiV2ViR0xSZW5kZXJUYXJnZXQiLCJtaW5GaWx0ZXIiLCJMaW5lYXJGaWx0ZXIiLCJtYWdGaWx0ZXIiLCJ0eXBlIiwiSGFsZkZsb2F0VHlwZSIsImRlcHRoVGV4dHVyZSIsIkRlcHRoVGV4dHVyZSIsIkZsb2F0VHlwZSIsInVzZUxheW91dEVmZmVjdCIsInNldFNpemUiLCJ1c2VFZmZlY3QiLCJkaXNwb3NlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/useFBO.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/index-673ef987.esm.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ useFrame),\n/* harmony export */   B: () => (/* binding */ Block),\n/* harmony export */   C: () => (/* binding */ useGraph),\n/* harmony export */   D: () => (/* binding */ useLoader),\n/* harmony export */   E: () => (/* binding */ ErrorBoundary),\n/* harmony export */   a: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   b: () => (/* binding */ createRoot),\n/* harmony export */   c: () => (/* binding */ createEvents),\n/* harmony export */   d: () => (/* binding */ unmountComponentAtNode),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   f: () => (/* binding */ context),\n/* harmony export */   g: () => (/* binding */ createPortal),\n/* harmony export */   h: () => (/* binding */ reconciler),\n/* harmony export */   i: () => (/* binding */ isRef),\n/* harmony export */   j: () => (/* binding */ applyProps),\n/* harmony export */   k: () => (/* binding */ dispose),\n/* harmony export */   l: () => (/* binding */ invalidate),\n/* harmony export */   m: () => (/* binding */ advance),\n/* harmony export */   n: () => (/* binding */ addEffect),\n/* harmony export */   o: () => (/* binding */ addAfterEffect),\n/* harmony export */   p: () => (/* binding */ addTail),\n/* harmony export */   q: () => (/* binding */ flushGlobalEffects),\n/* harmony export */   r: () => (/* binding */ render),\n/* harmony export */   s: () => (/* binding */ getRootState),\n/* harmony export */   t: () => (/* binding */ threeTypes),\n/* harmony export */   u: () => (/* binding */ useMutableCallback),\n/* harmony export */   v: () => (/* binding */ act),\n/* harmony export */   w: () => (/* binding */ roots),\n/* harmony export */   x: () => (/* binding */ useInstanceHandle),\n/* harmony export */   y: () => (/* binding */ useStore),\n/* harmony export */   z: () => (/* binding */ useThree)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\n/* harmony import */ var suspend_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.js\");\n\n\n\n\n\n\n\nvar threeTypes = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nconst catalogue = {};\nconst extend = (objects)=>void Object.assign(catalogue, objects);\nfunction createRenderer(_roots, _getEventPriority) {\n    function createInstance(type, { args = [], attach, ...props }, root) {\n        let name = `${type[0].toUpperCase()}${type.slice(1)}`;\n        let instance;\n        if (type === \"primitive\") {\n            if (props.object === undefined) throw new Error(\"R3F: Primitives without 'object' are invalid!\");\n            const object = props.object;\n            instance = prepare(object, {\n                type,\n                root,\n                attach,\n                primitive: true\n            });\n        } else {\n            const target = catalogue[name];\n            if (!target) {\n                throw new Error(`R3F: ${name} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);\n            }\n            // Throw if an object or literal was passed for args\n            if (!Array.isArray(args)) throw new Error(\"R3F: The args prop must be an array!\");\n            // Instanciate new object, link it to the root\n            // Append memoized props with args so it's not forgotten\n            instance = prepare(new target(...args), {\n                type,\n                root,\n                attach,\n                // Save args in case we need to reconstruct later for HMR\n                memoizedProps: {\n                    args\n                }\n            });\n        }\n        // Auto-attach geometries and materials\n        if (instance.__r3f.attach === undefined) {\n            if (instance instanceof three__WEBPACK_IMPORTED_MODULE_4__.BufferGeometry) instance.__r3f.attach = \"geometry\";\n            else if (instance instanceof three__WEBPACK_IMPORTED_MODULE_4__.Material) instance.__r3f.attach = \"material\";\n        }\n        // It should NOT call onUpdate on object instanciation, because it hasn't been added to the\n        // view yet. If the callback relies on references for instance, they won't be ready yet, this is\n        // why it passes \"true\" here\n        // There is no reason to apply props to injects\n        if (name !== \"inject\") applyProps$1(instance, props);\n        return instance;\n    }\n    function appendChild(parentInstance, child) {\n        let added = false;\n        if (child) {\n            var _child$__r3f, _parentInstance$__r3f;\n            // The attach attribute implies that the object attaches itself on the parent\n            if ((_child$__r3f = child.__r3f) != null && _child$__r3f.attach) {\n                attach(parentInstance, child, child.__r3f.attach);\n            } else if (child.isObject3D && parentInstance.isObject3D) {\n                // add in the usual parent-child way\n                parentInstance.add(child);\n                added = true;\n            }\n            // This is for anything that used attach, and for non-Object3Ds that don't get attached to props;\n            // that is, anything that's a child in React but not a child in the scenegraph.\n            if (!added) (_parentInstance$__r3f = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f.objects.push(child);\n            if (!child.__r3f) prepare(child, {});\n            child.__r3f.parent = parentInstance;\n            updateInstance(child);\n            invalidateInstance(child);\n        }\n    }\n    function insertBefore(parentInstance, child, beforeChild) {\n        let added = false;\n        if (child) {\n            var _child$__r3f2, _parentInstance$__r3f2;\n            if ((_child$__r3f2 = child.__r3f) != null && _child$__r3f2.attach) {\n                attach(parentInstance, child, child.__r3f.attach);\n            } else if (child.isObject3D && parentInstance.isObject3D) {\n                child.parent = parentInstance;\n                child.dispatchEvent({\n                    type: \"added\"\n                });\n                const restSiblings = parentInstance.children.filter((sibling)=>sibling !== child);\n                const index = restSiblings.indexOf(beforeChild);\n                parentInstance.children = [\n                    ...restSiblings.slice(0, index),\n                    child,\n                    ...restSiblings.slice(index)\n                ];\n                added = true;\n            }\n            if (!added) (_parentInstance$__r3f2 = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f2.objects.push(child);\n            if (!child.__r3f) prepare(child, {});\n            child.__r3f.parent = parentInstance;\n            updateInstance(child);\n            invalidateInstance(child);\n        }\n    }\n    function removeRecursive(array, parent, dispose = false) {\n        if (array) [\n            ...array\n        ].forEach((child)=>removeChild(parent, child, dispose));\n    }\n    function removeChild(parentInstance, child, dispose) {\n        if (child) {\n            var _parentInstance$__r3f3, _child$__r3f3, _child$__r3f5;\n            // Clear the parent reference\n            if (child.__r3f) child.__r3f.parent = null;\n            // Remove child from the parents objects\n            if ((_parentInstance$__r3f3 = parentInstance.__r3f) != null && _parentInstance$__r3f3.objects) parentInstance.__r3f.objects = parentInstance.__r3f.objects.filter((x)=>x !== child);\n            // Remove attachment\n            if ((_child$__r3f3 = child.__r3f) != null && _child$__r3f3.attach) {\n                detach(parentInstance, child, child.__r3f.attach);\n            } else if (child.isObject3D && parentInstance.isObject3D) {\n                var _child$__r3f4;\n                parentInstance.remove(child);\n                // Remove interactivity\n                if ((_child$__r3f4 = child.__r3f) != null && _child$__r3f4.root) {\n                    removeInteractivity(child.__r3f.root, child);\n                }\n            }\n            // Allow objects to bail out of recursive dispose altogether by passing dispose={null}\n            // Never dispose of primitives because their state may be kept outside of React!\n            // In order for an object to be able to dispose it has to have\n            //   - a dispose method,\n            //   - it cannot be a <primitive object={...} />\n            //   - it cannot be a THREE.Scene, because three has broken it's own api\n            //\n            // Since disposal is recursive, we can check the optional dispose arg, which will be undefined\n            // when the reconciler calls it, but then carry our own check recursively\n            const isPrimitive = (_child$__r3f5 = child.__r3f) == null ? void 0 : _child$__r3f5.primitive;\n            const shouldDispose = dispose === undefined ? child.dispose !== null && !isPrimitive : dispose;\n            // Remove nested child objects. Primitives should not have objects and children that are\n            // attached to them declaratively ...\n            if (!isPrimitive) {\n                var _child$__r3f6;\n                removeRecursive((_child$__r3f6 = child.__r3f) == null ? void 0 : _child$__r3f6.objects, child, shouldDispose);\n                removeRecursive(child.children, child, shouldDispose);\n            }\n            // Remove references\n            delete child.__r3f;\n            // Dispose item whenever the reconciler feels like it\n            if (shouldDispose && child.dispose && child.type !== \"Scene\") {\n                (0,scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_scheduleCallback)(scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_IdlePriority, ()=>{\n                    try {\n                        child.dispose();\n                    } catch (e) {\n                    /* ... */ }\n                });\n            }\n            invalidateInstance(parentInstance);\n        }\n    }\n    function switchInstance(instance, type, newProps, fiber) {\n        var _instance$__r3f;\n        const parent = (_instance$__r3f = instance.__r3f) == null ? void 0 : _instance$__r3f.parent;\n        if (!parent) return;\n        const newInstance = createInstance(type, newProps, instance.__r3f.root);\n        // https://github.com/pmndrs/react-three-fiber/issues/1348\n        // When args change the instance has to be re-constructed, which then\n        // forces r3f to re-parent the children and non-scene objects\n        if (instance.children) {\n            for (const child of instance.children){\n                if (child.__r3f) appendChild(newInstance, child);\n            }\n            instance.children = instance.children.filter((child)=>!child.__r3f);\n        }\n        instance.__r3f.objects.forEach((child)=>appendChild(newInstance, child));\n        instance.__r3f.objects = [];\n        if (!instance.__r3f.autoRemovedBeforeAppend) {\n            removeChild(parent, instance);\n        }\n        if (newInstance.parent) {\n            newInstance.__r3f.autoRemovedBeforeAppend = true;\n        }\n        appendChild(parent, newInstance);\n        // Re-bind event handlers\n        if (newInstance.raycast && newInstance.__r3f.eventCount) {\n            const rootState = newInstance.__r3f.root.getState();\n            rootState.internal.interaction.push(newInstance);\n        }\n        [\n            fiber,\n            fiber.alternate\n        ].forEach((fiber)=>{\n            if (fiber !== null) {\n                fiber.stateNode = newInstance;\n                if (fiber.ref) {\n                    if (typeof fiber.ref === \"function\") fiber.ref(newInstance);\n                    else fiber.ref.current = newInstance;\n                }\n            }\n        });\n    }\n    // Don't handle text instances, warn on undefined behavior\n    const handleTextInstance = ()=>console.warn(\"Text is not allowed in the R3F tree! This could be stray whitespace or characters.\");\n    const reconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_2___default()({\n        createInstance,\n        removeChild,\n        appendChild,\n        appendInitialChild: appendChild,\n        insertBefore,\n        supportsMutation: true,\n        isPrimaryRenderer: false,\n        supportsPersistence: false,\n        supportsHydration: false,\n        noTimeout: -1,\n        appendChildToContainer: (container, child)=>{\n            if (!child) return;\n            // Don't append to unmounted container\n            const scene = container.getState().scene;\n            if (!scene.__r3f) return;\n            // Link current root to the default scene\n            scene.__r3f.root = container;\n            appendChild(scene, child);\n        },\n        removeChildFromContainer: (container, child)=>{\n            if (!child) return;\n            removeChild(container.getState().scene, child);\n        },\n        insertInContainerBefore: (container, child, beforeChild)=>{\n            if (!child || !beforeChild) return;\n            // Don't append to unmounted container\n            const scene = container.getState().scene;\n            if (!scene.__r3f) return;\n            insertBefore(scene, child, beforeChild);\n        },\n        getRootHostContext: ()=>null,\n        getChildHostContext: (parentHostContext)=>parentHostContext,\n        finalizeInitialChildren (instance) {\n            var _instance$__r3f2;\n            const localState = (_instance$__r3f2 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f2 : {};\n            // https://github.com/facebook/react/issues/20271\n            // Returning true will trigger commitMount\n            return Boolean(localState.handlers);\n        },\n        prepareUpdate (instance, _type, oldProps, newProps) {\n            var _instance$__r3f3;\n            const localState = (_instance$__r3f3 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f3 : {};\n            // Create diff-sets\n            if (localState.primitive && newProps.object && newProps.object !== instance) {\n                return [\n                    true\n                ];\n            } else {\n                // This is a data object, let's extract critical information about it\n                const { args: argsNew = [], children: cN, ...restNew } = newProps;\n                const { args: argsOld = [], children: cO, ...restOld } = oldProps;\n                // Throw if an object or literal was passed for args\n                if (!Array.isArray(argsNew)) throw new Error(\"R3F: the args prop must be an array!\");\n                // If it has new props or arguments, then it needs to be re-instantiated\n                if (argsNew.some((value, index)=>value !== argsOld[index])) return [\n                    true\n                ];\n                // Create a diff-set, flag if there are any changes\n                const diff = diffProps(instance, restNew, restOld, true);\n                if (diff.changes.length) return [\n                    false,\n                    diff\n                ];\n                // Otherwise do not touch the instance\n                return null;\n            }\n        },\n        commitUpdate (instance, [reconstruct, diff], type, _oldProps, newProps, fiber) {\n            // Reconstruct when args or <primitive object={...} have changes\n            if (reconstruct) switchInstance(instance, type, newProps, fiber);\n            else applyProps$1(instance, diff);\n        },\n        commitMount (instance, _type, _props, _int) {\n            var _instance$__r3f4;\n            // https://github.com/facebook/react/issues/20271\n            // This will make sure events are only added once to the central container\n            const localState = (_instance$__r3f4 = instance.__r3f) != null ? _instance$__r3f4 : {};\n            if (instance.raycast && localState.handlers && localState.eventCount) {\n                instance.__r3f.root.getState().internal.interaction.push(instance);\n            }\n        },\n        getPublicInstance: (instance)=>instance,\n        prepareForCommit: ()=>null,\n        preparePortalMount: (container)=>prepare(container.getState().scene),\n        resetAfterCommit: ()=>{},\n        shouldSetTextContent: ()=>false,\n        clearContainer: ()=>false,\n        hideInstance (instance) {\n            var _instance$__r3f5;\n            // Detach while the instance is hidden\n            const { attach: type, parent } = (_instance$__r3f5 = instance.__r3f) != null ? _instance$__r3f5 : {};\n            if (type && parent) detach(parent, instance, type);\n            if (instance.isObject3D) instance.visible = false;\n            invalidateInstance(instance);\n        },\n        unhideInstance (instance, props) {\n            var _instance$__r3f6;\n            // Re-attach when the instance is unhidden\n            const { attach: type, parent } = (_instance$__r3f6 = instance.__r3f) != null ? _instance$__r3f6 : {};\n            if (type && parent) attach(parent, instance, type);\n            if (instance.isObject3D && props.visible == null || props.visible) instance.visible = true;\n            invalidateInstance(instance);\n        },\n        createTextInstance: handleTextInstance,\n        hideTextInstance: handleTextInstance,\n        unhideTextInstance: handleTextInstance,\n        // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874\n        // @ts-ignore\n        getCurrentEventPriority: ()=>_getEventPriority ? _getEventPriority() : react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority,\n        beforeActiveInstanceBlur: ()=>{},\n        afterActiveInstanceBlur: ()=>{},\n        detachDeletedInstance: ()=>{},\n        now: typeof performance !== \"undefined\" && is.fun(performance.now) ? performance.now : is.fun(Date.now) ? Date.now : ()=>0,\n        // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503\n        scheduleTimeout: is.fun(setTimeout) ? setTimeout : undefined,\n        cancelTimeout: is.fun(clearTimeout) ? clearTimeout : undefined\n    });\n    return {\n        reconciler,\n        applyProps: applyProps$1\n    };\n}\nvar _window$document, _window$navigator;\n/**\n * Returns `true` with correct TS type inference if an object has a configurable color space (since r152).\n */ const hasColorSpace = (object)=>\"colorSpace\" in object || \"outputColorSpace\" in object;\n/**\n * The current THREE.ColorManagement instance, if present.\n */ const getColorManagement = ()=>{\n    var _ColorManagement;\n    return (_ColorManagement = catalogue.ColorManagement) != null ? _ColorManagement : null;\n};\nconst isOrthographicCamera = (def)=>def && def.isOrthographicCamera;\nconst isRef = (obj)=>obj && obj.hasOwnProperty(\"current\");\n/**\n * An SSR-friendly useLayoutEffect.\n *\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect elsewhere.\n *\n * @see https://github.com/facebook/react/issues/14927\n */ const useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useMutableCallback(fn) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fn);\n    useIsomorphicLayoutEffect(()=>void (ref.current = fn), [\n        fn\n    ]);\n    return ref;\n}\nfunction Block({ set }) {\n    useIsomorphicLayoutEffect(()=>{\n        set(new Promise(()=>null));\n        return ()=>set(false);\n    }, [\n        set\n    ]);\n    return null;\n}\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(...args){\n        super(...args);\n        this.state = {\n            error: false\n        };\n    }\n    componentDidCatch(err) {\n        this.props.set(err);\n    }\n    render() {\n        return this.state.error ? null : this.props.children;\n    }\n}\nErrorBoundary.getDerivedStateFromError = ()=>({\n        error: true\n    });\nconst DEFAULT = \"__default\";\nconst DEFAULTS = new Map();\nconst isDiffSet = (def)=>def && !!def.memoized && !!def.changes;\nfunction calculateDpr(dpr) {\n    var _window$devicePixelRa;\n    // Err on the side of progress by assuming 2x dpr if we can't detect it\n    // This will happen in workers where window is defined but dpr isn't.\n    const target =  false ? 0 : 1;\n    return Array.isArray(dpr) ? Math.min(Math.max(dpr[0], target), dpr[1]) : dpr;\n}\n/**\n * Returns instance root state\n */ const getRootState = (obj)=>{\n    var _r3f;\n    return (_r3f = obj.__r3f) == null ? void 0 : _r3f.root.getState();\n};\n// A collection of compare functions\nconst is = {\n    obj: (a)=>a === Object(a) && !is.arr(a) && typeof a !== \"function\",\n    fun: (a)=>typeof a === \"function\",\n    str: (a)=>typeof a === \"string\",\n    num: (a)=>typeof a === \"number\",\n    boo: (a)=>typeof a === \"boolean\",\n    und: (a)=>a === void 0,\n    arr: (a)=>Array.isArray(a),\n    equ (a, b, { arrays = \"shallow\", objects = \"reference\", strict = true } = {}) {\n        // Wrong type or one of the two undefined, doesn't match\n        if (typeof a !== typeof b || !!a !== !!b) return false;\n        // Atomic, just compare a against b\n        if (is.str(a) || is.num(a)) return a === b;\n        const isObj = is.obj(a);\n        if (isObj && objects === \"reference\") return a === b;\n        const isArr = is.arr(a);\n        if (isArr && arrays === \"reference\") return a === b;\n        // Array or Object, shallow compare first to see if it's a match\n        if ((isArr || isObj) && a === b) return true;\n        // Last resort, go through keys\n        let i;\n        // Check if a has all the keys of b\n        for(i in a)if (!(i in b)) return false;\n        // Check if values between keys match\n        if (isObj && arrays === \"shallow\" && objects === \"shallow\") {\n            for(i in strict ? b : a)if (!is.equ(a[i], b[i], {\n                strict,\n                objects: \"reference\"\n            })) return false;\n        } else {\n            for(i in strict ? b : a)if (a[i] !== b[i]) return false;\n        }\n        // If i is undefined\n        if (is.und(i)) {\n            // If both arrays are empty we consider them equal\n            if (isArr && a.length === 0 && b.length === 0) return true;\n            // If both objects are empty we consider them equal\n            if (isObj && Object.keys(a).length === 0 && Object.keys(b).length === 0) return true;\n            // Otherwise match them by value\n            if (a !== b) return false;\n        }\n        return true;\n    }\n};\n// Collects nodes and materials from a THREE.Object3D\nfunction buildGraph(object) {\n    const data = {\n        nodes: {},\n        materials: {}\n    };\n    if (object) {\n        object.traverse((obj)=>{\n            if (obj.name) data.nodes[obj.name] = obj;\n            if (obj.material && !data.materials[obj.material.name]) data.materials[obj.material.name] = obj.material;\n        });\n    }\n    return data;\n}\n// Disposes an object and all its properties\nfunction dispose(obj) {\n    if (obj.dispose && obj.type !== \"Scene\") obj.dispose();\n    for(const p in obj){\n        p.dispose == null ? void 0 : p.dispose();\n        delete obj[p];\n    }\n}\n// Each object in the scene carries a small LocalState descriptor\nfunction prepare(object, state) {\n    const instance = object;\n    instance.__r3f = {\n        type: \"\",\n        root: null,\n        previousAttach: null,\n        memoizedProps: {},\n        eventCount: 0,\n        handlers: {},\n        objects: [],\n        parent: null,\n        ...state\n    };\n    return object;\n}\nfunction resolve(instance, key) {\n    let target = instance;\n    if (key.includes(\"-\")) {\n        const entries = key.split(\"-\");\n        const last = entries.pop();\n        target = entries.reduce((acc, key)=>acc[key], instance);\n        return {\n            target,\n            key: last\n        };\n    } else return {\n        target,\n        key\n    };\n}\n// Checks if a dash-cased string ends with an integer\nconst INDEX_REGEX = /-\\d+$/;\nfunction attach(parent, child, type) {\n    if (is.str(type)) {\n        // If attaching into an array (foo-0), create one\n        if (INDEX_REGEX.test(type)) {\n            const root = type.replace(INDEX_REGEX, \"\");\n            const { target, key } = resolve(parent, root);\n            if (!Array.isArray(target[key])) target[key] = [];\n        }\n        const { target, key } = resolve(parent, type);\n        child.__r3f.previousAttach = target[key];\n        target[key] = child;\n    } else child.__r3f.previousAttach = type(parent, child);\n}\nfunction detach(parent, child, type) {\n    var _child$__r3f, _child$__r3f2;\n    if (is.str(type)) {\n        const { target, key } = resolve(parent, type);\n        const previous = child.__r3f.previousAttach;\n        // When the previous value was undefined, it means the value was never set to begin with\n        if (previous === undefined) delete target[key];\n        else target[key] = previous;\n    } else (_child$__r3f = child.__r3f) == null ? void 0 : _child$__r3f.previousAttach == null ? void 0 : _child$__r3f.previousAttach(parent, child);\n    (_child$__r3f2 = child.__r3f) == null ? true : delete _child$__r3f2.previousAttach;\n}\n// This function prepares a set of changes to be applied to the instance\nfunction diffProps(instance, { children: cN, key: kN, ref: rN, ...props }, { children: cP, key: kP, ref: rP, ...previous } = {}, remove = false) {\n    var _instance$__r3f;\n    const localState = (_instance$__r3f = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f : {};\n    const entries = Object.entries(props);\n    const changes = [];\n    // Catch removed props, prepend them so they can be reset or removed\n    if (remove) {\n        const previousKeys = Object.keys(previous);\n        for(let i = 0; i < previousKeys.length; i++){\n            if (!props.hasOwnProperty(previousKeys[i])) entries.unshift([\n                previousKeys[i],\n                DEFAULT + \"remove\"\n            ]);\n        }\n    }\n    entries.forEach(([key, value])=>{\n        var _instance$__r3f2;\n        // Bail out on primitive object\n        if ((_instance$__r3f2 = instance.__r3f) != null && _instance$__r3f2.primitive && key === \"object\") return;\n        // When props match bail out\n        if (is.equ(value, previous[key])) return;\n        // Collect handlers and bail out\n        if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(key)) return changes.push([\n            key,\n            value,\n            true,\n            []\n        ]);\n        // Split dashed props\n        let entries = [];\n        if (key.includes(\"-\")) entries = key.split(\"-\");\n        changes.push([\n            key,\n            value,\n            false,\n            entries\n        ]);\n        // Reset pierced props\n        for(const prop in props){\n            const value = props[prop];\n            if (prop.startsWith(`${key}-`)) changes.push([\n                prop,\n                value,\n                false,\n                prop.split(\"-\")\n            ]);\n        }\n    });\n    const memoized = {\n        ...props\n    };\n    if (localState.memoizedProps && localState.memoizedProps.args) memoized.args = localState.memoizedProps.args;\n    if (localState.memoizedProps && localState.memoizedProps.attach) memoized.attach = localState.memoizedProps.attach;\n    return {\n        memoized,\n        changes\n    };\n}\n// This function applies a set of changes to the instance\nfunction applyProps$1(instance, data) {\n    var _instance$__r3f3, _root$getState, _instance$__r3f4;\n    // Filter equals, events and reserved props\n    const localState = (_instance$__r3f3 = instance.__r3f) != null ? _instance$__r3f3 : {};\n    const root = localState.root;\n    const rootState = (_root$getState = root == null ? void 0 : root.getState == null ? void 0 : root.getState()) != null ? _root$getState : {};\n    const { memoized, changes } = isDiffSet(data) ? data : diffProps(instance, data);\n    const prevHandlers = localState.eventCount;\n    // Prepare memoized props\n    if (instance.__r3f) instance.__r3f.memoizedProps = memoized;\n    for(let i = 0; i < changes.length; i++){\n        let [key, value, isEvent, keys] = changes[i];\n        // Alias (output)encoding => (output)colorSpace (since r152)\n        // https://github.com/pmndrs/react-three-fiber/pull/2829\n        if (hasColorSpace(instance)) {\n            const sRGBEncoding = 3001;\n            const SRGBColorSpace = \"srgb\";\n            const LinearSRGBColorSpace = \"srgb-linear\";\n            if (key === \"encoding\") {\n                key = \"colorSpace\";\n                value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n            } else if (key === \"outputEncoding\") {\n                key = \"outputColorSpace\";\n                value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n            }\n        }\n        let currentInstance = instance;\n        let targetProp = currentInstance[key];\n        // Revolve dashed props\n        if (keys.length) {\n            targetProp = keys.reduce((acc, key)=>acc[key], instance);\n            // If the target is atomic, it forces us to switch the root\n            if (!(targetProp && targetProp.set)) {\n                const [name, ...reverseEntries] = keys.reverse();\n                currentInstance = reverseEntries.reverse().reduce((acc, key)=>acc[key], instance);\n                key = name;\n            }\n        }\n        // https://github.com/mrdoob/three.js/issues/21209\n        // HMR/fast-refresh relies on the ability to cancel out props, but threejs\n        // has no means to do this. Hence we curate a small collection of value-classes\n        // with their respective constructor/set arguments\n        // For removed props, try to set default values, if possible\n        if (value === DEFAULT + \"remove\") {\n            if (currentInstance.constructor) {\n                // create a blank slate of the instance and copy the particular parameter.\n                let ctor = DEFAULTS.get(currentInstance.constructor);\n                if (!ctor) {\n                    // @ts-ignore\n                    ctor = new currentInstance.constructor();\n                    DEFAULTS.set(currentInstance.constructor, ctor);\n                }\n                value = ctor[key];\n            } else {\n                // instance does not have constructor, just set it to 0\n                value = 0;\n            }\n        }\n        // Deal with pointer events ...\n        if (isEvent) {\n            if (value) localState.handlers[key] = value;\n            else delete localState.handlers[key];\n            localState.eventCount = Object.keys(localState.handlers).length;\n        } else if (targetProp && targetProp.set && (targetProp.copy || targetProp instanceof three__WEBPACK_IMPORTED_MODULE_4__.Layers)) {\n            // If value is an array\n            if (Array.isArray(value)) {\n                if (targetProp.fromArray) targetProp.fromArray(value);\n                else targetProp.set(...value);\n            } else if (targetProp.copy && value && value.constructor && targetProp.constructor === value.constructor) {\n                targetProp.copy(value);\n            } else if (value !== undefined) {\n                const isColor = targetProp instanceof three__WEBPACK_IMPORTED_MODULE_4__.Color;\n                // Allow setting array scalars\n                if (!isColor && targetProp.setScalar) targetProp.setScalar(value);\n                else if (targetProp instanceof three__WEBPACK_IMPORTED_MODULE_4__.Layers && value instanceof three__WEBPACK_IMPORTED_MODULE_4__.Layers) targetProp.mask = value.mask;\n                else targetProp.set(value);\n                // For versions of three which don't support THREE.ColorManagement,\n                // Auto-convert sRGB colors\n                // https://github.com/pmndrs/react-three-fiber/issues/344\n                if (!getColorManagement() && !rootState.linear && isColor) targetProp.convertSRGBToLinear();\n            }\n        // Else, just overwrite the value\n        } else {\n            currentInstance[key] = value;\n            // Auto-convert sRGB textures, for now ...\n            // https://github.com/pmndrs/react-three-fiber/issues/344\n            if (currentInstance[key] instanceof three__WEBPACK_IMPORTED_MODULE_4__.Texture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129\n            currentInstance[key].format === three__WEBPACK_IMPORTED_MODULE_4__.RGBAFormat && currentInstance[key].type === three__WEBPACK_IMPORTED_MODULE_4__.UnsignedByteType) {\n                const texture = currentInstance[key];\n                if (hasColorSpace(texture) && hasColorSpace(rootState.gl)) texture.colorSpace = rootState.gl.outputColorSpace;\n                else texture.encoding = rootState.gl.outputEncoding;\n            }\n        }\n        invalidateInstance(instance);\n    }\n    if (localState.parent && rootState.internal && instance.raycast && prevHandlers !== localState.eventCount) {\n        // Pre-emptively remove the instance from the interaction manager\n        const index = rootState.internal.interaction.indexOf(instance);\n        if (index > -1) rootState.internal.interaction.splice(index, 1);\n        // Add the instance to the interaction manager only when it has handlers\n        if (localState.eventCount) rootState.internal.interaction.push(instance);\n    }\n    // Call the update lifecycle when it is being updated, but only when it is part of the scene.\n    // Skip updates to the `onUpdate` prop itself\n    const isCircular = changes.length === 1 && changes[0][0] === \"onUpdate\";\n    if (!isCircular && changes.length && (_instance$__r3f4 = instance.__r3f) != null && _instance$__r3f4.parent) updateInstance(instance);\n    return instance;\n}\nfunction invalidateInstance(instance) {\n    var _instance$__r3f5, _instance$__r3f5$root;\n    const state = (_instance$__r3f5 = instance.__r3f) == null ? void 0 : (_instance$__r3f5$root = _instance$__r3f5.root) == null ? void 0 : _instance$__r3f5$root.getState == null ? void 0 : _instance$__r3f5$root.getState();\n    if (state && state.internal.frames === 0) state.invalidate();\n}\nfunction updateInstance(instance) {\n    instance.onUpdate == null ? void 0 : instance.onUpdate(instance);\n}\nfunction updateCamera(camera, size) {\n    // https://github.com/pmndrs/react-three-fiber/issues/92\n    // Do not mess with the camera if it belongs to the user\n    if (!camera.manual) {\n        if (isOrthographicCamera(camera)) {\n            camera.left = size.width / -2;\n            camera.right = size.width / 2;\n            camera.top = size.height / 2;\n            camera.bottom = size.height / -2;\n        } else {\n            camera.aspect = size.width / size.height;\n        }\n        camera.updateProjectionMatrix();\n        // https://github.com/pmndrs/react-three-fiber/issues/178\n        // Update matrix world since the renderer is a frame late\n        camera.updateMatrixWorld();\n    }\n}\nfunction makeId(event) {\n    return (event.eventObject || event.object).uuid + \"/\" + event.index + event.instanceId;\n}\n// https://github.com/facebook/react/tree/main/packages/react-reconciler#getcurrenteventpriority\n// Gives React a clue as to how import the current interaction is\nfunction getEventPriority() {\n    var _globalScope$event;\n    // Get a handle to the current global scope in window and worker contexts if able\n    // https://github.com/pmndrs/react-three-fiber/pull/2493\n    const globalScope = typeof self !== \"undefined\" && self ||  false && 0;\n    if (!globalScope) return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n    const name = (_globalScope$event = globalScope.event) == null ? void 0 : _globalScope$event.type;\n    switch(name){\n        case \"click\":\n        case \"contextmenu\":\n        case \"dblclick\":\n        case \"pointercancel\":\n        case \"pointerdown\":\n        case \"pointerup\":\n            return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DiscreteEventPriority;\n        case \"pointermove\":\n        case \"pointerout\":\n        case \"pointerover\":\n        case \"pointerenter\":\n        case \"pointerleave\":\n        case \"wheel\":\n            return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ContinuousEventPriority;\n        default:\n            return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n    }\n}\n/**\n * Release pointer captures.\n * This is called by releasePointerCapture in the API, and when an object is removed.\n */ function releaseInternalPointerCapture(capturedMap, obj, captures, pointerId) {\n    const captureData = captures.get(obj);\n    if (captureData) {\n        captures.delete(obj);\n        // If this was the last capturing object for this pointer\n        if (captures.size === 0) {\n            capturedMap.delete(pointerId);\n            captureData.target.releasePointerCapture(pointerId);\n        }\n    }\n}\nfunction removeInteractivity(store, object) {\n    const { internal } = store.getState();\n    // Removes every trace of an object from the data store\n    internal.interaction = internal.interaction.filter((o)=>o !== object);\n    internal.initialHits = internal.initialHits.filter((o)=>o !== object);\n    internal.hovered.forEach((value, key)=>{\n        if (value.eventObject === object || value.object === object) {\n            // Clear out intersects, they are outdated by now\n            internal.hovered.delete(key);\n        }\n    });\n    internal.capturedMap.forEach((captures, pointerId)=>{\n        releaseInternalPointerCapture(internal.capturedMap, object, captures, pointerId);\n    });\n}\nfunction createEvents(store) {\n    /** Calculates delta */ function calculateDistance(event) {\n        const { internal } = store.getState();\n        const dx = event.offsetX - internal.initialClick[0];\n        const dy = event.offsetY - internal.initialClick[1];\n        return Math.round(Math.sqrt(dx * dx + dy * dy));\n    }\n    /** Returns true if an instance has a valid pointer-event registered, this excludes scroll, clicks etc */ function filterPointerEvents(objects) {\n        return objects.filter((obj)=>[\n                \"Move\",\n                \"Over\",\n                \"Enter\",\n                \"Out\",\n                \"Leave\"\n            ].some((name)=>{\n                var _r3f;\n                return (_r3f = obj.__r3f) == null ? void 0 : _r3f.handlers[\"onPointer\" + name];\n            }));\n    }\n    function intersect(event, filter) {\n        const state = store.getState();\n        const duplicates = new Set();\n        const intersections = [];\n        // Allow callers to eliminate event objects\n        const eventsObjects = filter ? filter(state.internal.interaction) : state.internal.interaction;\n        // Reset all raycaster cameras to undefined\n        for(let i = 0; i < eventsObjects.length; i++){\n            const state = getRootState(eventsObjects[i]);\n            if (state) {\n                state.raycaster.camera = undefined;\n            }\n        }\n        if (!state.previousRoot) {\n            // Make sure root-level pointer and ray are set up\n            state.events.compute == null ? void 0 : state.events.compute(event, state);\n        }\n        function handleRaycast(obj) {\n            const state = getRootState(obj);\n            // Skip event handling when noEvents is set, or when the raycasters camera is null\n            if (!state || !state.events.enabled || state.raycaster.camera === null) return [];\n            // When the camera is undefined we have to call the event layers update function\n            if (state.raycaster.camera === undefined) {\n                var _state$previousRoot;\n                state.events.compute == null ? void 0 : state.events.compute(event, state, (_state$previousRoot = state.previousRoot) == null ? void 0 : _state$previousRoot.getState());\n                // If the camera is still undefined we have to skip this layer entirely\n                if (state.raycaster.camera === undefined) state.raycaster.camera = null;\n            }\n            // Intersect object by object\n            return state.raycaster.camera ? state.raycaster.intersectObject(obj, true) : [];\n        }\n        // Collect events\n        let hits = eventsObjects// Intersect objects\n        .flatMap(handleRaycast)// Sort by event priority and distance\n        .sort((a, b)=>{\n            const aState = getRootState(a.object);\n            const bState = getRootState(b.object);\n            if (!aState || !bState) return a.distance - b.distance;\n            return bState.events.priority - aState.events.priority || a.distance - b.distance;\n        })// Filter out duplicates\n        .filter((item)=>{\n            const id = makeId(item);\n            if (duplicates.has(id)) return false;\n            duplicates.add(id);\n            return true;\n        });\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order, this likely only makes sense on the root filter\n        if (state.events.filter) hits = state.events.filter(hits, state);\n        // Bubble up the events, find the event source (eventObject)\n        for (const hit of hits){\n            let eventObject = hit.object;\n            // Bubble event up\n            while(eventObject){\n                var _r3f2;\n                if ((_r3f2 = eventObject.__r3f) != null && _r3f2.eventCount) intersections.push({\n                    ...hit,\n                    eventObject\n                });\n                eventObject = eventObject.parent;\n            }\n        }\n        // If the interaction is captured, make all capturing targets part of the intersect.\n        if (\"pointerId\" in event && state.internal.capturedMap.has(event.pointerId)) {\n            for (let captureData of state.internal.capturedMap.get(event.pointerId).values()){\n                if (!duplicates.has(makeId(captureData.intersection))) intersections.push(captureData.intersection);\n            }\n        }\n        return intersections;\n    }\n    /**  Handles intersections by forwarding them to handlers */ function handleIntersects(intersections, event, delta, callback) {\n        const rootState = store.getState();\n        // If anything has been found, forward it to the event listeners\n        if (intersections.length) {\n            const localState = {\n                stopped: false\n            };\n            for (const hit of intersections){\n                const state = getRootState(hit.object) || rootState;\n                const { raycaster, pointer, camera, internal } = state;\n                const unprojectedPoint = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(pointer.x, pointer.y, 0).unproject(camera);\n                const hasPointerCapture = (id)=>{\n                    var _internal$capturedMap, _internal$capturedMap2;\n                    return (_internal$capturedMap = (_internal$capturedMap2 = internal.capturedMap.get(id)) == null ? void 0 : _internal$capturedMap2.has(hit.eventObject)) != null ? _internal$capturedMap : false;\n                };\n                const setPointerCapture = (id)=>{\n                    const captureData = {\n                        intersection: hit,\n                        target: event.target\n                    };\n                    if (internal.capturedMap.has(id)) {\n                        // if the pointerId was previously captured, we add the hit to the\n                        // event capturedMap.\n                        internal.capturedMap.get(id).set(hit.eventObject, captureData);\n                    } else {\n                        // if the pointerId was not previously captured, we create a map\n                        // containing the hitObject, and the hit. hitObject is used for\n                        // faster access.\n                        internal.capturedMap.set(id, new Map([\n                            [\n                                hit.eventObject,\n                                captureData\n                            ]\n                        ]));\n                    }\n                    event.target.setPointerCapture(id);\n                };\n                const releasePointerCapture = (id)=>{\n                    const captures = internal.capturedMap.get(id);\n                    if (captures) {\n                        releaseInternalPointerCapture(internal.capturedMap, hit.eventObject, captures, id);\n                    }\n                };\n                // Add native event props\n                let extractEventProps = {};\n                // This iterates over the event's properties including the inherited ones. Native PointerEvents have most of their props as getters which are inherited, but polyfilled PointerEvents have them all as their own properties (i.e. not inherited). We can't use Object.keys() or Object.entries() as they only return \"own\" properties; nor Object.getPrototypeOf(event) as that *doesn't* return \"own\" properties, only inherited ones.\n                for(let prop in event){\n                    let property = event[prop];\n                    // Only copy over atomics, leave functions alone as these should be\n                    // called as event.nativeEvent.fn()\n                    if (typeof property !== \"function\") extractEventProps[prop] = property;\n                }\n                let raycastEvent = {\n                    ...hit,\n                    ...extractEventProps,\n                    pointer,\n                    intersections,\n                    stopped: localState.stopped,\n                    delta,\n                    unprojectedPoint,\n                    ray: raycaster.ray,\n                    camera: camera,\n                    // Hijack stopPropagation, which just sets a flag\n                    stopPropagation () {\n                        // https://github.com/pmndrs/react-three-fiber/issues/596\n                        // Events are not allowed to stop propagation if the pointer has been captured\n                        const capturesForPointer = \"pointerId\" in event && internal.capturedMap.get(event.pointerId);\n                        // We only authorize stopPropagation...\n                        if (// ...if this pointer hasn't been captured\n                        !capturesForPointer || // ... or if the hit object is capturing the pointer\n                        capturesForPointer.has(hit.eventObject)) {\n                            raycastEvent.stopped = localState.stopped = true;\n                            // Propagation is stopped, remove all other hover records\n                            // An event handler is only allowed to flush other handlers if it is hovered itself\n                            if (internal.hovered.size && Array.from(internal.hovered.values()).find((i)=>i.eventObject === hit.eventObject)) {\n                                // Objects cannot flush out higher up objects that have already caught the event\n                                const higher = intersections.slice(0, intersections.indexOf(hit));\n                                cancelPointer([\n                                    ...higher,\n                                    hit\n                                ]);\n                            }\n                        }\n                    },\n                    // there should be a distinction between target and currentTarget\n                    target: {\n                        hasPointerCapture,\n                        setPointerCapture,\n                        releasePointerCapture\n                    },\n                    currentTarget: {\n                        hasPointerCapture,\n                        setPointerCapture,\n                        releasePointerCapture\n                    },\n                    nativeEvent: event\n                };\n                // Call subscribers\n                callback(raycastEvent);\n                // Event bubbling may be interrupted by stopPropagation\n                if (localState.stopped === true) break;\n            }\n        }\n        return intersections;\n    }\n    function cancelPointer(intersections) {\n        const { internal } = store.getState();\n        for (const hoveredObj of internal.hovered.values()){\n            // When no objects were hit or the the hovered object wasn't found underneath the cursor\n            // we call onPointerOut and delete the object from the hovered-elements map\n            if (!intersections.length || !intersections.find((hit)=>hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId)) {\n                const eventObject = hoveredObj.eventObject;\n                const instance = eventObject.__r3f;\n                const handlers = instance == null ? void 0 : instance.handlers;\n                internal.hovered.delete(makeId(hoveredObj));\n                if (instance != null && instance.eventCount) {\n                    // Clear out intersects, they are outdated by now\n                    const data = {\n                        ...hoveredObj,\n                        intersections\n                    };\n                    handlers.onPointerOut == null ? void 0 : handlers.onPointerOut(data);\n                    handlers.onPointerLeave == null ? void 0 : handlers.onPointerLeave(data);\n                }\n            }\n        }\n    }\n    function pointerMissed(event, objects) {\n        for(let i = 0; i < objects.length; i++){\n            const instance = objects[i].__r3f;\n            instance == null ? void 0 : instance.handlers.onPointerMissed == null ? void 0 : instance.handlers.onPointerMissed(event);\n        }\n    }\n    function handlePointer(name) {\n        // Deal with cancelation\n        switch(name){\n            case \"onPointerLeave\":\n            case \"onPointerCancel\":\n                return ()=>cancelPointer([]);\n            case \"onLostPointerCapture\":\n                return (event)=>{\n                    const { internal } = store.getState();\n                    if (\"pointerId\" in event && internal.capturedMap.has(event.pointerId)) {\n                        // If the object event interface had onLostPointerCapture, we'd call it here on every\n                        // object that's getting removed. We call it on the next frame because onLostPointerCapture\n                        // fires before onPointerUp. Otherwise pointerUp would never be called if the event didn't\n                        // happen in the object it originated from, leaving components in a in-between state.\n                        requestAnimationFrame(()=>{\n                            // Only release if pointer-up didn't do it already\n                            if (internal.capturedMap.has(event.pointerId)) {\n                                internal.capturedMap.delete(event.pointerId);\n                                cancelPointer([]);\n                            }\n                        });\n                    }\n                };\n        }\n        // Any other pointer goes here ...\n        return function handleEvent(event) {\n            const { onPointerMissed, internal } = store.getState();\n            // prepareRay(event)\n            internal.lastEvent.current = event;\n            // Get fresh intersects\n            const isPointerMove = name === \"onPointerMove\";\n            const isClickEvent = name === \"onClick\" || name === \"onContextMenu\" || name === \"onDoubleClick\";\n            const filter = isPointerMove ? filterPointerEvents : undefined;\n            const hits = intersect(event, filter);\n            const delta = isClickEvent ? calculateDistance(event) : 0;\n            // Save initial coordinates on pointer-down\n            if (name === \"onPointerDown\") {\n                internal.initialClick = [\n                    event.offsetX,\n                    event.offsetY\n                ];\n                internal.initialHits = hits.map((hit)=>hit.eventObject);\n            }\n            // If a click yields no results, pass it back to the user as a miss\n            // Missed events have to come first in order to establish user-land side-effect clean up\n            if (isClickEvent && !hits.length) {\n                if (delta <= 2) {\n                    pointerMissed(event, internal.interaction);\n                    if (onPointerMissed) onPointerMissed(event);\n                }\n            }\n            // Take care of unhover\n            if (isPointerMove) cancelPointer(hits);\n            function onIntersect(data) {\n                const eventObject = data.eventObject;\n                const instance = eventObject.__r3f;\n                const handlers = instance == null ? void 0 : instance.handlers;\n                // Check presence of handlers\n                if (!(instance != null && instance.eventCount)) return;\n                /*\n        MAYBE TODO, DELETE IF NOT: \n          Check if the object is captured, captured events should not have intersects running in parallel\n          But wouldn't it be better to just replace capturedMap with a single entry?\n          Also, are we OK with straight up making picking up multiple objects impossible?\n          \n        const pointerId = (data as ThreeEvent<PointerEvent>).pointerId        \n        if (pointerId !== undefined) {\n          const capturedMeshSet = internal.capturedMap.get(pointerId)\n          if (capturedMeshSet) {\n            const captured = capturedMeshSet.get(eventObject)\n            if (captured && captured.localState.stopped) return\n          }\n        }*/ if (isPointerMove) {\n                    // Move event ...\n                    if (handlers.onPointerOver || handlers.onPointerEnter || handlers.onPointerOut || handlers.onPointerLeave) {\n                        // When enter or out is present take care of hover-state\n                        const id = makeId(data);\n                        const hoveredItem = internal.hovered.get(id);\n                        if (!hoveredItem) {\n                            // If the object wasn't previously hovered, book it and call its handler\n                            internal.hovered.set(id, data);\n                            handlers.onPointerOver == null ? void 0 : handlers.onPointerOver(data);\n                            handlers.onPointerEnter == null ? void 0 : handlers.onPointerEnter(data);\n                        } else if (hoveredItem.stopped) {\n                            // If the object was previously hovered and stopped, we shouldn't allow other items to proceed\n                            data.stopPropagation();\n                        }\n                    }\n                    // Call mouse move\n                    handlers.onPointerMove == null ? void 0 : handlers.onPointerMove(data);\n                } else {\n                    // All other events ...\n                    const handler = handlers[name];\n                    if (handler) {\n                        // Forward all events back to their respective handlers with the exception of click events,\n                        // which must use the initial target\n                        if (!isClickEvent || internal.initialHits.includes(eventObject)) {\n                            // Missed events have to come first\n                            pointerMissed(event, internal.interaction.filter((object)=>!internal.initialHits.includes(object)));\n                            // Now call the handler\n                            handler(data);\n                        }\n                    } else {\n                        // Trigger onPointerMissed on all elements that have pointer over/out handlers, but not click and weren't hit\n                        if (isClickEvent && internal.initialHits.includes(eventObject)) {\n                            pointerMissed(event, internal.interaction.filter((object)=>!internal.initialHits.includes(object)));\n                        }\n                    }\n                }\n            }\n            handleIntersects(hits, event, delta, onIntersect);\n        };\n    }\n    return {\n        handlePointer\n    };\n}\n// Keys that shouldn't be copied between R3F stores\nconst privateKeys = [\n    \"set\",\n    \"get\",\n    \"setSize\",\n    \"setFrameloop\",\n    \"setDpr\",\n    \"events\",\n    \"invalidate\",\n    \"advance\",\n    \"size\",\n    \"viewport\"\n];\nconst isRenderer = (def)=>!!(def != null && def.render);\nconst context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst createStore = (invalidate, advance)=>{\n    const rootState = (0,zustand__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((set, get)=>{\n        const position = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3();\n        const defaultTarget = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3();\n        const tempTarget = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3();\n        function getCurrentViewport(camera = get().camera, target = defaultTarget, size = get().size) {\n            const { width, height, top, left } = size;\n            const aspect = width / height;\n            if (target instanceof three__WEBPACK_IMPORTED_MODULE_4__.Vector3) tempTarget.copy(target);\n            else tempTarget.set(...target);\n            const distance = camera.getWorldPosition(position).distanceTo(tempTarget);\n            if (isOrthographicCamera(camera)) {\n                return {\n                    width: width / camera.zoom,\n                    height: height / camera.zoom,\n                    top,\n                    left,\n                    factor: 1,\n                    distance,\n                    aspect\n                };\n            } else {\n                const fov = camera.fov * Math.PI / 180; // convert vertical fov to radians\n                const h = 2 * Math.tan(fov / 2) * distance; // visible height\n                const w = h * (width / height);\n                return {\n                    width: w,\n                    height: h,\n                    top,\n                    left,\n                    factor: width / w,\n                    distance,\n                    aspect\n                };\n            }\n        }\n        let performanceTimeout = undefined;\n        const setPerformanceCurrent = (current)=>set((state)=>({\n                    performance: {\n                        ...state.performance,\n                        current\n                    }\n                }));\n        const pointer = new three__WEBPACK_IMPORTED_MODULE_4__.Vector2();\n        const rootState = {\n            set,\n            get,\n            // Mock objects that have to be configured\n            gl: null,\n            camera: null,\n            raycaster: null,\n            events: {\n                priority: 1,\n                enabled: true,\n                connected: false\n            },\n            xr: null,\n            scene: null,\n            invalidate: (frames = 1)=>invalidate(get(), frames),\n            advance: (timestamp, runGlobalEffects)=>advance(timestamp, runGlobalEffects, get()),\n            legacy: false,\n            linear: false,\n            flat: false,\n            controls: null,\n            clock: new three__WEBPACK_IMPORTED_MODULE_4__.Clock(),\n            pointer,\n            mouse: pointer,\n            frameloop: \"always\",\n            onPointerMissed: undefined,\n            performance: {\n                current: 1,\n                min: 0.5,\n                max: 1,\n                debounce: 200,\n                regress: ()=>{\n                    const state = get();\n                    // Clear timeout\n                    if (performanceTimeout) clearTimeout(performanceTimeout);\n                    // Set lower bound performance\n                    if (state.performance.current !== state.performance.min) setPerformanceCurrent(state.performance.min);\n                    // Go back to upper bound performance after a while unless something regresses meanwhile\n                    performanceTimeout = setTimeout(()=>setPerformanceCurrent(get().performance.max), state.performance.debounce);\n                }\n            },\n            size: {\n                width: 0,\n                height: 0,\n                top: 0,\n                left: 0,\n                updateStyle: false\n            },\n            viewport: {\n                initialDpr: 0,\n                dpr: 0,\n                width: 0,\n                height: 0,\n                top: 0,\n                left: 0,\n                aspect: 0,\n                distance: 0,\n                factor: 0,\n                getCurrentViewport\n            },\n            setEvents: (events)=>set((state)=>({\n                        ...state,\n                        events: {\n                            ...state.events,\n                            ...events\n                        }\n                    })),\n            setSize: (width, height, updateStyle, top, left)=>{\n                const camera = get().camera;\n                const size = {\n                    width,\n                    height,\n                    top: top || 0,\n                    left: left || 0,\n                    updateStyle\n                };\n                set((state)=>({\n                        size,\n                        viewport: {\n                            ...state.viewport,\n                            ...getCurrentViewport(camera, defaultTarget, size)\n                        }\n                    }));\n            },\n            setDpr: (dpr)=>set((state)=>{\n                    const resolved = calculateDpr(dpr);\n                    return {\n                        viewport: {\n                            ...state.viewport,\n                            dpr: resolved,\n                            initialDpr: state.viewport.initialDpr || resolved\n                        }\n                    };\n                }),\n            setFrameloop: (frameloop = \"always\")=>{\n                const clock = get().clock;\n                // if frameloop === \"never\" clock.elapsedTime is updated using advance(timestamp)\n                clock.stop();\n                clock.elapsedTime = 0;\n                if (frameloop !== \"never\") {\n                    clock.start();\n                    clock.elapsedTime = 0;\n                }\n                set(()=>({\n                        frameloop\n                    }));\n            },\n            previousRoot: undefined,\n            internal: {\n                active: false,\n                priority: 0,\n                frames: 0,\n                lastEvent: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef(),\n                interaction: [],\n                hovered: new Map(),\n                subscribers: [],\n                initialClick: [\n                    0,\n                    0\n                ],\n                initialHits: [],\n                capturedMap: new Map(),\n                subscribe: (ref, priority, store)=>{\n                    const internal = get().internal;\n                    // If this subscription was given a priority, it takes rendering into its own hands\n                    // For that reason we switch off automatic rendering and increase the manual flag\n                    // As long as this flag is positive there can be no internal rendering at all\n                    // because there could be multiple render subscriptions\n                    internal.priority = internal.priority + (priority > 0 ? 1 : 0);\n                    internal.subscribers.push({\n                        ref,\n                        priority,\n                        store\n                    });\n                    // Register subscriber and sort layers from lowest to highest, meaning,\n                    // highest priority renders last (on top of the other frames)\n                    internal.subscribers = internal.subscribers.sort((a, b)=>a.priority - b.priority);\n                    return ()=>{\n                        const internal = get().internal;\n                        if (internal != null && internal.subscribers) {\n                            // Decrease manual flag if this subscription had a priority\n                            internal.priority = internal.priority - (priority > 0 ? 1 : 0);\n                            // Remove subscriber from list\n                            internal.subscribers = internal.subscribers.filter((s)=>s.ref !== ref);\n                        }\n                    };\n                }\n            }\n        };\n        return rootState;\n    });\n    const state = rootState.getState();\n    let oldSize = state.size;\n    let oldDpr = state.viewport.dpr;\n    let oldCamera = state.camera;\n    rootState.subscribe(()=>{\n        const { camera, size, viewport, gl, set } = rootState.getState();\n        // Resize camera and renderer on changes to size and pixelratio\n        if (size !== oldSize || viewport.dpr !== oldDpr) {\n            var _size$updateStyle;\n            oldSize = size;\n            oldDpr = viewport.dpr;\n            // Update camera & renderer\n            updateCamera(camera, size);\n            gl.setPixelRatio(viewport.dpr);\n            const updateStyle = (_size$updateStyle = size.updateStyle) != null ? _size$updateStyle : typeof HTMLCanvasElement !== \"undefined\" && gl.domElement instanceof HTMLCanvasElement;\n            gl.setSize(size.width, size.height, updateStyle);\n        }\n        // Update viewport once the camera changes\n        if (camera !== oldCamera) {\n            oldCamera = camera;\n            // Update viewport\n            set((state)=>({\n                    viewport: {\n                        ...state.viewport,\n                        ...state.viewport.getCurrentViewport(camera)\n                    }\n                }));\n        }\n    });\n    // Invalidate on any change\n    rootState.subscribe((state)=>invalidate(state));\n    // Return root state\n    return rootState;\n};\nfunction createSubs(callback, subs) {\n    const sub = {\n        callback\n    };\n    subs.add(sub);\n    return ()=>void subs.delete(sub);\n}\nlet i;\nlet globalEffects = new Set();\nlet globalAfterEffects = new Set();\nlet globalTailEffects = new Set();\n/**\n * Adds a global render callback which is called each frame.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addEffect\n */ const addEffect = (callback)=>createSubs(callback, globalEffects);\n/**\n * Adds a global after-render callback which is called each frame.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addAfterEffect\n */ const addAfterEffect = (callback)=>createSubs(callback, globalAfterEffects);\n/**\n * Adds a global callback which is called when rendering stops.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addTail\n */ const addTail = (callback)=>createSubs(callback, globalTailEffects);\nfunction run(effects, timestamp) {\n    if (!effects.size) return;\n    for (const { callback } of effects.values()){\n        callback(timestamp);\n    }\n}\nfunction flushGlobalEffects(type, timestamp) {\n    switch(type){\n        case \"before\":\n            return run(globalEffects, timestamp);\n        case \"after\":\n            return run(globalAfterEffects, timestamp);\n        case \"tail\":\n            return run(globalTailEffects, timestamp);\n    }\n}\nlet subscribers;\nlet subscription;\nfunction render$1(timestamp, state, frame) {\n    // Run local effects\n    let delta = state.clock.getDelta();\n    // In frameloop='never' mode, clock times are updated using the provided timestamp\n    if (state.frameloop === \"never\" && typeof timestamp === \"number\") {\n        delta = timestamp - state.clock.elapsedTime;\n        state.clock.oldTime = state.clock.elapsedTime;\n        state.clock.elapsedTime = timestamp;\n    }\n    // Call subscribers (useFrame)\n    subscribers = state.internal.subscribers;\n    for(i = 0; i < subscribers.length; i++){\n        subscription = subscribers[i];\n        subscription.ref.current(subscription.store.getState(), delta, frame);\n    }\n    // Render content\n    if (!state.internal.priority && state.gl.render) state.gl.render(state.scene, state.camera);\n    // Decrease frame count\n    state.internal.frames = Math.max(0, state.internal.frames - 1);\n    return state.frameloop === \"always\" ? 1 : state.internal.frames;\n}\nfunction createLoop(roots) {\n    let running = false;\n    let repeat;\n    let frame;\n    let state;\n    function loop(timestamp) {\n        frame = requestAnimationFrame(loop);\n        running = true;\n        repeat = 0;\n        // Run effects\n        flushGlobalEffects(\"before\", timestamp);\n        // Render all roots\n        for (const root of roots.values()){\n            var _state$gl$xr;\n            state = root.store.getState();\n            // If the frameloop is invalidated, do not run another frame\n            if (state.internal.active && (state.frameloop === \"always\" || state.internal.frames > 0) && !((_state$gl$xr = state.gl.xr) != null && _state$gl$xr.isPresenting)) {\n                repeat += render$1(timestamp, state);\n            }\n        }\n        // Run after-effects\n        flushGlobalEffects(\"after\", timestamp);\n        // Stop the loop if nothing invalidates it\n        if (repeat === 0) {\n            // Tail call effects, they are called when rendering stops\n            flushGlobalEffects(\"tail\", timestamp);\n            // Flag end of operation\n            running = false;\n            return cancelAnimationFrame(frame);\n        }\n    }\n    function invalidate(state, frames = 1) {\n        var _state$gl$xr2;\n        if (!state) return roots.forEach((root)=>invalidate(root.store.getState()), frames);\n        if ((_state$gl$xr2 = state.gl.xr) != null && _state$gl$xr2.isPresenting || !state.internal.active || state.frameloop === \"never\") return;\n        // Increase frames, do not go higher than 60\n        state.internal.frames = Math.min(60, state.internal.frames + frames);\n        // If the render-loop isn't active, start it\n        if (!running) {\n            running = true;\n            requestAnimationFrame(loop);\n        }\n    }\n    function advance(timestamp, runGlobalEffects = true, state, frame) {\n        if (runGlobalEffects) flushGlobalEffects(\"before\", timestamp);\n        if (!state) for (const root of roots.values())render$1(timestamp, root.store.getState());\n        else render$1(timestamp, state, frame);\n        if (runGlobalEffects) flushGlobalEffects(\"after\", timestamp);\n    }\n    return {\n        loop,\n        /**\n     * Invalidates the view, requesting a frame to be rendered. Will globally invalidate unless passed a root's state.\n     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#invalidate\n     */ invalidate,\n        /**\n     * Advances the frameloop and runs render effects, useful for when manually rendering via `frameloop=\"never\"`.\n     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#advance\n     */ advance\n    };\n}\n/**\n * Exposes an object's {@link LocalState}.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#useInstanceHandle\n *\n * **Note**: this is an escape hatch to react-internal fields. Expect this to change significantly between versions.\n */ function useInstanceHandle(ref) {\n    const instance = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    useIsomorphicLayoutEffect(()=>void (instance.current = ref.current.__r3f), [\n        ref\n    ]);\n    return instance;\n}\nfunction useStore() {\n    const store = react__WEBPACK_IMPORTED_MODULE_0__.useContext(context);\n    if (!store) throw new Error(\"R3F: Hooks can only be used within the Canvas component!\");\n    return store;\n}\n/**\n * Accesses R3F's internal state, containing renderer, canvas, scene, etc.\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usethree\n */ function useThree(selector = (state)=>state, equalityFn) {\n    return useStore()(selector, equalityFn);\n}\n/**\n * Executes a callback before render in a shared frame loop.\n * Can order effects with render priority or manually render with a positive priority.\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useframe\n */ function useFrame(callback, renderPriority = 0) {\n    const store = useStore();\n    const subscribe = store.getState().internal.subscribe;\n    // Memoize ref\n    const ref = useMutableCallback(callback);\n    // Subscribe on mount, unsubscribe on unmount\n    useIsomorphicLayoutEffect(()=>subscribe(ref, renderPriority, store), [\n        renderPriority,\n        subscribe,\n        store\n    ]);\n    return null;\n}\n/**\n * Returns a node graph of an object with named nodes & materials.\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usegraph\n */ function useGraph(object) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>buildGraph(object), [\n        object\n    ]);\n}\nfunction loadingFn(extensions, onProgress) {\n    return function(Proto, ...input) {\n        // Construct new loader and run extensions\n        const loader = new Proto();\n        if (extensions) extensions(loader);\n        // Go through the urls and load them\n        return Promise.all(input.map((input)=>new Promise((res, reject)=>loader.load(input, (data)=>{\n                    if (data.scene) Object.assign(data, buildGraph(data.scene));\n                    res(data);\n                }, onProgress, (error)=>reject(new Error(`Could not load ${input}: ${error.message}`))))));\n    };\n}\n/**\n * Synchronously loads and caches assets with a three loader.\n *\n * Note: this hook's caller must be wrapped with `React.Suspense`\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useloader\n */ function useLoader(Proto, input, extensions, onProgress) {\n    // Use suspense to load async assets\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    const results = (0,suspend_react__WEBPACK_IMPORTED_MODULE_6__.suspend)(loadingFn(extensions, onProgress), [\n        Proto,\n        ...keys\n    ], {\n        equal: is.equ\n    });\n    // Return the object/s\n    return Array.isArray(input) ? results : results[0];\n}\n/**\n * Preloads an asset into cache as a side-effect.\n */ useLoader.preload = function(Proto, input, extensions) {\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    return (0,suspend_react__WEBPACK_IMPORTED_MODULE_6__.preload)(loadingFn(extensions), [\n        Proto,\n        ...keys\n    ]);\n};\n/**\n * Removes a loaded asset from cache.\n */ useLoader.clear = function(Proto, input) {\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    return (0,suspend_react__WEBPACK_IMPORTED_MODULE_6__.clear)([\n        Proto,\n        ...keys\n    ]);\n};\nconst roots = new Map();\nconst { invalidate, advance } = createLoop(roots);\nconst { reconciler, applyProps } = createRenderer(roots, getEventPriority);\nconst shallowLoose = {\n    objects: \"shallow\",\n    strict: false\n};\nconst createRendererInstance = (gl, canvas)=>{\n    const customRenderer = typeof gl === \"function\" ? gl(canvas) : gl;\n    if (isRenderer(customRenderer)) return customRenderer;\n    else return new three__WEBPACK_IMPORTED_MODULE_7__.WebGLRenderer({\n        powerPreference: \"high-performance\",\n        canvas: canvas,\n        antialias: true,\n        alpha: true,\n        ...gl\n    });\n};\nfunction computeInitialSize(canvas, defaultSize) {\n    if (defaultSize) return defaultSize;\n    if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement && canvas.parentElement) {\n        const { width, height, top, left } = canvas.parentElement.getBoundingClientRect();\n        return {\n            width,\n            height,\n            top,\n            left\n        };\n    } else if (typeof OffscreenCanvas !== \"undefined\" && canvas instanceof OffscreenCanvas) {\n        return {\n            width: canvas.width,\n            height: canvas.height,\n            top: 0,\n            left: 0\n        };\n    }\n    return {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0\n    };\n}\nfunction createRoot(canvas) {\n    // Check against mistaken use of createRoot\n    const prevRoot = roots.get(canvas);\n    const prevFiber = prevRoot == null ? void 0 : prevRoot.fiber;\n    const prevStore = prevRoot == null ? void 0 : prevRoot.store;\n    if (prevRoot) console.warn(\"R3F.createRoot should only be called once!\");\n    // Report when an error was detected in a previous render\n    // https://github.com/pmndrs/react-three-fiber/pull/2261\n    const logRecoverableError = typeof reportError === \"function\" ? // In modern browsers, reportError will dispatch an error event,\n    // emulating an uncaught JavaScript error.\n    reportError : // In older browsers and test environments, fallback to console.error.\n    console.error;\n    // Create store\n    const store = prevStore || createStore(invalidate, advance);\n    // Create renderer\n    const fiber = prevFiber || reconciler.createContainer(store, react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ConcurrentRoot, null, false, null, \"\", logRecoverableError, null);\n    // Map it\n    if (!prevRoot) roots.set(canvas, {\n        fiber,\n        store\n    });\n    // Locals\n    let onCreated;\n    let configured = false;\n    let lastCamera;\n    return {\n        configure (props = {}) {\n            let { gl: glConfig, size: propsSize, scene: sceneOptions, events, onCreated: onCreatedCallback, shadows = false, linear = false, flat = false, legacy = false, orthographic = false, frameloop = \"always\", dpr = [\n                1,\n                2\n            ], performance: performance1, raycaster: raycastOptions, camera: cameraOptions, onPointerMissed } = props;\n            let state = store.getState();\n            // Set up renderer (one time only!)\n            let gl = state.gl;\n            if (!state.gl) state.set({\n                gl: gl = createRendererInstance(glConfig, canvas)\n            });\n            // Set up raycaster (one time only!)\n            let raycaster = state.raycaster;\n            if (!raycaster) state.set({\n                raycaster: raycaster = new three__WEBPACK_IMPORTED_MODULE_4__.Raycaster()\n            });\n            // Set raycaster options\n            const { params, ...options } = raycastOptions || {};\n            if (!is.equ(options, raycaster, shallowLoose)) applyProps(raycaster, {\n                ...options\n            });\n            if (!is.equ(params, raycaster.params, shallowLoose)) applyProps(raycaster, {\n                params: {\n                    ...raycaster.params,\n                    ...params\n                }\n            });\n            // Create default camera, don't overwrite any user-set state\n            if (!state.camera || state.camera === lastCamera && !is.equ(lastCamera, cameraOptions, shallowLoose)) {\n                lastCamera = cameraOptions;\n                const isCamera = cameraOptions instanceof three__WEBPACK_IMPORTED_MODULE_4__.Camera;\n                const camera = isCamera ? cameraOptions : orthographic ? new three__WEBPACK_IMPORTED_MODULE_4__.OrthographicCamera(0, 0, 0, 0, 0.1, 1000) : new three__WEBPACK_IMPORTED_MODULE_4__.PerspectiveCamera(75, 0, 0.1, 1000);\n                if (!isCamera) {\n                    camera.position.z = 5;\n                    if (cameraOptions) applyProps(camera, cameraOptions);\n                    // Always look at center by default\n                    if (!state.camera && !(cameraOptions != null && cameraOptions.rotation)) camera.lookAt(0, 0, 0);\n                }\n                state.set({\n                    camera\n                });\n            }\n            // Set up scene (one time only!)\n            if (!state.scene) {\n                let scene;\n                if (sceneOptions instanceof three__WEBPACK_IMPORTED_MODULE_4__.Scene) {\n                    scene = sceneOptions;\n                } else {\n                    scene = new three__WEBPACK_IMPORTED_MODULE_4__.Scene();\n                    if (sceneOptions) applyProps(scene, sceneOptions);\n                }\n                state.set({\n                    scene: prepare(scene)\n                });\n            }\n            // Set up XR (one time only!)\n            if (!state.xr) {\n                var _gl$xr;\n                // Handle frame behavior in WebXR\n                const handleXRFrame = (timestamp, frame)=>{\n                    const state = store.getState();\n                    if (state.frameloop === \"never\") return;\n                    advance(timestamp, true, state, frame);\n                };\n                // Toggle render switching on session\n                const handleSessionChange = ()=>{\n                    const state = store.getState();\n                    state.gl.xr.enabled = state.gl.xr.isPresenting;\n                    state.gl.xr.setAnimationLoop(state.gl.xr.isPresenting ? handleXRFrame : null);\n                    if (!state.gl.xr.isPresenting) invalidate(state);\n                };\n                // WebXR session manager\n                const xr = {\n                    connect () {\n                        const gl = store.getState().gl;\n                        gl.xr.addEventListener(\"sessionstart\", handleSessionChange);\n                        gl.xr.addEventListener(\"sessionend\", handleSessionChange);\n                    },\n                    disconnect () {\n                        const gl = store.getState().gl;\n                        gl.xr.removeEventListener(\"sessionstart\", handleSessionChange);\n                        gl.xr.removeEventListener(\"sessionend\", handleSessionChange);\n                    }\n                };\n                // Subscribe to WebXR session events\n                if (typeof ((_gl$xr = gl.xr) == null ? void 0 : _gl$xr.addEventListener) === \"function\") xr.connect();\n                state.set({\n                    xr\n                });\n            }\n            // Set shadowmap\n            if (gl.shadowMap) {\n                const oldEnabled = gl.shadowMap.enabled;\n                const oldType = gl.shadowMap.type;\n                gl.shadowMap.enabled = !!shadows;\n                if (is.boo(shadows)) {\n                    gl.shadowMap.type = three__WEBPACK_IMPORTED_MODULE_4__.PCFSoftShadowMap;\n                } else if (is.str(shadows)) {\n                    var _types$shadows;\n                    const types = {\n                        basic: three__WEBPACK_IMPORTED_MODULE_4__.BasicShadowMap,\n                        percentage: three__WEBPACK_IMPORTED_MODULE_4__.PCFShadowMap,\n                        soft: three__WEBPACK_IMPORTED_MODULE_4__.PCFSoftShadowMap,\n                        variance: three__WEBPACK_IMPORTED_MODULE_4__.VSMShadowMap\n                    };\n                    gl.shadowMap.type = (_types$shadows = types[shadows]) != null ? _types$shadows : three__WEBPACK_IMPORTED_MODULE_4__.PCFSoftShadowMap;\n                } else if (is.obj(shadows)) {\n                    Object.assign(gl.shadowMap, shadows);\n                }\n                if (oldEnabled !== gl.shadowMap.enabled || oldType !== gl.shadowMap.type) gl.shadowMap.needsUpdate = true;\n            }\n            // Safely set color management if available.\n            // Avoid accessing THREE.ColorManagement to play nice with older versions\n            const ColorManagement = getColorManagement();\n            if (ColorManagement) {\n                if (\"enabled\" in ColorManagement) ColorManagement.enabled = !legacy;\n                else if (\"legacyMode\" in ColorManagement) ColorManagement.legacyMode = legacy;\n            }\n            // Set color space and tonemapping preferences\n            const LinearEncoding = 3000;\n            const sRGBEncoding = 3001;\n            applyProps(gl, {\n                outputEncoding: linear ? LinearEncoding : sRGBEncoding,\n                toneMapping: flat ? three__WEBPACK_IMPORTED_MODULE_4__.NoToneMapping : three__WEBPACK_IMPORTED_MODULE_4__.ACESFilmicToneMapping\n            });\n            // Update color management state\n            if (state.legacy !== legacy) state.set(()=>({\n                    legacy\n                }));\n            if (state.linear !== linear) state.set(()=>({\n                    linear\n                }));\n            if (state.flat !== flat) state.set(()=>({\n                    flat\n                }));\n            // Set gl props\n            if (glConfig && !is.fun(glConfig) && !isRenderer(glConfig) && !is.equ(glConfig, gl, shallowLoose)) applyProps(gl, glConfig);\n            // Store events internally\n            if (events && !state.events.handlers) state.set({\n                events: events(store)\n            });\n            // Check size, allow it to take on container bounds initially\n            const size = computeInitialSize(canvas, propsSize);\n            if (!is.equ(size, state.size, shallowLoose)) {\n                state.setSize(size.width, size.height, size.updateStyle, size.top, size.left);\n            }\n            // Check pixelratio\n            if (dpr && state.viewport.dpr !== calculateDpr(dpr)) state.setDpr(dpr);\n            // Check frameloop\n            if (state.frameloop !== frameloop) state.setFrameloop(frameloop);\n            // Check pointer missed\n            if (!state.onPointerMissed) state.set({\n                onPointerMissed\n            });\n            // Check performance\n            if (performance1 && !is.equ(performance1, state.performance, shallowLoose)) state.set((state)=>({\n                    performance: {\n                        ...state.performance,\n                        ...performance1\n                    }\n                }));\n            // Set locals\n            onCreated = onCreatedCallback;\n            configured = true;\n            return this;\n        },\n        render (children) {\n            // The root has to be configured before it can be rendered\n            if (!configured) this.configure();\n            reconciler.updateContainer(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Provider, {\n                store: store,\n                children: children,\n                onCreated: onCreated,\n                rootElement: canvas\n            }), fiber, null, ()=>undefined);\n            return store;\n        },\n        unmount () {\n            unmountComponentAtNode(canvas);\n        }\n    };\n}\nfunction render(children, canvas, config) {\n    console.warn(\"R3F.render is no longer supported in React 18. Use createRoot instead!\");\n    const root = createRoot(canvas);\n    root.configure(config);\n    return root.render(children);\n}\nfunction Provider({ store, children, onCreated, rootElement }) {\n    useIsomorphicLayoutEffect(()=>{\n        const state = store.getState();\n        // Flag the canvas active, rendering will now begin\n        state.set((state)=>({\n                internal: {\n                    ...state.internal,\n                    active: true\n                }\n            }));\n        // Notifiy that init is completed, the scene graph exists, but nothing has yet rendered\n        if (onCreated) onCreated(state);\n        // Connect events to the targets parent, this is done to ensure events are registered on\n        // a shared target, and not on the canvas itself\n        if (!store.getState().events.connected) state.events.connect == null ? void 0 : state.events.connect(rootElement);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(context.Provider, {\n        value: store\n    }, children);\n}\nfunction unmountComponentAtNode(canvas, callback) {\n    const root = roots.get(canvas);\n    const fiber = root == null ? void 0 : root.fiber;\n    if (fiber) {\n        const state = root == null ? void 0 : root.store.getState();\n        if (state) state.internal.active = false;\n        reconciler.updateContainer(null, fiber, null, ()=>{\n            if (state) {\n                setTimeout(()=>{\n                    try {\n                        var _state$gl, _state$gl$renderLists, _state$gl2, _state$gl3;\n                        state.events.disconnect == null ? void 0 : state.events.disconnect();\n                        (_state$gl = state.gl) == null ? void 0 : (_state$gl$renderLists = _state$gl.renderLists) == null ? void 0 : _state$gl$renderLists.dispose == null ? void 0 : _state$gl$renderLists.dispose();\n                        (_state$gl2 = state.gl) == null ? void 0 : _state$gl2.forceContextLoss == null ? void 0 : _state$gl2.forceContextLoss();\n                        if ((_state$gl3 = state.gl) != null && _state$gl3.xr) state.xr.disconnect();\n                        dispose(state);\n                        roots.delete(canvas);\n                        if (callback) callback(canvas);\n                    } catch (e) {\n                    /* ... */ }\n                }, 500);\n            }\n        });\n    }\n}\nfunction createPortal(children, container, state) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portal, {\n        key: container.uuid,\n        children: children,\n        container: container,\n        state: state\n    });\n}\nfunction Portal({ state = {}, children, container }) {\n    /** This has to be a component because it would not be able to call useThree/useStore otherwise since\n   *  if this is our environment, then we are not in r3f's renderer but in react-dom, it would trigger\n   *  the \"R3F hooks can only be used within the Canvas component!\" warning:\n   *  <Canvas>\n   *    {createPortal(...)} */ const { events, size, ...rest } = state;\n    const previousRoot = useStore();\n    const [raycaster] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new three__WEBPACK_IMPORTED_MODULE_4__.Raycaster());\n    const [pointer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new three__WEBPACK_IMPORTED_MODULE_4__.Vector2());\n    const inject = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((rootState, injectState)=>{\n        const intersect = {\n            ...rootState\n        }; // all prev state props\n        // Only the fields of \"rootState\" that do not differ from injectState\n        // Some props should be off-limits\n        // Otherwise filter out the props that are different and let the inject layer take precedence\n        Object.keys(rootState).forEach((key)=>{\n            if (// Some props should be off-limits\n            privateKeys.includes(key) || // Otherwise filter out the props that are different and let the inject layer take precedence\n            // Unless the inject layer props is undefined, then we keep the root layer\n            rootState[key] !== injectState[key] && injectState[key]) {\n                delete intersect[key];\n            }\n        });\n        let viewport = undefined;\n        if (injectState && size) {\n            const camera = injectState.camera;\n            // Calculate the override viewport, if present\n            viewport = rootState.viewport.getCurrentViewport(camera, new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(), size);\n            // Update the portal camera, if it differs from the previous layer\n            if (camera !== rootState.camera) updateCamera(camera, size);\n        }\n        return {\n            // The intersect consists of the previous root state\n            ...intersect,\n            // Portals have their own scene, which forms the root, a raycaster and a pointer\n            scene: container,\n            raycaster,\n            pointer,\n            mouse: pointer,\n            // Their previous root is the layer before it\n            previousRoot,\n            // Events, size and viewport can be overridden by the inject layer\n            events: {\n                ...rootState.events,\n                ...injectState == null ? void 0 : injectState.events,\n                ...events\n            },\n            size: {\n                ...rootState.size,\n                ...size\n            },\n            viewport: {\n                ...rootState.viewport,\n                ...viewport\n            },\n            ...rest\n        };\n    }, [\n        state\n    ]);\n    const [usePortalStore] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n        // Create a mirrored store, based on the previous root with a few overrides ...\n        const previousState = previousRoot.getState();\n        const store = (0,zustand__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((set, get)=>({\n                ...previousState,\n                scene: container,\n                raycaster,\n                pointer,\n                mouse: pointer,\n                previousRoot,\n                events: {\n                    ...previousState.events,\n                    ...events\n                },\n                size: {\n                    ...previousState.size,\n                    ...size\n                },\n                ...rest,\n                // Set and get refer to this root-state\n                set,\n                get,\n                // Layers are allowed to override events\n                setEvents: (events)=>set((state)=>({\n                            ...state,\n                            events: {\n                                ...state.events,\n                                ...events\n                            }\n                        }))\n            }));\n        return store;\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        // Subscribe to previous root-state and copy changes over to the mirrored portal-state\n        const unsub = previousRoot.subscribe((prev)=>usePortalStore.setState((state)=>inject(prev, state)));\n        return ()=>{\n            unsub();\n            usePortalStore.destroy();\n        };\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        usePortalStore.setState((injectState)=>inject(previousRoot.getState(), injectState));\n    }, [\n        inject\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, reconciler.createPortal(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(context.Provider, {\n        value: usePortalStore\n    }, children), usePortalStore, null));\n}\nreconciler.injectIntoDevTools({\n    bundleType:  false ? 0 : 1,\n    rendererPackageName: \"@react-three/fiber\",\n    version: react__WEBPACK_IMPORTED_MODULE_0__.version\n});\nconst act = react__WEBPACK_IMPORTED_MODULE_0__.unstable_act;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   ReactThreeFiber: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   _roots: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   act: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   addAfterEffect: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   addEffect: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   addTail: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   advance: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   applyProps: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   context: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   createEvents: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createPortal: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   createRoot: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   dispose: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   events: () => (/* binding */ createPointerEvents),\n/* harmony export */   extend: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   flushGlobalEffects: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   getRootState: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   invalidate: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   reconciler: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   render: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   unmountComponentAtNode: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   useFrame: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   useGraph: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   useInstanceHandle: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   useLoader: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   useStore: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   useThree: () => (/* reexport safe */ _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.z)\n/* harmony export */ });\n/* harmony import */ var _index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-673ef987.esm.js */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-673ef987.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react_use_measure__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-use-measure */ \"(ssr)/./node_modules/react-use-measure/dist/index.js\");\n/* harmony import */ var its_fine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! its-fine */ \"(ssr)/./node_modules/its-fine/dist/index.js\");\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst DOM_EVENTS = {\n    onClick: [\n        \"click\",\n        false\n    ],\n    onContextMenu: [\n        \"contextmenu\",\n        false\n    ],\n    onDoubleClick: [\n        \"dblclick\",\n        false\n    ],\n    onWheel: [\n        \"wheel\",\n        true\n    ],\n    onPointerDown: [\n        \"pointerdown\",\n        true\n    ],\n    onPointerUp: [\n        \"pointerup\",\n        true\n    ],\n    onPointerLeave: [\n        \"pointerleave\",\n        true\n    ],\n    onPointerMove: [\n        \"pointermove\",\n        true\n    ],\n    onPointerCancel: [\n        \"pointercancel\",\n        true\n    ],\n    onLostPointerCapture: [\n        \"lostpointercapture\",\n        true\n    ]\n};\n/** Default R3F event manager for web */ function createPointerEvents(store) {\n    const { handlePointer } = (0,_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)(store);\n    return {\n        priority: 1,\n        enabled: true,\n        compute (event, state, previous) {\n            // https://github.com/pmndrs/react-three-fiber/pull/782\n            // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides\n            state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n            state.raycaster.setFromCamera(state.pointer, state.camera);\n        },\n        connected: undefined,\n        handlers: Object.keys(DOM_EVENTS).reduce((acc, key)=>({\n                ...acc,\n                [key]: handlePointer(key)\n            }), {}),\n        update: ()=>{\n            var _internal$lastEvent;\n            const { events, internal } = store.getState();\n            if ((_internal$lastEvent = internal.lastEvent) != null && _internal$lastEvent.current && events.handlers) events.handlers.onPointerMove(internal.lastEvent.current);\n        },\n        connect: (target)=>{\n            var _events$handlers;\n            const { set, events } = store.getState();\n            events.disconnect == null ? void 0 : events.disconnect();\n            set((state)=>({\n                    events: {\n                        ...state.events,\n                        connected: target\n                    }\n                }));\n            Object.entries((_events$handlers = events.handlers) != null ? _events$handlers : []).forEach(([name, event])=>{\n                const [eventName, passive] = DOM_EVENTS[name];\n                target.addEventListener(eventName, event, {\n                    passive\n                });\n            });\n        },\n        disconnect: ()=>{\n            const { set, events } = store.getState();\n            if (events.connected) {\n                var _events$handlers2;\n                Object.entries((_events$handlers2 = events.handlers) != null ? _events$handlers2 : []).forEach(([name, event])=>{\n                    if (events && events.connected instanceof HTMLElement) {\n                        const [eventName] = DOM_EVENTS[name];\n                        events.connected.removeEventListener(eventName, event);\n                    }\n                });\n                set((state)=>({\n                        events: {\n                            ...state.events,\n                            connected: undefined\n                        }\n                    }));\n            }\n        }\n    };\n}\nconst CanvasImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function Canvas({ children, fallback, resize, style, gl, events = createPointerEvents, eventSource, eventPrefix, shadows, linear, flat, legacy, orthographic, frameloop, dpr, performance, raycaster, camera, onPointerMissed, onCreated, ...props }, forwardedRef) {\n    // Create a known catalogue of Threejs-native elements\n    // This will include the entire THREE namespace by default, users can extend\n    // their own elements by using the createRoot API instead\n    react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>(0,_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(three__WEBPACK_IMPORTED_MODULE_6__), []);\n    const Bridge = (0,its_fine__WEBPACK_IMPORTED_MODULE_7__.useContextBridge)();\n    const [containerRef, containerRect] = (0,react_use_measure__WEBPACK_IMPORTED_MODULE_8__[\"default\"])({\n        scroll: true,\n        debounce: {\n            scroll: 50,\n            resize: 0\n        },\n        ...resize\n    });\n    const canvasRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n    const divRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle(forwardedRef, ()=>canvasRef.current);\n    const handlePointerMissed = (0,_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)(onPointerMissed);\n    const [block, setBlock] = react__WEBPACK_IMPORTED_MODULE_2__.useState(false);\n    const [error, setError] = react__WEBPACK_IMPORTED_MODULE_2__.useState(false);\n    // Suspend this component if block is a promise (2nd run)\n    if (block) throw block;\n    // Throw exception outwards if anything within canvas throws\n    if (error) throw error;\n    const root = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n    (0,_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(()=>{\n        const canvas = canvasRef.current;\n        if (containerRect.width > 0 && containerRect.height > 0 && canvas) {\n            if (!root.current) root.current = (0,_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)(canvas);\n            root.current.configure({\n                gl,\n                events,\n                shadows,\n                linear,\n                flat,\n                legacy,\n                orthographic,\n                frameloop,\n                dpr,\n                performance,\n                raycaster,\n                camera,\n                size: containerRect,\n                // Pass mutable reference to onPointerMissed so it's free to update\n                onPointerMissed: (...args)=>handlePointerMissed.current == null ? void 0 : handlePointerMissed.current(...args),\n                onCreated: (state)=>{\n                    // Connect to event source\n                    state.events.connect == null ? void 0 : state.events.connect(eventSource ? (0,_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(eventSource) ? eventSource.current : eventSource : divRef.current);\n                    // Set up compute function\n                    if (eventPrefix) {\n                        state.setEvents({\n                            compute: (event, state)=>{\n                                const x = event[eventPrefix + \"X\"];\n                                const y = event[eventPrefix + \"Y\"];\n                                state.pointer.set(x / state.size.width * 2 - 1, -(y / state.size.height) * 2 + 1);\n                                state.raycaster.setFromCamera(state.pointer, state.camera);\n                            }\n                        });\n                    }\n                    // Call onCreated callback\n                    onCreated == null ? void 0 : onCreated(state);\n                }\n            });\n            root.current.render(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(Bridge, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.E, {\n                set: setError\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n                fallback: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.B, {\n                    set: setBlock\n                })\n            }, children))));\n        }\n    });\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        const canvas = canvasRef.current;\n        if (canvas) return ()=>(0,_index_673ef987_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(canvas);\n    }, []);\n    // When the event source is not this div, we need to set pointer-events to none\n    // Or else the canvas will block events from reaching the event source\n    const pointerEvents = eventSource ? \"none\" : \"auto\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        ref: divRef,\n        style: {\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"hidden\",\n            pointerEvents,\n            ...style\n        }\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n        ref: containerRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"canvas\", {\n        ref: canvasRef,\n        style: {\n            display: \"block\"\n        }\n    }, fallback)));\n});\n/**\n * A DOM canvas which accepts threejs elements as children.\n * @see https://docs.pmnd.rs/react-three-fiber/api/canvas\n */ const Canvas = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function CanvasWrapper(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(its_fine__WEBPACK_IMPORTED_MODULE_7__.FiberProvider, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(CanvasImpl, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, props, {\n        ref: ref\n    })));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var enableSchedulerDebugging = false;\n        var enableProfiling = false;\n        var frameYieldMs = 5;\n        function push(heap, node) {\n            var index = heap.length;\n            heap.push(node);\n            siftUp(heap, node, index);\n        }\n        function peek(heap) {\n            return heap.length === 0 ? null : heap[0];\n        }\n        function pop(heap) {\n            if (heap.length === 0) {\n                return null;\n            }\n            var first = heap[0];\n            var last = heap.pop();\n            if (last !== first) {\n                heap[0] = last;\n                siftDown(heap, last, 0);\n            }\n            return first;\n        }\n        function siftUp(heap, node, i) {\n            var index = i;\n            while(index > 0){\n                var parentIndex = index - 1 >>> 1;\n                var parent = heap[parentIndex];\n                if (compare(parent, node) > 0) {\n                    // The parent is larger. Swap positions.\n                    heap[parentIndex] = node;\n                    heap[index] = parent;\n                    index = parentIndex;\n                } else {\n                    // The parent is smaller. Exit.\n                    return;\n                }\n            }\n        }\n        function siftDown(heap, node, i) {\n            var index = i;\n            var length = heap.length;\n            var halfLength = length >>> 1;\n            while(index < halfLength){\n                var leftIndex = (index + 1) * 2 - 1;\n                var left = heap[leftIndex];\n                var rightIndex = leftIndex + 1;\n                var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n                if (compare(left, node) < 0) {\n                    if (rightIndex < length && compare(right, left) < 0) {\n                        heap[index] = right;\n                        heap[rightIndex] = node;\n                        index = rightIndex;\n                    } else {\n                        heap[index] = left;\n                        heap[leftIndex] = node;\n                        index = leftIndex;\n                    }\n                } else if (rightIndex < length && compare(right, node) < 0) {\n                    heap[index] = right;\n                    heap[rightIndex] = node;\n                    index = rightIndex;\n                } else {\n                    // Neither child is smaller. Exit.\n                    return;\n                }\n            }\n        }\n        function compare(a, b) {\n            // Compare sort index first, then task id.\n            var diff = a.sortIndex - b.sortIndex;\n            return diff !== 0 ? diff : a.id - b.id;\n        }\n        // TODO: Use symbols?\n        var ImmediatePriority = 1;\n        var UserBlockingPriority = 2;\n        var NormalPriority = 3;\n        var LowPriority = 4;\n        var IdlePriority = 5;\n        function markTaskErrored(task, ms) {}\n        /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === \"object\" && typeof performance.now === \"function\";\n        if (hasPerformanceNow) {\n            var localPerformance = performance;\n            exports.unstable_now = function() {\n                return localPerformance.now();\n            };\n        } else {\n            var localDate = Date;\n            var initialTime = localDate.now();\n            exports.unstable_now = function() {\n                return localDate.now() - initialTime;\n            };\n        } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n        // Math.pow(2, 30) - 1\n        // 0b111111111111111111111111111111\n        var maxSigned31BitInt = 1073741823; // Times out immediately\n        var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n        var NORMAL_PRIORITY_TIMEOUT = 5000;\n        var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n        var taskQueue = [];\n        var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n        var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n        var currentTask = null;\n        var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n        var isPerformingWork = false;\n        var isHostCallbackScheduled = false;\n        var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n        var localSetTimeout = typeof setTimeout === \"function\" ? setTimeout : null;\n        var localClearTimeout = typeof clearTimeout === \"function\" ? clearTimeout : null;\n        var localSetImmediate = typeof setImmediate !== \"undefined\" ? setImmediate : null; // IE and Node.js + jsdom\n        var isInputPending = typeof navigator !== \"undefined\" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n        function advanceTimers(currentTime) {\n            // Check for tasks that are no longer delayed and add them to the queue.\n            var timer = peek(timerQueue);\n            while(timer !== null){\n                if (timer.callback === null) {\n                    // Timer was cancelled.\n                    pop(timerQueue);\n                } else if (timer.startTime <= currentTime) {\n                    // Timer fired. Transfer to the task queue.\n                    pop(timerQueue);\n                    timer.sortIndex = timer.expirationTime;\n                    push(taskQueue, timer);\n                } else {\n                    // Remaining timers are pending.\n                    return;\n                }\n                timer = peek(timerQueue);\n            }\n        }\n        function handleTimeout(currentTime) {\n            isHostTimeoutScheduled = false;\n            advanceTimers(currentTime);\n            if (!isHostCallbackScheduled) {\n                if (peek(taskQueue) !== null) {\n                    isHostCallbackScheduled = true;\n                    requestHostCallback(flushWork);\n                } else {\n                    var firstTimer = peek(timerQueue);\n                    if (firstTimer !== null) {\n                        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n                    }\n                }\n            }\n        }\n        function flushWork(hasTimeRemaining, initialTime) {\n            isHostCallbackScheduled = false;\n            if (isHostTimeoutScheduled) {\n                // We scheduled a timeout but it's no longer needed. Cancel it.\n                isHostTimeoutScheduled = false;\n                cancelHostTimeout();\n            }\n            isPerformingWork = true;\n            var previousPriorityLevel = currentPriorityLevel;\n            try {\n                if (enableProfiling) {\n                    try {\n                        return workLoop(hasTimeRemaining, initialTime);\n                    } catch (error) {\n                        if (currentTask !== null) {\n                            var currentTime = exports.unstable_now();\n                            markTaskErrored(currentTask, currentTime);\n                            currentTask.isQueued = false;\n                        }\n                        throw error;\n                    }\n                } else {\n                    // No catch in prod code path.\n                    return workLoop(hasTimeRemaining, initialTime);\n                }\n            } finally{\n                currentTask = null;\n                currentPriorityLevel = previousPriorityLevel;\n                isPerformingWork = false;\n            }\n        }\n        function workLoop(hasTimeRemaining, initialTime) {\n            var currentTime = initialTime;\n            advanceTimers(currentTime);\n            currentTask = peek(taskQueue);\n            while(currentTask !== null && !enableSchedulerDebugging){\n                if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n                    break;\n                }\n                var callback = currentTask.callback;\n                if (typeof callback === \"function\") {\n                    currentTask.callback = null;\n                    currentPriorityLevel = currentTask.priorityLevel;\n                    var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n                    var continuationCallback = callback(didUserCallbackTimeout);\n                    currentTime = exports.unstable_now();\n                    if (typeof continuationCallback === \"function\") {\n                        currentTask.callback = continuationCallback;\n                    } else {\n                        if (currentTask === peek(taskQueue)) {\n                            pop(taskQueue);\n                        }\n                    }\n                    advanceTimers(currentTime);\n                } else {\n                    pop(taskQueue);\n                }\n                currentTask = peek(taskQueue);\n            } // Return whether there's additional work\n            if (currentTask !== null) {\n                return true;\n            } else {\n                var firstTimer = peek(timerQueue);\n                if (firstTimer !== null) {\n                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n                }\n                return false;\n            }\n        }\n        function unstable_runWithPriority(priorityLevel, eventHandler) {\n            switch(priorityLevel){\n                case ImmediatePriority:\n                case UserBlockingPriority:\n                case NormalPriority:\n                case LowPriority:\n                case IdlePriority:\n                    break;\n                default:\n                    priorityLevel = NormalPriority;\n            }\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = priorityLevel;\n            try {\n                return eventHandler();\n            } finally{\n                currentPriorityLevel = previousPriorityLevel;\n            }\n        }\n        function unstable_next(eventHandler) {\n            var priorityLevel;\n            switch(currentPriorityLevel){\n                case ImmediatePriority:\n                case UserBlockingPriority:\n                case NormalPriority:\n                    // Shift down to normal priority\n                    priorityLevel = NormalPriority;\n                    break;\n                default:\n                    // Anything lower than normal priority should remain at the current level.\n                    priorityLevel = currentPriorityLevel;\n                    break;\n            }\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = priorityLevel;\n            try {\n                return eventHandler();\n            } finally{\n                currentPriorityLevel = previousPriorityLevel;\n            }\n        }\n        function unstable_wrapCallback(callback) {\n            var parentPriorityLevel = currentPriorityLevel;\n            return function() {\n                // This is a fork of runWithPriority, inlined for performance.\n                var previousPriorityLevel = currentPriorityLevel;\n                currentPriorityLevel = parentPriorityLevel;\n                try {\n                    return callback.apply(this, arguments);\n                } finally{\n                    currentPriorityLevel = previousPriorityLevel;\n                }\n            };\n        }\n        function unstable_scheduleCallback(priorityLevel, callback, options) {\n            var currentTime = exports.unstable_now();\n            var startTime;\n            if (typeof options === \"object\" && options !== null) {\n                var delay = options.delay;\n                if (typeof delay === \"number\" && delay > 0) {\n                    startTime = currentTime + delay;\n                } else {\n                    startTime = currentTime;\n                }\n            } else {\n                startTime = currentTime;\n            }\n            var timeout;\n            switch(priorityLevel){\n                case ImmediatePriority:\n                    timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n                    break;\n                case UserBlockingPriority:\n                    timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n                    break;\n                case IdlePriority:\n                    timeout = IDLE_PRIORITY_TIMEOUT;\n                    break;\n                case LowPriority:\n                    timeout = LOW_PRIORITY_TIMEOUT;\n                    break;\n                case NormalPriority:\n                default:\n                    timeout = NORMAL_PRIORITY_TIMEOUT;\n                    break;\n            }\n            var expirationTime = startTime + timeout;\n            var newTask = {\n                id: taskIdCounter++,\n                callback: callback,\n                priorityLevel: priorityLevel,\n                startTime: startTime,\n                expirationTime: expirationTime,\n                sortIndex: -1\n            };\n            if (startTime > currentTime) {\n                // This is a delayed task.\n                newTask.sortIndex = startTime;\n                push(timerQueue, newTask);\n                if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n                    // All tasks are delayed, and this is the task with the earliest delay.\n                    if (isHostTimeoutScheduled) {\n                        // Cancel an existing timeout.\n                        cancelHostTimeout();\n                    } else {\n                        isHostTimeoutScheduled = true;\n                    } // Schedule a timeout.\n                    requestHostTimeout(handleTimeout, startTime - currentTime);\n                }\n            } else {\n                newTask.sortIndex = expirationTime;\n                push(taskQueue, newTask);\n                // wait until the next time we yield.\n                if (!isHostCallbackScheduled && !isPerformingWork) {\n                    isHostCallbackScheduled = true;\n                    requestHostCallback(flushWork);\n                }\n            }\n            return newTask;\n        }\n        function unstable_pauseExecution() {}\n        function unstable_continueExecution() {\n            if (!isHostCallbackScheduled && !isPerformingWork) {\n                isHostCallbackScheduled = true;\n                requestHostCallback(flushWork);\n            }\n        }\n        function unstable_getFirstCallbackNode() {\n            return peek(taskQueue);\n        }\n        function unstable_cancelCallback(task) {\n            // remove from the queue because you can't remove arbitrary nodes from an\n            // array based heap, only the first one.)\n            task.callback = null;\n        }\n        function unstable_getCurrentPriorityLevel() {\n            return currentPriorityLevel;\n        }\n        var isMessageLoopRunning = false;\n        var scheduledHostCallback = null;\n        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n        // thread, like user events. By default, it yields multiple times per frame.\n        // It does not attempt to align with frame boundaries, since most tasks don't\n        // need to be frame aligned; for those that do, use requestAnimationFrame.\n        var frameInterval = frameYieldMs;\n        var startTime = -1;\n        function shouldYieldToHost() {\n            var timeElapsed = exports.unstable_now() - startTime;\n            if (timeElapsed < frameInterval) {\n                // The main thread has only been blocked for a really short amount of time;\n                // smaller than a single frame. Don't yield yet.\n                return false;\n            } // The main thread has been blocked for a non-negligible amount of time. We\n            return true;\n        }\n        function requestPaint() {}\n        function forceFrameRate(fps) {\n            if (fps < 0 || fps > 125) {\n                // Using console['error'] to evade Babel and ESLint\n                console[\"error\"](\"forceFrameRate takes a positive int between 0 and 125, \" + \"forcing frame rates higher than 125 fps is not supported\");\n                return;\n            }\n            if (fps > 0) {\n                frameInterval = Math.floor(1000 / fps);\n            } else {\n                // reset the framerate\n                frameInterval = frameYieldMs;\n            }\n        }\n        var performWorkUntilDeadline = function() {\n            if (scheduledHostCallback !== null) {\n                var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n                // has been blocked.\n                startTime = currentTime;\n                var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n                // error can be observed.\n                //\n                // Intentionally not using a try-catch, since that makes some debugging\n                // techniques harder. Instead, if `scheduledHostCallback` errors, then\n                // `hasMoreWork` will remain true, and we'll continue the work loop.\n                var hasMoreWork = true;\n                try {\n                    hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n                } finally{\n                    if (hasMoreWork) {\n                        // If there's more work, schedule the next message event at the end\n                        // of the preceding one.\n                        schedulePerformWorkUntilDeadline();\n                    } else {\n                        isMessageLoopRunning = false;\n                        scheduledHostCallback = null;\n                    }\n                }\n            } else {\n                isMessageLoopRunning = false;\n            } // Yielding to the browser will give it a chance to paint, so we can\n        };\n        var schedulePerformWorkUntilDeadline;\n        if (typeof localSetImmediate === \"function\") {\n            // Node.js and old IE.\n            // There's a few reasons for why we prefer setImmediate.\n            //\n            // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n            // (Even though this is a DOM fork of the Scheduler, you could get here\n            // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n            // https://github.com/facebook/react/issues/20756\n            //\n            // But also, it runs earlier which is the semantic we want.\n            // If other browsers ever implement it, it's better to use it.\n            // Although both of these would be inferior to native scheduling.\n            schedulePerformWorkUntilDeadline = function() {\n                localSetImmediate(performWorkUntilDeadline);\n            };\n        } else if (typeof MessageChannel !== \"undefined\") {\n            // DOM and Worker environments.\n            // We prefer MessageChannel because of the 4ms setTimeout clamping.\n            var channel = new MessageChannel();\n            var port = channel.port2;\n            channel.port1.onmessage = performWorkUntilDeadline;\n            schedulePerformWorkUntilDeadline = function() {\n                port.postMessage(null);\n            };\n        } else {\n            // We should only fallback here in non-browser environments.\n            schedulePerformWorkUntilDeadline = function() {\n                localSetTimeout(performWorkUntilDeadline, 0);\n            };\n        }\n        function requestHostCallback(callback) {\n            scheduledHostCallback = callback;\n            if (!isMessageLoopRunning) {\n                isMessageLoopRunning = true;\n                schedulePerformWorkUntilDeadline();\n            }\n        }\n        function requestHostTimeout(callback, ms) {\n            taskTimeoutID = localSetTimeout(function() {\n                callback(exports.unstable_now());\n            }, ms);\n        }\n        function cancelHostTimeout() {\n            localClearTimeout(taskTimeoutID);\n            taskTimeoutID = -1;\n        }\n        var unstable_requestPaint = requestPaint;\n        var unstable_Profiling = null;\n        exports.unstable_IdlePriority = IdlePriority;\n        exports.unstable_ImmediatePriority = ImmediatePriority;\n        exports.unstable_LowPriority = LowPriority;\n        exports.unstable_NormalPriority = NormalPriority;\n        exports.unstable_Profiling = unstable_Profiling;\n        exports.unstable_UserBlockingPriority = UserBlockingPriority;\n        exports.unstable_cancelCallback = unstable_cancelCallback;\n        exports.unstable_continueExecution = unstable_continueExecution;\n        exports.unstable_forceFrameRate = forceFrameRate;\n        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n        exports.unstable_next = unstable_next;\n        exports.unstable_pauseExecution = unstable_pauseExecution;\n        exports.unstable_requestPaint = unstable_requestPaint;\n        exports.unstable_runWithPriority = unstable_runWithPriority;\n        exports.unstable_scheduleCallback = unstable_scheduleCallback;\n        exports.unstable_shouldYield = shouldYieldToHost;\n        exports.unstable_wrapCallback = unstable_wrapCallback;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMseUtBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9maWJlci9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzPzZiYTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction createStore(createState) {\n    let state;\n    const listeners = /* @__PURE__ */ new Set();\n    const setState = (partial, replace)=>{\n        const nextState = typeof partial === \"function\" ? partial(state) : partial;\n        if (nextState !== state) {\n            const previousState = state;\n            state = replace ? nextState : Object.assign({}, state, nextState);\n            listeners.forEach((listener)=>listener(state, previousState));\n        }\n    };\n    const getState = ()=>state;\n    const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is)=>{\n        console.warn(\"[DEPRECATED] Please use `subscribeWithSelector` middleware\");\n        let currentSlice = selector(state);\n        function listenerToAdd() {\n            const nextSlice = selector(state);\n            if (!equalityFn(currentSlice, nextSlice)) {\n                const previousSlice = currentSlice;\n                listener(currentSlice = nextSlice, previousSlice);\n            }\n        }\n        listeners.add(listenerToAdd);\n        return ()=>listeners.delete(listenerToAdd);\n    };\n    const subscribe = (listener, selector, equalityFn)=>{\n        if (selector || equalityFn) {\n            return subscribeWithSelector(listener, selector, equalityFn);\n        }\n        listeners.add(listener);\n        return ()=>listeners.delete(listener);\n    };\n    const destroy = ()=>listeners.clear();\n    const api = {\n        setState,\n        getState,\n        subscribe,\n        destroy\n    };\n    state = createState(setState, getState, api);\n    return api;\n}\nconst isSSR =  true || 0;\nconst useIsomorphicLayoutEffect = isSSR ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\nfunction create(createState) {\n    const api = typeof createState === \"function\" ? createStore(createState) : createState;\n    const useStore = (selector = api.getState, equalityFn = Object.is)=>{\n        const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((c)=>c + 1, 0);\n        const state = api.getState();\n        const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n        const selectorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selector);\n        const equalityFnRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(equalityFn);\n        const erroredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n        const currentSliceRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n        if (currentSliceRef.current === void 0) {\n            currentSliceRef.current = selector(state);\n        }\n        let newStateSlice;\n        let hasNewStateSlice = false;\n        if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n            newStateSlice = selector(state);\n            hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n        }\n        useIsomorphicLayoutEffect(()=>{\n            if (hasNewStateSlice) {\n                currentSliceRef.current = newStateSlice;\n            }\n            stateRef.current = state;\n            selectorRef.current = selector;\n            equalityFnRef.current = equalityFn;\n            erroredRef.current = false;\n        });\n        const stateBeforeSubscriptionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n        useIsomorphicLayoutEffect(()=>{\n            const listener = ()=>{\n                try {\n                    const nextState = api.getState();\n                    const nextStateSlice = selectorRef.current(nextState);\n                    if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n                        stateRef.current = nextState;\n                        currentSliceRef.current = nextStateSlice;\n                        forceUpdate();\n                    }\n                } catch (error) {\n                    erroredRef.current = true;\n                    forceUpdate();\n                }\n            };\n            const unsubscribe = api.subscribe(listener);\n            if (api.getState() !== stateBeforeSubscriptionRef.current) {\n                listener();\n            }\n            return unsubscribe;\n        }, []);\n        const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(sliceToReturn);\n        return sliceToReturn;\n    };\n    Object.assign(useStore, api);\n    useStore[Symbol.iterator] = function() {\n        console.warn(\"[useStore, api] = create() is deprecated and will be removed in v4\");\n        const items = [\n            useStore,\n            api\n        ];\n        return {\n            next () {\n                const done = items.length <= 0;\n                return {\n                    value: items.shift(),\n                    done\n                };\n            }\n        };\n    };\n    return useStore;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/zustand/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AVERAGE: () => (/* binding */ AVERAGE),\n/* harmony export */   BYTES_PER_NODE: () => (/* binding */ BYTES_PER_NODE),\n/* harmony export */   CENTER: () => (/* binding */ CENTER),\n/* harmony export */   CONTAINED: () => (/* binding */ CONTAINED),\n/* harmony export */   FLOAT32_EPSILON: () => (/* binding */ FLOAT32_EPSILON),\n/* harmony export */   INTERSECTED: () => (/* binding */ INTERSECTED),\n/* harmony export */   IS_LEAFNODE_FLAG: () => (/* binding */ IS_LEAFNODE_FLAG),\n/* harmony export */   NOT_INTERSECTED: () => (/* binding */ NOT_INTERSECTED),\n/* harmony export */   SAH: () => (/* binding */ SAH),\n/* harmony export */   SKIP_GENERATION: () => (/* binding */ SKIP_GENERATION),\n/* harmony export */   TRAVERSAL_COST: () => (/* binding */ TRAVERSAL_COST),\n/* harmony export */   TRIANGLE_INTERSECT_COST: () => (/* binding */ TRIANGLE_INTERSECT_COST)\n/* harmony export */ });\n// Split strategy constants\nconst CENTER = 0;\nconst AVERAGE = 1;\nconst SAH = 2;\n// Traversal constants\nconst NOT_INTERSECTED = 0;\nconst INTERSECTED = 1;\nconst CONTAINED = 2;\n// SAH cost constants\n// TODO: hone these costs more. The relative difference between them should be the\n// difference in measured time to perform a triangle intersection vs traversing\n// bounds.\nconst TRIANGLE_INTERSECT_COST = 1.25;\nconst TRAVERSAL_COST = 1;\n// Build constants\nconst BYTES_PER_NODE = 6 * 4 + 4 + 4;\nconst IS_LEAFNODE_FLAG = 0xFFFF;\n// EPSILON for computing floating point error during build\n// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\nconst FLOAT32_EPSILON = Math.pow(2, -24);\nconst SKIP_GENERATION = Symbol(\"SKIP_GENERATION\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL0NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQkFBMkI7QUFDcEIsTUFBTUEsU0FBUyxFQUFFO0FBQ2pCLE1BQU1DLFVBQVUsRUFBRTtBQUNsQixNQUFNQyxNQUFNLEVBQUU7QUFFckIsc0JBQXNCO0FBQ2YsTUFBTUMsa0JBQWtCLEVBQUU7QUFDMUIsTUFBTUMsY0FBYyxFQUFFO0FBQ3RCLE1BQU1DLFlBQVksRUFBRTtBQUUzQixxQkFBcUI7QUFDckIsa0ZBQWtGO0FBQ2xGLCtFQUErRTtBQUMvRSxVQUFVO0FBQ0gsTUFBTUMsMEJBQTBCLEtBQUs7QUFDckMsTUFBTUMsaUJBQWlCLEVBQUU7QUFHaEMsa0JBQWtCO0FBQ1gsTUFBTUMsaUJBQWlCLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDckMsTUFBTUMsbUJBQW1CLE9BQU87QUFFdkMsMERBQTBEO0FBQzFELHdHQUF3RztBQUNqRyxNQUFNQyxrQkFBa0JDLEtBQUtDLEdBQUcsQ0FBRSxHQUFHLENBQUUsSUFBSztBQUU1QyxNQUFNQyxrQkFBa0JDLE9BQVEsbUJBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9Db25zdGFudHMuanM/YmY1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTcGxpdCBzdHJhdGVneSBjb25zdGFudHNcbmV4cG9ydCBjb25zdCBDRU5URVIgPSAwO1xuZXhwb3J0IGNvbnN0IEFWRVJBR0UgPSAxO1xuZXhwb3J0IGNvbnN0IFNBSCA9IDI7XG5cbi8vIFRyYXZlcnNhbCBjb25zdGFudHNcbmV4cG9ydCBjb25zdCBOT1RfSU5URVJTRUNURUQgPSAwO1xuZXhwb3J0IGNvbnN0IElOVEVSU0VDVEVEID0gMTtcbmV4cG9ydCBjb25zdCBDT05UQUlORUQgPSAyO1xuXG4vLyBTQUggY29zdCBjb25zdGFudHNcbi8vIFRPRE86IGhvbmUgdGhlc2UgY29zdHMgbW9yZS4gVGhlIHJlbGF0aXZlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVtIHNob3VsZCBiZSB0aGVcbi8vIGRpZmZlcmVuY2UgaW4gbWVhc3VyZWQgdGltZSB0byBwZXJmb3JtIGEgdHJpYW5nbGUgaW50ZXJzZWN0aW9uIHZzIHRyYXZlcnNpbmdcbi8vIGJvdW5kcy5cbmV4cG9ydCBjb25zdCBUUklBTkdMRV9JTlRFUlNFQ1RfQ09TVCA9IDEuMjU7XG5leHBvcnQgY29uc3QgVFJBVkVSU0FMX0NPU1QgPSAxO1xuXG5cbi8vIEJ1aWxkIGNvbnN0YW50c1xuZXhwb3J0IGNvbnN0IEJZVEVTX1BFUl9OT0RFID0gNiAqIDQgKyA0ICsgNDtcbmV4cG9ydCBjb25zdCBJU19MRUFGTk9ERV9GTEFHID0gMHhGRkZGO1xuXG4vLyBFUFNJTE9OIGZvciBjb21wdXRpbmcgZmxvYXRpbmcgcG9pbnQgZXJyb3IgZHVyaW5nIGJ1aWxkXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NYWNoaW5lX2Vwc2lsb24jVmFsdWVzX2Zvcl9zdGFuZGFyZF9oYXJkd2FyZV9mbG9hdGluZ19wb2ludF9hcml0aG1ldGljc1xuZXhwb3J0IGNvbnN0IEZMT0FUMzJfRVBTSUxPTiA9IE1hdGgucG93KCAyLCAtIDI0ICk7XG5cbmV4cG9ydCBjb25zdCBTS0lQX0dFTkVSQVRJT04gPSBTeW1ib2woICdTS0lQX0dFTkVSQVRJT04nICk7XG4iXSwibmFtZXMiOlsiQ0VOVEVSIiwiQVZFUkFHRSIsIlNBSCIsIk5PVF9JTlRFUlNFQ1RFRCIsIklOVEVSU0VDVEVEIiwiQ09OVEFJTkVEIiwiVFJJQU5HTEVfSU5URVJTRUNUX0NPU1QiLCJUUkFWRVJTQUxfQ09TVCIsIkJZVEVTX1BFUl9OT0RFIiwiSVNfTEVBRk5PREVfRkxBRyIsIkZMT0FUMzJfRVBTSUxPTiIsIk1hdGgiLCJwb3ciLCJTS0lQX0dFTkVSQVRJT04iLCJTeW1ib2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVH.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVH.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MeshBVH: () => (/* binding */ MeshBVH)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Constants.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _build_buildTree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./build/buildTree.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/buildTree.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/OrientedBox.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/ExtendedTrianglePool.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\");\n/* harmony import */ var _cast_shapecast_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cast/shapecast.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/shapecast.js\");\n/* harmony import */ var _cast_closestPointToPoint_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./cast/closestPointToPoint.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js\");\n/* harmony import */ var _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/iterationUtils.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\");\n/* harmony import */ var _cast_refit_generated_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cast/refit.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit.generated.js\");\n/* harmony import */ var _cast_raycast_generated_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cast/raycast.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js\");\n/* harmony import */ var _cast_raycastFirst_generated_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cast/raycastFirst.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js\");\n/* harmony import */ var _cast_intersectsGeometry_generated_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./cast/intersectsGeometry.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js\");\n/* harmony import */ var _cast_closestPointToGeometry_generated_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./cast/closestPointToGeometry.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js\");\n/* harmony import */ var _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/iterationUtils_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\");\n/* harmony import */ var _cast_refit_indirect_generated_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cast/refit_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js\");\n/* harmony import */ var _cast_raycast_indirect_generated_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cast/raycast_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js\");\n/* harmony import */ var _cast_raycastFirst_indirect_generated_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cast/raycastFirst_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js\");\n/* harmony import */ var _cast_intersectsGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cast/intersectsGeometry_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js\");\n/* harmony import */ var _cast_closestPointToGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./cast/closestPointToGeometry_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js\");\n/* harmony import */ var _utils_BufferUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/BufferUtils.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _cast_bvhcast_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./cast/bvhcast.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/bvhcast.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_0__.OrientedBox();\nconst tempBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_1__.Box3();\nclass MeshBVH {\n    static serialize(bvh, options = {}) {\n        options = {\n            cloneBuffers: true,\n            ...options\n        };\n        const geometry = bvh.geometry;\n        const rootData = bvh._roots;\n        const indirectBuffer = bvh._indirectBuffer;\n        const indexAttribute = geometry.getIndex();\n        let result;\n        if (options.cloneBuffers) {\n            result = {\n                roots: rootData.map((root)=>root.slice()),\n                index: indexAttribute.array.slice(),\n                indirectBuffer: indirectBuffer ? indirectBuffer.slice() : null\n            };\n        } else {\n            result = {\n                roots: rootData,\n                index: indexAttribute.array,\n                indirectBuffer: indirectBuffer\n            };\n        }\n        return result;\n    }\n    static deserialize(data, geometry, options = {}) {\n        options = {\n            setIndex: true,\n            indirect: Boolean(data.indirectBuffer),\n            ...options\n        };\n        const { index, roots, indirectBuffer } = data;\n        const bvh = new MeshBVH(geometry, {\n            ...options,\n            [_Constants_js__WEBPACK_IMPORTED_MODULE_2__.SKIP_GENERATION]: true\n        });\n        bvh._roots = roots;\n        bvh._indirectBuffer = indirectBuffer || null;\n        if (options.setIndex) {\n            const indexAttribute = geometry.getIndex();\n            if (indexAttribute === null) {\n                const newIndex = new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(data.index, 1, false);\n                geometry.setIndex(newIndex);\n            } else if (indexAttribute.array !== index) {\n                indexAttribute.array.set(index);\n                indexAttribute.needsUpdate = true;\n            }\n        }\n        return bvh;\n    }\n    get indirect() {\n        return !!this._indirectBuffer;\n    }\n    constructor(geometry, options = {}){\n        if (!geometry.isBufferGeometry) {\n            throw new Error(\"MeshBVH: Only BufferGeometries are supported.\");\n        } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {\n            throw new Error(\"MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.\");\n        }\n        // default options\n        options = Object.assign({\n            strategy: _Constants_js__WEBPACK_IMPORTED_MODULE_2__.CENTER,\n            maxDepth: 40,\n            maxLeafTris: 10,\n            verbose: true,\n            useSharedArrayBuffer: false,\n            setBoundingBox: true,\n            onProgress: null,\n            indirect: false,\n            // undocumented options\n            // Whether to skip generating the tree. Used for deserialization.\n            [_Constants_js__WEBPACK_IMPORTED_MODULE_2__.SKIP_GENERATION]: false\n        }, options);\n        if (options.useSharedArrayBuffer && !(0,_utils_BufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.isSharedArrayBufferSupported)()) {\n            throw new Error(\"MeshBVH: SharedArrayBuffer is not available.\");\n        }\n        // retain references to the geometry so we can use them it without having to\n        // take a geometry reference in every function.\n        this.geometry = geometry;\n        this._roots = null;\n        this._indirectBuffer = null;\n        if (!options[_Constants_js__WEBPACK_IMPORTED_MODULE_2__.SKIP_GENERATION]) {\n            (0,_build_buildTree_js__WEBPACK_IMPORTED_MODULE_4__.buildPackedTree)(this, options);\n            if (!geometry.boundingBox && options.setBoundingBox) {\n                geometry.boundingBox = this.getBoundingBox(new three__WEBPACK_IMPORTED_MODULE_1__.Box3());\n            }\n        }\n        const { _indirectBuffer } = this;\n        this.resolveTriangleIndex = options.indirect ? (i)=>_indirectBuffer[i] : (i)=>i;\n    }\n    refit(nodeIndices = null) {\n        const refitFunc = this.indirect ? _cast_refit_indirect_generated_js__WEBPACK_IMPORTED_MODULE_5__.refit_indirect : _cast_refit_generated_js__WEBPACK_IMPORTED_MODULE_6__.refit;\n        return refitFunc(this, nodeIndices);\n    }\n    traverse(callback, rootIndex = 0) {\n        const buffer = this._roots[rootIndex];\n        const uint32Array = new Uint32Array(buffer);\n        const uint16Array = new Uint16Array(buffer);\n        _traverse(0);\n        function _traverse(node32Index, depth = 0) {\n            const node16Index = node32Index * 2;\n            const isLeaf = uint16Array[node16Index + 15] === _Constants_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAFNODE_FLAG;\n            if (isLeaf) {\n                const offset = uint32Array[node32Index + 6];\n                const count = uint16Array[node16Index + 14];\n                callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);\n            } else {\n                // TODO: use node functions here\n                const left = node32Index + _Constants_js__WEBPACK_IMPORTED_MODULE_2__.BYTES_PER_NODE / 4;\n                const right = uint32Array[node32Index + 6];\n                const splitAxis = uint32Array[node32Index + 7];\n                const stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);\n                if (!stopTraversal) {\n                    _traverse(left, depth + 1);\n                    _traverse(right, depth + 1);\n                }\n            }\n        }\n    }\n    /* Core Cast Functions */ raycast(ray, materialOrSide = three__WEBPACK_IMPORTED_MODULE_1__.FrontSide) {\n        const roots = this._roots;\n        const geometry = this.geometry;\n        const intersects = [];\n        const isMaterial = materialOrSide.isMaterial;\n        const isArrayMaterial = Array.isArray(materialOrSide);\n        const groups = geometry.groups;\n        const side = isMaterial ? materialOrSide.side : materialOrSide;\n        const raycastFunc = this.indirect ? _cast_raycast_indirect_generated_js__WEBPACK_IMPORTED_MODULE_7__.raycast_indirect : _cast_raycast_generated_js__WEBPACK_IMPORTED_MODULE_8__.raycast;\n        for(let i = 0, l = roots.length; i < l; i++){\n            const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n            const startCount = intersects.length;\n            raycastFunc(this, i, materialSide, ray, intersects);\n            if (isArrayMaterial) {\n                const materialIndex = groups[i].materialIndex;\n                for(let j = startCount, jl = intersects.length; j < jl; j++){\n                    intersects[j].face.materialIndex = materialIndex;\n                }\n            }\n        }\n        return intersects;\n    }\n    raycastFirst(ray, materialOrSide = three__WEBPACK_IMPORTED_MODULE_1__.FrontSide) {\n        const roots = this._roots;\n        const geometry = this.geometry;\n        const isMaterial = materialOrSide.isMaterial;\n        const isArrayMaterial = Array.isArray(materialOrSide);\n        let closestResult = null;\n        const groups = geometry.groups;\n        const side = isMaterial ? materialOrSide.side : materialOrSide;\n        const raycastFirstFunc = this.indirect ? _cast_raycastFirst_indirect_generated_js__WEBPACK_IMPORTED_MODULE_9__.raycastFirst_indirect : _cast_raycastFirst_generated_js__WEBPACK_IMPORTED_MODULE_10__.raycastFirst;\n        for(let i = 0, l = roots.length; i < l; i++){\n            const materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n            const result = raycastFirstFunc(this, i, materialSide, ray);\n            if (result != null && (closestResult == null || result.distance < closestResult.distance)) {\n                closestResult = result;\n                if (isArrayMaterial) {\n                    result.face.materialIndex = groups[i].materialIndex;\n                }\n            }\n        }\n        return closestResult;\n    }\n    intersectsGeometry(otherGeometry, geomToMesh) {\n        let result = false;\n        const roots = this._roots;\n        const intersectsGeometryFunc = this.indirect ? _cast_intersectsGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_11__.intersectsGeometry_indirect : _cast_intersectsGeometry_generated_js__WEBPACK_IMPORTED_MODULE_12__.intersectsGeometry;\n        for(let i = 0, l = roots.length; i < l; i++){\n            result = intersectsGeometryFunc(this, i, otherGeometry, geomToMesh);\n            if (result) {\n                break;\n            }\n        }\n        return result;\n    }\n    shapecast(callbacks) {\n        const triangle = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.getPrimitive();\n        const iterateFunc = this.indirect ? _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_14__.iterateOverTriangles_indirect : _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_15__.iterateOverTriangles;\n        let { boundsTraverseOrder, intersectsBounds, intersectsRange, intersectsTriangle } = callbacks;\n        // wrap the intersectsRange function\n        if (intersectsRange && intersectsTriangle) {\n            const originalIntersectsRange = intersectsRange;\n            intersectsRange = (offset, count, contained, depth, nodeIndex)=>{\n                if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {\n                    return iterateFunc(offset, count, this, intersectsTriangle, contained, depth, triangle);\n                }\n                return true;\n            };\n        } else if (!intersectsRange) {\n            if (intersectsTriangle) {\n                intersectsRange = (offset, count, contained, depth)=>{\n                    return iterateFunc(offset, count, this, intersectsTriangle, contained, depth, triangle);\n                };\n            } else {\n                intersectsRange = (offset, count, contained)=>{\n                    return contained;\n                };\n            }\n        }\n        // run shapecast\n        let result = false;\n        let byteOffset = 0;\n        const roots = this._roots;\n        for(let i = 0, l = roots.length; i < l; i++){\n            const root = roots[i];\n            result = (0,_cast_shapecast_js__WEBPACK_IMPORTED_MODULE_16__.shapecast)(this, i, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n            if (result) {\n                break;\n            }\n            byteOffset += root.byteLength;\n        }\n        _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.releasePrimitive(triangle);\n        return result;\n    }\n    bvhcast(otherBvh, matrixToLocal, callbacks) {\n        let { intersectsRanges, intersectsTriangles } = callbacks;\n        const triangle1 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.getPrimitive();\n        const indexAttr1 = this.geometry.index;\n        const positionAttr1 = this.geometry.attributes.position;\n        const assignTriangle1 = this.indirect ? (i1)=>{\n            const ti = this.resolveTriangleIndex(i1);\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle1, ti * 3, indexAttr1, positionAttr1);\n        } : (i1)=>{\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle1, i1 * 3, indexAttr1, positionAttr1);\n        };\n        const triangle2 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_13__.ExtendedTrianglePool.getPrimitive();\n        const indexAttr2 = otherBvh.geometry.index;\n        const positionAttr2 = otherBvh.geometry.attributes.position;\n        const assignTriangle2 = otherBvh.indirect ? (i2)=>{\n            const ti2 = otherBvh.resolveTriangleIndex(i2);\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle2, ti2 * 3, indexAttr2, positionAttr2);\n        } : (i2)=>{\n            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_17__.setTriangle)(triangle2, i2 * 3, indexAttr2, positionAttr2);\n        };\n        // generate triangle callback if needed\n        if (intersectsTriangles) {\n            const iterateOverDoubleTriangles = (offset1, count1, offset2, count2, depth1, index1, depth2, index2)=>{\n                for(let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2++){\n                    assignTriangle2(i2);\n                    triangle2.a.applyMatrix4(matrixToLocal);\n                    triangle2.b.applyMatrix4(matrixToLocal);\n                    triangle2.c.applyMatrix4(matrixToLocal);\n                    triangle2.needsUpdate = true;\n                    for(let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++){\n                        assignTriangle1(i1);\n                        triangle1.needsUpdate = true;\n                        if (intersectsTriangles(triangle1, triangle2, i1, i2, depth1, index1, depth2, index2)) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n            if (intersectsRanges) {\n                const originalIntersectsRanges = intersectsRanges;\n                intersectsRanges = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n                    if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {\n                        return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);\n                    }\n                    return true;\n                };\n            } else {\n                intersectsRanges = iterateOverDoubleTriangles;\n            }\n        }\n        return (0,_cast_bvhcast_js__WEBPACK_IMPORTED_MODULE_18__.bvhcast)(this, otherBvh, matrixToLocal, intersectsRanges);\n    }\n    /* Derived Cast Functions */ intersectsBox(box, boxToMesh) {\n        obb.set(box.min, box.max, boxToMesh);\n        obb.needsUpdate = true;\n        return this.shapecast({\n            intersectsBounds: (box)=>obb.intersectsBox(box),\n            intersectsTriangle: (tri)=>obb.intersectsTriangle(tri)\n        });\n    }\n    intersectsSphere(sphere) {\n        return this.shapecast({\n            intersectsBounds: (box)=>sphere.intersectsBox(box),\n            intersectsTriangle: (tri)=>tri.intersectsSphere(sphere)\n        });\n    }\n    closestPointToGeometry(otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n        const closestPointToGeometryFunc = this.indirect ? _cast_closestPointToGeometry_indirect_generated_js__WEBPACK_IMPORTED_MODULE_19__.closestPointToGeometry_indirect : _cast_closestPointToGeometry_generated_js__WEBPACK_IMPORTED_MODULE_20__.closestPointToGeometry;\n        return closestPointToGeometryFunc(this, otherGeometry, geometryToBvh, target1, target2, minThreshold, maxThreshold);\n    }\n    closestPointToPoint(point, target = {}, minThreshold = 0, maxThreshold = Infinity) {\n        return (0,_cast_closestPointToPoint_js__WEBPACK_IMPORTED_MODULE_21__.closestPointToPoint)(this, point, target, minThreshold, maxThreshold);\n    }\n    getBoundingBox(target) {\n        target.makeEmpty();\n        const roots = this._roots;\n        roots.forEach((buffer)=>{\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_22__.arrayToBox)(0, new Float32Array(buffer), tempBox);\n            target.union(tempBox);\n        });\n        return target;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVH.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVHNode.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVHNode.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MeshBVHNode: () => (/* binding */ MeshBVHNode)\n/* harmony export */ });\nclass MeshBVHNode {\n    constructor(){\n    // internal nodes have boundingData, left, right, and splitAxis\n    // leaf nodes have offset and count (referring to primitives in the mesh geometry)\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL01lc2hCVkhOb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtJQUVaQyxhQUFjO0lBRWIsK0RBQStEO0lBQy9ELGtGQUFrRjtJQUVuRjtBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9NZXNoQlZITm9kZS5qcz9lOTA0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBNZXNoQlZITm9kZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvLyBpbnRlcm5hbCBub2RlcyBoYXZlIGJvdW5kaW5nRGF0YSwgbGVmdCwgcmlnaHQsIGFuZCBzcGxpdEF4aXNcblx0XHQvLyBsZWFmIG5vZGVzIGhhdmUgb2Zmc2V0IGFuZCBjb3VudCAocmVmZXJyaW5nIHRvIHByaW1pdGl2ZXMgaW4gdGhlIG1lc2ggZ2VvbWV0cnkpXG5cblx0fVxuXG59XG4iXSwibmFtZXMiOlsiTWVzaEJWSE5vZGUiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVHNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/buildTree.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/buildTree.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildPackedTree: () => (/* binding */ buildPackedTree)\n/* harmony export */ });\n/* harmony import */ var _geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometryUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n/* harmony import */ var _computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./computeBoundsUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js\");\n/* harmony import */ var _splitUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./splitUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/splitUtils.js\");\n/* harmony import */ var _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../MeshBVHNode.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVHNode.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _sortUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sortUtils.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js\");\n/* harmony import */ var _sortUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sortUtils_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js\");\n\n\n\n\n\n\n\nfunction generateIndirectBuffer(geometry, useSharedArrayBuffer) {\n    const triCount = (geometry.index ? geometry.index.count : geometry.attributes.position.count) / 3;\n    const useUint32 = triCount > 2 ** 16;\n    const byteCount = useUint32 ? 4 : 2;\n    const buffer = useSharedArrayBuffer ? new SharedArrayBuffer(triCount * byteCount) : new ArrayBuffer(triCount * byteCount);\n    const indirectBuffer = useUint32 ? new Uint32Array(buffer) : new Uint16Array(buffer);\n    for(let i = 0, l = indirectBuffer.length; i < l; i++){\n        indirectBuffer[i] = i;\n    }\n    return indirectBuffer;\n}\nfunction buildTree(bvh, options) {\n    // Compute the full bounds of the geometry at the same time as triangle bounds because\n    // we'll need it for the root bounds in the case with no groups and it should be fast here.\n    // We can't use the geometry bounding box if it's available because it may be out of date.\n    const geometry = bvh.geometry;\n    const indexArray = geometry.index ? geometry.index.array : null;\n    const maxDepth = options.maxDepth;\n    const verbose = options.verbose;\n    const maxLeafTris = options.maxLeafTris;\n    const strategy = options.strategy;\n    const onProgress = options.onProgress;\n    const totalTriangles = (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__.getTriCount)(geometry);\n    const indirectBuffer = bvh._indirectBuffer;\n    let reachedMaxDepth = false;\n    const fullBounds = new Float32Array(6);\n    const cacheCentroidBoundingData = new Float32Array(6);\n    const triangleBounds = (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_1__.computeTriangleBounds)(geometry, fullBounds);\n    const partionFunc = options.indirect ? _sortUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_2__.partition_indirect : _sortUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__.partition;\n    const roots = [];\n    const ranges = options.indirect ? (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__.getFullGeometryRange)(geometry) : (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRootIndexRanges)(geometry);\n    if (ranges.length === 1) {\n        const range = ranges[0];\n        const root = new _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_4__.MeshBVHNode();\n        root.boundingData = fullBounds;\n        (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_1__.getCentroidBounds)(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);\n        splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n        roots.push(root);\n    } else {\n        for (let range of ranges){\n            const root = new _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_4__.MeshBVHNode();\n            root.boundingData = new Float32Array(6);\n            (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_1__.getBounds)(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);\n            splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n            roots.push(root);\n        }\n    }\n    return roots;\n    function triggerProgress(trianglesProcessed) {\n        if (onProgress) {\n            onProgress(trianglesProcessed / totalTriangles);\n        }\n    }\n    // either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n    // recording the offset and count of its triangles and writing them into the reordered geometry index.\n    function splitNode(node, offset, count, centroidBoundingData = null, depth = 0) {\n        if (!reachedMaxDepth && depth >= maxDepth) {\n            reachedMaxDepth = true;\n            if (verbose) {\n                console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);\n                console.warn(geometry);\n            }\n        }\n        // early out if we've met our capacity\n        if (count <= maxLeafTris || depth >= maxDepth) {\n            triggerProgress(offset + count);\n            node.offset = offset;\n            node.count = count;\n            return node;\n        }\n        // Find where to split the volume\n        const split = (0,_splitUtils_js__WEBPACK_IMPORTED_MODULE_5__.getOptimalSplit)(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);\n        if (split.axis === -1) {\n            triggerProgress(offset + count);\n            node.offset = offset;\n            node.count = count;\n            return node;\n        }\n        const splitOffset = partionFunc(indirectBuffer, indexArray, triangleBounds, offset, count, split);\n        // create the two new child nodes\n        if (splitOffset === offset || splitOffset === offset + count) {\n            triggerProgress(offset + count);\n            node.offset = offset;\n            node.count = count;\n        } else {\n            node.splitAxis = split.axis;\n            // create the left child and compute its bounding box\n            const left = new _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_4__.MeshBVHNode();\n            const lstart = offset;\n            const lcount = splitOffset - offset;\n            node.left = left;\n            left.boundingData = new Float32Array(6);\n            (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_1__.getBounds)(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);\n            splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1);\n            // repeat for right\n            const right = new _MeshBVHNode_js__WEBPACK_IMPORTED_MODULE_4__.MeshBVHNode();\n            const rstart = splitOffset;\n            const rcount = count - lcount;\n            node.right = right;\n            right.boundingData = new Float32Array(6);\n            (0,_computeBoundsUtils_js__WEBPACK_IMPORTED_MODULE_1__.getBounds)(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);\n            splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);\n        }\n        return node;\n    }\n}\nfunction buildPackedTree(bvh, options) {\n    const geometry = bvh.geometry;\n    if (options.indirect) {\n        bvh._indirectBuffer = generateIndirectBuffer(geometry, options.useSharedArrayBuffer);\n        if ((0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__.hasGroupGaps)(geometry) && !options.verbose) {\n            console.warn('MeshBVH: Provided geometry contains groups that do not fully span the vertex contents while using the \"indirect\" option. ' + \"BVH may incorrectly report intersections on unrendered portions of the geometry.\");\n        }\n    }\n    if (!bvh._indirectBuffer) {\n        (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_0__.ensureIndex)(geometry, options);\n    }\n    // boundingData  \t\t\t\t: 6 float32\n    // right / offset \t\t\t\t: 1 uint32\n    // splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n    const roots = buildTree(bvh, options);\n    let float32Array;\n    let uint32Array;\n    let uint16Array;\n    const packedRoots = [];\n    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n    for(let i = 0; i < roots.length; i++){\n        const root = roots[i];\n        let nodeCount = countNodes(root);\n        const buffer = new BufferConstructor(_Constants_js__WEBPACK_IMPORTED_MODULE_6__.BYTES_PER_NODE * nodeCount);\n        float32Array = new Float32Array(buffer);\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        populateBuffer(0, root);\n        packedRoots.push(buffer);\n    }\n    bvh._roots = packedRoots;\n    return;\n    function countNodes(node) {\n        if (node.count) {\n            return 1;\n        } else {\n            return 1 + countNodes(node.left) + countNodes(node.right);\n        }\n    }\n    function populateBuffer(byteOffset, node) {\n        const stride4Offset = byteOffset / 4;\n        const stride2Offset = byteOffset / 2;\n        const isLeaf = !!node.count;\n        const boundingData = node.boundingData;\n        for(let i = 0; i < 6; i++){\n            float32Array[stride4Offset + i] = boundingData[i];\n        }\n        if (isLeaf) {\n            const offset = node.offset;\n            const count = node.count;\n            uint32Array[stride4Offset + 6] = offset;\n            uint16Array[stride2Offset + 14] = count;\n            uint16Array[stride2Offset + 15] = _Constants_js__WEBPACK_IMPORTED_MODULE_6__.IS_LEAFNODE_FLAG;\n            return byteOffset + _Constants_js__WEBPACK_IMPORTED_MODULE_6__.BYTES_PER_NODE;\n        } else {\n            const left = node.left;\n            const right = node.right;\n            const splitAxis = node.splitAxis;\n            let nextUnusedPointer;\n            nextUnusedPointer = populateBuffer(byteOffset + _Constants_js__WEBPACK_IMPORTED_MODULE_6__.BYTES_PER_NODE, left);\n            if (nextUnusedPointer / 4 > Math.pow(2, 32)) {\n                throw new Error(\"MeshBVH: Cannot store child pointer greater than 32 bits.\");\n            }\n            uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;\n            nextUnusedPointer = populateBuffer(nextUnusedPointer, right);\n            uint32Array[stride4Offset + 7] = splitAxis;\n            return nextUnusedPointer;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/buildTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeTriangleBounds: () => (/* binding */ computeTriangleBounds),\n/* harmony export */   getBounds: () => (/* binding */ getBounds),\n/* harmony export */   getCentroidBounds: () => (/* binding */ getCentroidBounds)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _geometryUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geometryUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n\n\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\nfunction getBounds(triangleBounds, offset, count, target, centroidTarget = null) {\n    let minx = Infinity;\n    let miny = Infinity;\n    let minz = Infinity;\n    let maxx = -Infinity;\n    let maxy = -Infinity;\n    let maxz = -Infinity;\n    let cminx = Infinity;\n    let cminy = Infinity;\n    let cminz = Infinity;\n    let cmaxx = -Infinity;\n    let cmaxy = -Infinity;\n    let cmaxz = -Infinity;\n    const includeCentroid = centroidTarget !== null;\n    for(let i = offset * 6, end = (offset + count) * 6; i < end; i += 6){\n        const cx = triangleBounds[i + 0];\n        const hx = triangleBounds[i + 1];\n        const lx = cx - hx;\n        const rx = cx + hx;\n        if (lx < minx) minx = lx;\n        if (rx > maxx) maxx = rx;\n        if (includeCentroid && cx < cminx) cminx = cx;\n        if (includeCentroid && cx > cmaxx) cmaxx = cx;\n        const cy = triangleBounds[i + 2];\n        const hy = triangleBounds[i + 3];\n        const ly = cy - hy;\n        const ry = cy + hy;\n        if (ly < miny) miny = ly;\n        if (ry > maxy) maxy = ry;\n        if (includeCentroid && cy < cminy) cminy = cy;\n        if (includeCentroid && cy > cmaxy) cmaxy = cy;\n        const cz = triangleBounds[i + 4];\n        const hz = triangleBounds[i + 5];\n        const lz = cz - hz;\n        const rz = cz + hz;\n        if (lz < minz) minz = lz;\n        if (rz > maxz) maxz = rz;\n        if (includeCentroid && cz < cminz) cminz = cz;\n        if (includeCentroid && cz > cmaxz) cmaxz = cz;\n    }\n    target[0] = minx;\n    target[1] = miny;\n    target[2] = minz;\n    target[3] = maxx;\n    target[4] = maxy;\n    target[5] = maxz;\n    if (includeCentroid) {\n        centroidTarget[0] = cminx;\n        centroidTarget[1] = cminy;\n        centroidTarget[2] = cminz;\n        centroidTarget[3] = cmaxx;\n        centroidTarget[4] = cmaxy;\n        centroidTarget[5] = cmaxz;\n    }\n}\n// A stand alone function for retrieving the centroid bounds.\nfunction getCentroidBounds(triangleBounds, offset, count, centroidTarget) {\n    let cminx = Infinity;\n    let cminy = Infinity;\n    let cminz = Infinity;\n    let cmaxx = -Infinity;\n    let cmaxy = -Infinity;\n    let cmaxz = -Infinity;\n    for(let i = offset * 6, end = (offset + count) * 6; i < end; i += 6){\n        const cx = triangleBounds[i + 0];\n        if (cx < cminx) cminx = cx;\n        if (cx > cmaxx) cmaxx = cx;\n        const cy = triangleBounds[i + 2];\n        if (cy < cminy) cminy = cy;\n        if (cy > cmaxy) cmaxy = cy;\n        const cz = triangleBounds[i + 4];\n        if (cz < cminz) cminz = cz;\n        if (cz > cmaxz) cmaxz = cz;\n    }\n    centroidTarget[0] = cminx;\n    centroidTarget[1] = cminy;\n    centroidTarget[2] = cminz;\n    centroidTarget[3] = cmaxx;\n    centroidTarget[4] = cmaxy;\n    centroidTarget[5] = cmaxz;\n}\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nfunction computeTriangleBounds(geo, fullBounds) {\n    // clear the bounds to empty\n    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_0__.makeEmptyBounds)(fullBounds);\n    const posAttr = geo.attributes.position;\n    const index = geo.index ? geo.index.array : null;\n    const triCount = (0,_geometryUtils_js__WEBPACK_IMPORTED_MODULE_1__.getTriCount)(geo);\n    const triangleBounds = new Float32Array(triCount * 6);\n    const normalized = posAttr.normalized;\n    // used for non-normalized positions\n    const posArr = posAttr.array;\n    // support for an interleaved position buffer\n    const bufferOffset = posAttr.offset || 0;\n    let stride = 3;\n    if (posAttr.isInterleavedBufferAttribute) {\n        stride = posAttr.data.stride;\n    }\n    // used for normalized positions\n    const getters = [\n        \"getX\",\n        \"getY\",\n        \"getZ\"\n    ];\n    for(let tri = 0; tri < triCount; tri++){\n        const tri3 = tri * 3;\n        const tri6 = tri * 6;\n        let ai = tri3 + 0;\n        let bi = tri3 + 1;\n        let ci = tri3 + 2;\n        if (index) {\n            ai = index[ai];\n            bi = index[bi];\n            ci = index[ci];\n        }\n        // we add the stride and offset here since we access the array directly\n        // below for the sake of performance\n        if (!normalized) {\n            ai = ai * stride + bufferOffset;\n            bi = bi * stride + bufferOffset;\n            ci = ci * stride + bufferOffset;\n        }\n        for(let el = 0; el < 3; el++){\n            let a, b, c;\n            if (normalized) {\n                a = posAttr[getters[el]](ai);\n                b = posAttr[getters[el]](bi);\n                c = posAttr[getters[el]](ci);\n            } else {\n                a = posArr[ai + el];\n                b = posArr[bi + el];\n                c = posArr[ci + el];\n            }\n            let min = a;\n            if (b < min) min = b;\n            if (c < min) min = c;\n            let max = a;\n            if (b > max) max = b;\n            if (c > max) max = c;\n            // Increase the bounds size by float32 epsilon to avoid precision errors when\n            // converting to 32 bit float. Scale the epsilon by the size of the numbers being\n            // worked with.\n            const halfExtents = (max - min) / 2;\n            const el2 = el * 2;\n            triangleBounds[tri6 + el2 + 0] = min + halfExtents;\n            triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * _Constants_js__WEBPACK_IMPORTED_MODULE_2__.FLOAT32_EPSILON;\n            if (min < fullBounds[el]) fullBounds[el] = min;\n            if (max > fullBounds[el + 3]) fullBounds[el + 3] = max;\n        }\n    }\n    return triangleBounds;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/geometryUtils.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/geometryUtils.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureIndex: () => (/* binding */ ensureIndex),\n/* harmony export */   getFullGeometryRange: () => (/* binding */ getFullGeometryRange),\n/* harmony export */   getIndexArray: () => (/* binding */ getIndexArray),\n/* harmony export */   getRootIndexRanges: () => (/* binding */ getRootIndexRanges),\n/* harmony export */   getTriCount: () => (/* binding */ getTriCount),\n/* harmony export */   getVertexCount: () => (/* binding */ getVertexCount),\n/* harmony export */   hasGroupGaps: () => (/* binding */ hasGroupGaps)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\nfunction getVertexCount(geo) {\n    return geo.index ? geo.index.count : geo.attributes.position.count;\n}\nfunction getTriCount(geo) {\n    return getVertexCount(geo) / 3;\n}\nfunction getIndexArray(vertexCount, BufferConstructor = ArrayBuffer) {\n    if (vertexCount > 65535) {\n        return new Uint32Array(new BufferConstructor(4 * vertexCount));\n    } else {\n        return new Uint16Array(new BufferConstructor(2 * vertexCount));\n    }\n}\n// ensures that an index is present on the geometry\nfunction ensureIndex(geo, options) {\n    if (!geo.index) {\n        const vertexCount = geo.attributes.position.count;\n        const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n        const index = getIndexArray(vertexCount, BufferConstructor);\n        geo.setIndex(new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(index, 1));\n        for(let i = 0; i < vertexCount; i++){\n            index[i] = i;\n        }\n    }\n}\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nfunction getFullGeometryRange(geo) {\n    const triCount = getTriCount(geo);\n    const drawRange = geo.drawRange;\n    const start = drawRange.start / 3;\n    const end = (drawRange.start + drawRange.count) / 3;\n    const offset = Math.max(0, start);\n    const count = Math.min(triCount, end) - offset;\n    return [\n        {\n            offset: Math.floor(offset),\n            count: Math.floor(count)\n        }\n    ];\n}\nfunction getRootIndexRanges(geo) {\n    if (!geo.groups || !geo.groups.length) {\n        return getFullGeometryRange(geo);\n    }\n    const ranges = [];\n    const rangeBoundaries = new Set();\n    const drawRange = geo.drawRange;\n    const drawRangeStart = drawRange.start / 3;\n    const drawRangeEnd = (drawRange.start + drawRange.count) / 3;\n    for (const group of geo.groups){\n        const groupStart = group.start / 3;\n        const groupEnd = (group.start + group.count) / 3;\n        rangeBoundaries.add(Math.max(drawRangeStart, groupStart));\n        rangeBoundaries.add(Math.min(drawRangeEnd, groupEnd));\n    }\n    // note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n    const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a, b)=>a - b);\n    for(let i = 0; i < sortedBoundaries.length - 1; i++){\n        const start = sortedBoundaries[i];\n        const end = sortedBoundaries[i + 1];\n        ranges.push({\n            offset: Math.floor(start),\n            count: Math.floor(end - start)\n        });\n    }\n    return ranges;\n}\nfunction hasGroupGaps(geometry) {\n    if (geometry.groups.length === 0) {\n        return false;\n    }\n    const vertexCount = getTriCount(geometry);\n    const groups = getRootIndexRanges(geometry).sort((a, b)=>a.offset - b.offset);\n    const finalGroup = groups[groups.length - 1];\n    finalGroup.count = Math.min(vertexCount - finalGroup.offset, finalGroup.count);\n    let total = 0;\n    groups.forEach(({ count })=>total += count);\n    return vertexCount !== total;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   partition: () => (/* binding */ partition)\n/* harmony export */ });\n/********************************************************/ /* This file is generated from \"sortUtils.template.js\". */ /********************************************************/ // reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition(indirectBuffer, index, triangleBounds, offset, count, split) {\n    let left = offset;\n    let right = offset + count - 1;\n    const pos = split.pos;\n    const axisOffset = split.axis * 2;\n    // hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    while(true){\n        while(left <= right && triangleBounds[left * 6 + axisOffset] < pos){\n            left++;\n        }\n        // if a triangle center lies on the partition plane it is considered to be on the right side\n        while(left <= right && triangleBounds[right * 6 + axisOffset] >= pos){\n            right--;\n        }\n        if (left < right) {\n            // we need to swap all of the information associated with the triangles at index\n            // left and right; that's the verts in the geometry index, the bounds,\n            // and perhaps the SAH planes\n            for(let i = 0; i < 3; i++){\n                let t0 = index[left * 3 + i];\n                index[left * 3 + i] = index[right * 3 + i];\n                index[right * 3 + i] = t0;\n            }\n            // swap bounds\n            for(let i = 0; i < 6; i++){\n                let tb = triangleBounds[left * 6 + i];\n                triangleBounds[left * 6 + i] = triangleBounds[right * 6 + i];\n                triangleBounds[right * 6 + i] = tb;\n            }\n            left++;\n            right--;\n        } else {\n            return left;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2J1aWxkL3NvcnRVdGlscy5nZW5lcmF0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdEQUF3RCxHQUN4RCx3REFBd0QsR0FDeEQsd0RBQXdELEdBQ3hELHdHQUF3RztBQUN4RywwR0FBMEc7QUFDMUcsd0dBQXdHO0FBQ3hHLFNBQVNBLFVBQVdDLGNBQWMsRUFBRUMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxLQUFLO0lBRTlFLElBQUlDLE9BQU9IO0lBQ1gsSUFBSUksUUFBUUosU0FBU0MsUUFBUTtJQUM3QixNQUFNSSxNQUFNSCxNQUFNRyxHQUFHO0lBQ3JCLE1BQU1DLGFBQWFKLE1BQU1LLElBQUksR0FBRztJQUVoQyw4RkFBOEY7SUFDOUYsTUFBUSxLQUFPO1FBRWQsTUFBUUosUUFBUUMsU0FBU0wsY0FBYyxDQUFFSSxPQUFPLElBQUlHLFdBQVksR0FBR0QsSUFBTTtZQUV4RUY7UUFFRDtRQUVBLDRGQUE0RjtRQUM1RixNQUFRQSxRQUFRQyxTQUFTTCxjQUFjLENBQUVLLFFBQVEsSUFBSUUsV0FBWSxJQUFJRCxJQUFNO1lBRTFFRDtRQUVEO1FBRUEsSUFBS0QsT0FBT0MsT0FBUTtZQUVuQixnRkFBZ0Y7WUFDaEYsc0VBQXNFO1lBQ3RFLDZCQUE2QjtZQUU3QixJQUFNLElBQUlJLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO2dCQUU5QixJQUFJQyxLQUFLWCxLQUFLLENBQUVLLE9BQU8sSUFBSUssRUFBRztnQkFDOUJWLEtBQUssQ0FBRUssT0FBTyxJQUFJSyxFQUFHLEdBQUdWLEtBQUssQ0FBRU0sUUFBUSxJQUFJSSxFQUFHO2dCQUM5Q1YsS0FBSyxDQUFFTSxRQUFRLElBQUlJLEVBQUcsR0FBR0M7WUFFMUI7WUFHQSxjQUFjO1lBQ2QsSUFBTSxJQUFJRCxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBTztnQkFFOUIsSUFBSUUsS0FBS1gsY0FBYyxDQUFFSSxPQUFPLElBQUlLLEVBQUc7Z0JBQ3ZDVCxjQUFjLENBQUVJLE9BQU8sSUFBSUssRUFBRyxHQUFHVCxjQUFjLENBQUVLLFFBQVEsSUFBSUksRUFBRztnQkFDaEVULGNBQWMsQ0FBRUssUUFBUSxJQUFJSSxFQUFHLEdBQUdFO1lBRW5DO1lBRUFQO1lBQ0FDO1FBRUQsT0FBTztZQUVOLE9BQU9EO1FBRVI7SUFFRDtBQUVEO0FBRXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS9idWlsZC9zb3J0VXRpbHMuZ2VuZXJhdGVkLmpzPzQyZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIFwic29ydFV0aWxzLnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vLyByZW9yZGVycyBgdHJpc2Agc3VjaCB0aGF0IGZvciBgY291bnRgIGVsZW1lbnRzIGFmdGVyIGBvZmZzZXRgLCBlbGVtZW50cyBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBzcGxpdFxuLy8gd2lsbCBiZSBvbiB0aGUgbGVmdCBhbmQgZWxlbWVudHMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHNwbGl0IHdpbGwgYmUgb24gdGhlIHJpZ2h0LiByZXR1cm5zIHRoZSBpbmRleFxuLy8gb2YgdGhlIGZpcnN0IGVsZW1lbnQgb24gdGhlIHJpZ2h0IHNpZGUsIG9yIG9mZnNldCArIGNvdW50IGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBvbiB0aGUgcmlnaHQgc2lkZS5cbmZ1bmN0aW9uIHBhcnRpdGlvbiggaW5kaXJlY3RCdWZmZXIsIGluZGV4LCB0cmlhbmdsZUJvdW5kcywgb2Zmc2V0LCBjb3VudCwgc3BsaXQgKSB7XG5cblx0bGV0IGxlZnQgPSBvZmZzZXQ7XG5cdGxldCByaWdodCA9IG9mZnNldCArIGNvdW50IC0gMTtcblx0Y29uc3QgcG9zID0gc3BsaXQucG9zO1xuXHRjb25zdCBheGlzT2Zmc2V0ID0gc3BsaXQuYXhpcyAqIDI7XG5cblx0Ly8gaG9hcmUgcGFydGl0aW9uaW5nLCBzZWUgZS5nLiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9RdWlja3NvcnQjSG9hcmVfcGFydGl0aW9uX3NjaGVtZVxuXHR3aGlsZSAoIHRydWUgKSB7XG5cblx0XHR3aGlsZSAoIGxlZnQgPD0gcmlnaHQgJiYgdHJpYW5nbGVCb3VuZHNbIGxlZnQgKiA2ICsgYXhpc09mZnNldCBdIDwgcG9zICkge1xuXG5cdFx0XHRsZWZ0ICsrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgYSB0cmlhbmdsZSBjZW50ZXIgbGllcyBvbiB0aGUgcGFydGl0aW9uIHBsYW5lIGl0IGlzIGNvbnNpZGVyZWQgdG8gYmUgb24gdGhlIHJpZ2h0IHNpZGVcblx0XHR3aGlsZSAoIGxlZnQgPD0gcmlnaHQgJiYgdHJpYW5nbGVCb3VuZHNbIHJpZ2h0ICogNiArIGF4aXNPZmZzZXQgXSA+PSBwb3MgKSB7XG5cblx0XHRcdHJpZ2h0IC0tO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBsZWZ0IDwgcmlnaHQgKSB7XG5cblx0XHRcdC8vIHdlIG5lZWQgdG8gc3dhcCBhbGwgb2YgdGhlIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHJpYW5nbGVzIGF0IGluZGV4XG5cdFx0XHQvLyBsZWZ0IGFuZCByaWdodDsgdGhhdCdzIHRoZSB2ZXJ0cyBpbiB0aGUgZ2VvbWV0cnkgaW5kZXgsIHRoZSBib3VuZHMsXG5cdFx0XHQvLyBhbmQgcGVyaGFwcyB0aGUgU0FIIHBsYW5lc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAzOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCB0MCA9IGluZGV4WyBsZWZ0ICogMyArIGkgXTtcblx0XHRcdFx0aW5kZXhbIGxlZnQgKiAzICsgaSBdID0gaW5kZXhbIHJpZ2h0ICogMyArIGkgXTtcblx0XHRcdFx0aW5kZXhbIHJpZ2h0ICogMyArIGkgXSA9IHQwO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Ly8gc3dhcCBib3VuZHNcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0bGV0IHRiID0gdHJpYW5nbGVCb3VuZHNbIGxlZnQgKiA2ICsgaSBdO1xuXHRcdFx0XHR0cmlhbmdsZUJvdW5kc1sgbGVmdCAqIDYgKyBpIF0gPSB0cmlhbmdsZUJvdW5kc1sgcmlnaHQgKiA2ICsgaSBdO1xuXHRcdFx0XHR0cmlhbmdsZUJvdW5kc1sgcmlnaHQgKiA2ICsgaSBdID0gdGI7XG5cblx0XHRcdH1cblxuXHRcdFx0bGVmdCArKztcblx0XHRcdHJpZ2h0IC0tO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGxlZnQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IHBhcnRpdGlvbiB9O1xuIl0sIm5hbWVzIjpbInBhcnRpdGlvbiIsImluZGlyZWN0QnVmZmVyIiwiaW5kZXgiLCJ0cmlhbmdsZUJvdW5kcyIsIm9mZnNldCIsImNvdW50Iiwic3BsaXQiLCJsZWZ0IiwicmlnaHQiLCJwb3MiLCJheGlzT2Zmc2V0IiwiYXhpcyIsImkiLCJ0MCIsInRiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   partition_indirect: () => (/* binding */ partition_indirect)\n/* harmony export */ });\n/********************************************************/ /* This file is generated from \"sortUtils.template.js\". */ /********************************************************/ // reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition_indirect(indirectBuffer, index, triangleBounds, offset, count, split) {\n    let left = offset;\n    let right = offset + count - 1;\n    const pos = split.pos;\n    const axisOffset = split.axis * 2;\n    // hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    while(true){\n        while(left <= right && triangleBounds[left * 6 + axisOffset] < pos){\n            left++;\n        }\n        // if a triangle center lies on the partition plane it is considered to be on the right side\n        while(left <= right && triangleBounds[right * 6 + axisOffset] >= pos){\n            right--;\n        }\n        if (left < right) {\n            // we need to swap all of the information associated with the triangles at index\n            // left and right; that's the verts in the geometry index, the bounds,\n            // and perhaps the SAH planes\n            let t = indirectBuffer[left];\n            indirectBuffer[left] = indirectBuffer[right];\n            indirectBuffer[right] = t;\n            // swap bounds\n            for(let i = 0; i < 6; i++){\n                let tb = triangleBounds[left * 6 + i];\n                triangleBounds[left * 6 + i] = triangleBounds[right * 6 + i];\n                triangleBounds[right * 6 + i] = tb;\n            }\n            left++;\n            right--;\n        } else {\n            return left;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2J1aWxkL3NvcnRVdGlsc19pbmRpcmVjdC5nZW5lcmF0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdEQUF3RCxHQUN4RCx3REFBd0QsR0FDeEQsd0RBQXdELEdBQ3hELHdHQUF3RztBQUN4RywwR0FBMEc7QUFDMUcsd0dBQXdHO0FBQ3hHLFNBQVNBLG1CQUFvQkMsY0FBYyxFQUFFQyxLQUFLLEVBQUVDLGNBQWMsRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEtBQUs7SUFFdkYsSUFBSUMsT0FBT0g7SUFDWCxJQUFJSSxRQUFRSixTQUFTQyxRQUFRO0lBQzdCLE1BQU1JLE1BQU1ILE1BQU1HLEdBQUc7SUFDckIsTUFBTUMsYUFBYUosTUFBTUssSUFBSSxHQUFHO0lBRWhDLDhGQUE4RjtJQUM5RixNQUFRLEtBQU87UUFFZCxNQUFRSixRQUFRQyxTQUFTTCxjQUFjLENBQUVJLE9BQU8sSUFBSUcsV0FBWSxHQUFHRCxJQUFNO1lBRXhFRjtRQUVEO1FBRUEsNEZBQTRGO1FBQzVGLE1BQVFBLFFBQVFDLFNBQVNMLGNBQWMsQ0FBRUssUUFBUSxJQUFJRSxXQUFZLElBQUlELElBQU07WUFFMUVEO1FBRUQ7UUFFQSxJQUFLRCxPQUFPQyxPQUFRO1lBRW5CLGdGQUFnRjtZQUNoRixzRUFBc0U7WUFDdEUsNkJBQTZCO1lBQzdCLElBQUlJLElBQUlYLGNBQWMsQ0FBRU0sS0FBTTtZQUM5Qk4sY0FBYyxDQUFFTSxLQUFNLEdBQUdOLGNBQWMsQ0FBRU8sTUFBTztZQUNoRFAsY0FBYyxDQUFFTyxNQUFPLEdBQUdJO1lBRzFCLGNBQWM7WUFDZCxJQUFNLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO2dCQUU5QixJQUFJQyxLQUFLWCxjQUFjLENBQUVJLE9BQU8sSUFBSU0sRUFBRztnQkFDdkNWLGNBQWMsQ0FBRUksT0FBTyxJQUFJTSxFQUFHLEdBQUdWLGNBQWMsQ0FBRUssUUFBUSxJQUFJSyxFQUFHO2dCQUNoRVYsY0FBYyxDQUFFSyxRQUFRLElBQUlLLEVBQUcsR0FBR0M7WUFFbkM7WUFFQVA7WUFDQUM7UUFFRCxPQUFPO1lBRU4sT0FBT0Q7UUFFUjtJQUVEO0FBRUQ7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2J1aWxkL3NvcnRVdGlsc19pbmRpcmVjdC5nZW5lcmF0ZWQuanM/YWZiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGZyb20gXCJzb3J0VXRpbHMudGVtcGxhdGUuanNcIi4gKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8vIHJlb3JkZXJzIGB0cmlzYCBzdWNoIHRoYXQgZm9yIGBjb3VudGAgZWxlbWVudHMgYWZ0ZXIgYG9mZnNldGAsIGVsZW1lbnRzIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHNwbGl0XG4vLyB3aWxsIGJlIG9uIHRoZSBsZWZ0IGFuZCBlbGVtZW50cyBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgc3BsaXQgd2lsbCBiZSBvbiB0aGUgcmlnaHQuIHJldHVybnMgdGhlIGluZGV4XG4vLyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvbiB0aGUgcmlnaHQgc2lkZSwgb3Igb2Zmc2V0ICsgY291bnQgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIG9uIHRoZSByaWdodCBzaWRlLlxuZnVuY3Rpb24gcGFydGl0aW9uX2luZGlyZWN0KCBpbmRpcmVjdEJ1ZmZlciwgaW5kZXgsIHRyaWFuZ2xlQm91bmRzLCBvZmZzZXQsIGNvdW50LCBzcGxpdCApIHtcblxuXHRsZXQgbGVmdCA9IG9mZnNldDtcblx0bGV0IHJpZ2h0ID0gb2Zmc2V0ICsgY291bnQgLSAxO1xuXHRjb25zdCBwb3MgPSBzcGxpdC5wb3M7XG5cdGNvbnN0IGF4aXNPZmZzZXQgPSBzcGxpdC5heGlzICogMjtcblxuXHQvLyBob2FyZSBwYXJ0aXRpb25pbmcsIHNlZSBlLmcuIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1F1aWNrc29ydCNIb2FyZV9wYXJ0aXRpb25fc2NoZW1lXG5cdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdHdoaWxlICggbGVmdCA8PSByaWdodCAmJiB0cmlhbmdsZUJvdW5kc1sgbGVmdCAqIDYgKyBheGlzT2Zmc2V0IF0gPCBwb3MgKSB7XG5cblx0XHRcdGxlZnQgKys7XG5cblx0XHR9XG5cblx0XHQvLyBpZiBhIHRyaWFuZ2xlIGNlbnRlciBsaWVzIG9uIHRoZSBwYXJ0aXRpb24gcGxhbmUgaXQgaXMgY29uc2lkZXJlZCB0byBiZSBvbiB0aGUgcmlnaHQgc2lkZVxuXHRcdHdoaWxlICggbGVmdCA8PSByaWdodCAmJiB0cmlhbmdsZUJvdW5kc1sgcmlnaHQgKiA2ICsgYXhpc09mZnNldCBdID49IHBvcyApIHtcblxuXHRcdFx0cmlnaHQgLS07XG5cblx0XHR9XG5cblx0XHRpZiAoIGxlZnQgPCByaWdodCApIHtcblxuXHRcdFx0Ly8gd2UgbmVlZCB0byBzd2FwIGFsbCBvZiB0aGUgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSB0cmlhbmdsZXMgYXQgaW5kZXhcblx0XHRcdC8vIGxlZnQgYW5kIHJpZ2h0OyB0aGF0J3MgdGhlIHZlcnRzIGluIHRoZSBnZW9tZXRyeSBpbmRleCwgdGhlIGJvdW5kcyxcblx0XHRcdC8vIGFuZCBwZXJoYXBzIHRoZSBTQUggcGxhbmVzXG5cdFx0XHRsZXQgdCA9IGluZGlyZWN0QnVmZmVyWyBsZWZ0IF07XG5cdFx0XHRpbmRpcmVjdEJ1ZmZlclsgbGVmdCBdID0gaW5kaXJlY3RCdWZmZXJbIHJpZ2h0IF07XG5cdFx0XHRpbmRpcmVjdEJ1ZmZlclsgcmlnaHQgXSA9IHQ7XG5cblxuXHRcdFx0Ly8gc3dhcCBib3VuZHNcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0bGV0IHRiID0gdHJpYW5nbGVCb3VuZHNbIGxlZnQgKiA2ICsgaSBdO1xuXHRcdFx0XHR0cmlhbmdsZUJvdW5kc1sgbGVmdCAqIDYgKyBpIF0gPSB0cmlhbmdsZUJvdW5kc1sgcmlnaHQgKiA2ICsgaSBdO1xuXHRcdFx0XHR0cmlhbmdsZUJvdW5kc1sgcmlnaHQgKiA2ICsgaSBdID0gdGI7XG5cblx0XHRcdH1cblxuXHRcdFx0bGVmdCArKztcblx0XHRcdHJpZ2h0IC0tO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGxlZnQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IHBhcnRpdGlvbl9pbmRpcmVjdCB9O1xuIl0sIm5hbWVzIjpbInBhcnRpdGlvbl9pbmRpcmVjdCIsImluZGlyZWN0QnVmZmVyIiwiaW5kZXgiLCJ0cmlhbmdsZUJvdW5kcyIsIm9mZnNldCIsImNvdW50Iiwic3BsaXQiLCJsZWZ0IiwicmlnaHQiLCJwb3MiLCJheGlzT2Zmc2V0IiwiYXhpcyIsInQiLCJpIiwidGIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/splitUtils.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/splitUtils.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOptimalSplit: () => (/* binding */ getOptimalSplit)\n/* harmony export */ });\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n\n\nconst BIN_COUNT = 32;\nconst binsSort = (a, b)=>a.candidate - b.candidate;\nconst sahBins = new Array(BIN_COUNT).fill().map(()=>{\n    return {\n        count: 0,\n        bounds: new Float32Array(6),\n        rightCacheBounds: new Float32Array(6),\n        leftCacheBounds: new Float32Array(6),\n        candidate: 0\n    };\n});\nconst leftBounds = new Float32Array(6);\nfunction getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {\n    let axis = -1;\n    let pos = 0;\n    // Center\n    if (strategy === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.CENTER) {\n        axis = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.getLongestEdgeIndex)(centroidBoundingData);\n        if (axis !== -1) {\n            pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;\n        }\n    } else if (strategy === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.AVERAGE) {\n        axis = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.getLongestEdgeIndex)(nodeBoundingData);\n        if (axis !== -1) {\n            pos = getAverage(triangleBounds, offset, count, axis);\n        }\n    } else if (strategy === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.SAH) {\n        const rootSurfaceArea = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(nodeBoundingData);\n        let bestCost = _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRIANGLE_INTERSECT_COST * count;\n        // iterate over all axes\n        const cStart = offset * 6;\n        const cEnd = (offset + count) * 6;\n        for(let a = 0; a < 3; a++){\n            const axisLeft = centroidBoundingData[a];\n            const axisRight = centroidBoundingData[a + 3];\n            const axisLength = axisRight - axisLeft;\n            const binWidth = axisLength / BIN_COUNT;\n            // If we have fewer triangles than we're planning to split then just check all\n            // the triangle positions because it will be faster.\n            if (count < BIN_COUNT / 4) {\n                // initialize the bin candidates\n                const truncatedBins = [\n                    ...sahBins\n                ];\n                truncatedBins.length = count;\n                // set the candidates\n                let b = 0;\n                for(let c = cStart; c < cEnd; c += 6, b++){\n                    const bin = truncatedBins[b];\n                    bin.candidate = triangleBounds[c + 2 * a];\n                    bin.count = 0;\n                    const { bounds, leftCacheBounds, rightCacheBounds } = bin;\n                    for(let d = 0; d < 3; d++){\n                        rightCacheBounds[d] = Infinity;\n                        rightCacheBounds[d + 3] = -Infinity;\n                        leftCacheBounds[d] = Infinity;\n                        leftCacheBounds[d + 3] = -Infinity;\n                        bounds[d] = Infinity;\n                        bounds[d + 3] = -Infinity;\n                    }\n                    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bounds);\n                }\n                truncatedBins.sort(binsSort);\n                // remove redundant splits\n                let splitCount = count;\n                for(let bi = 0; bi < splitCount; bi++){\n                    const bin = truncatedBins[bi];\n                    while(bi + 1 < splitCount && truncatedBins[bi + 1].candidate === bin.candidate){\n                        truncatedBins.splice(bi + 1, 1);\n                        splitCount--;\n                    }\n                }\n                // find the appropriate bin for each triangle and expand the bounds.\n                for(let c = cStart; c < cEnd; c += 6){\n                    const center = triangleBounds[c + 2 * a];\n                    for(let bi = 0; bi < splitCount; bi++){\n                        const bin = truncatedBins[bi];\n                        if (center >= bin.candidate) {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bin.rightCacheBounds);\n                        } else {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bin.leftCacheBounds);\n                            bin.count++;\n                        }\n                    }\n                }\n                // expand all the bounds\n                for(let bi = 0; bi < splitCount; bi++){\n                    const bin = truncatedBins[bi];\n                    const leftCount = bin.count;\n                    const rightCount = count - bin.count;\n                    // check the cost of this split\n                    const leftBounds = bin.leftCacheBounds;\n                    const rightBounds = bin.rightCacheBounds;\n                    let leftProb = 0;\n                    if (leftCount !== 0) {\n                        leftProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(leftBounds) / rootSurfaceArea;\n                    }\n                    let rightProb = 0;\n                    if (rightCount !== 0) {\n                        rightProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(rightBounds) / rootSurfaceArea;\n                    }\n                    const cost = _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRAVERSAL_COST + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n                    if (cost < bestCost) {\n                        axis = a;\n                        bestCost = cost;\n                        pos = bin.candidate;\n                    }\n                }\n            } else {\n                // reset the bins\n                for(let i = 0; i < BIN_COUNT; i++){\n                    const bin = sahBins[i];\n                    bin.count = 0;\n                    bin.candidate = axisLeft + binWidth + i * binWidth;\n                    const bounds = bin.bounds;\n                    for(let d = 0; d < 3; d++){\n                        bounds[d] = Infinity;\n                        bounds[d + 3] = -Infinity;\n                    }\n                }\n                // iterate over all center positions\n                for(let c = cStart; c < cEnd; c += 6){\n                    const triCenter = triangleBounds[c + 2 * a];\n                    const relativeCenter = triCenter - axisLeft;\n                    // in the partition function if the centroid lies on the split plane then it is\n                    // considered to be on the right side of the split\n                    let binIndex = ~~(relativeCenter / binWidth);\n                    if (binIndex >= BIN_COUNT) binIndex = BIN_COUNT - 1;\n                    const bin = sahBins[binIndex];\n                    bin.count++;\n                    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.expandByTriangleBounds)(c, triangleBounds, bin.bounds);\n                }\n                // cache the unioned bounds from right to left so we don't have to regenerate them each time\n                const lastBin = sahBins[BIN_COUNT - 1];\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.copyBounds)(lastBin.bounds, lastBin.rightCacheBounds);\n                for(let i = BIN_COUNT - 2; i >= 0; i--){\n                    const bin = sahBins[i];\n                    const nextBin = sahBins[i + 1];\n                    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.unionBounds)(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);\n                }\n                let leftCount = 0;\n                for(let i = 0; i < BIN_COUNT - 1; i++){\n                    const bin = sahBins[i];\n                    const binCount = bin.count;\n                    const bounds = bin.bounds;\n                    const nextBin = sahBins[i + 1];\n                    const rightBounds = nextBin.rightCacheBounds;\n                    // don't do anything with the bounds if the new bounds have no triangles\n                    if (binCount !== 0) {\n                        if (leftCount === 0) {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.copyBounds)(bounds, leftBounds);\n                        } else {\n                            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.unionBounds)(bounds, leftBounds, leftBounds);\n                        }\n                    }\n                    leftCount += binCount;\n                    // check the cost of this split\n                    let leftProb = 0;\n                    let rightProb = 0;\n                    if (leftCount !== 0) {\n                        leftProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(leftBounds) / rootSurfaceArea;\n                    }\n                    const rightCount = count - leftCount;\n                    if (rightCount !== 0) {\n                        rightProb = (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.computeSurfaceArea)(rightBounds) / rootSurfaceArea;\n                    }\n                    const cost = _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRAVERSAL_COST + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n                    if (cost < bestCost) {\n                        axis = a;\n                        bestCost = cost;\n                        pos = bin.candidate;\n                    }\n                }\n            }\n        }\n    } else {\n        console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);\n    }\n    return {\n        axis,\n        pos\n    };\n}\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage(triangleBounds, offset, count, axis) {\n    let avg = 0;\n    for(let i = offset, end = offset + count; i < end; i++){\n        avg += triangleBounds[i * 6 + axis * 2];\n    }\n    return avg / count;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/splitUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/bvhcast.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/bvhcast.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bvhcast: () => (/* binding */ bvhcast)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/PrimitivePool.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\");\n\n\n\n\n\nconst _bufferStack1 = new _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_0__.BufferStack.constructor();\nconst _bufferStack2 = new _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_0__.BufferStack.constructor();\nconst _boxPool = new _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_1__.PrimitivePool(()=>new three__WEBPACK_IMPORTED_MODULE_2__.Box3());\nconst _leftBox1 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nconst _rightBox1 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nconst _leftBox2 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nconst _rightBox2 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3();\nlet _active = false;\nfunction bvhcast(bvh, otherBvh, matrixToLocal, intersectsRanges) {\n    if (_active) {\n        throw new Error(\"MeshBVH: Recursive calls to bvhcast not supported.\");\n    }\n    _active = true;\n    const roots = bvh._roots;\n    const otherRoots = otherBvh._roots;\n    let result;\n    let offset1 = 0;\n    let offset2 = 0;\n    const invMat = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4().copy(matrixToLocal).invert();\n    // iterate over the first set of roots\n    for(let i = 0, il = roots.length; i < il; i++){\n        _bufferStack1.setBuffer(roots[i]);\n        offset2 = 0;\n        // prep the initial root box\n        const localBox = _boxPool.getPrimitive();\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(0), _bufferStack1.float32Array, localBox);\n        localBox.applyMatrix4(invMat);\n        // iterate over the second set of roots\n        for(let j = 0, jl = otherRoots.length; j < jl; j++){\n            _bufferStack2.setBuffer(otherRoots[i]);\n            result = _traverse(0, 0, matrixToLocal, invMat, intersectsRanges, offset1, offset2, 0, 0, localBox);\n            _bufferStack2.clearBuffer();\n            offset2 += otherRoots[j].length;\n            if (result) {\n                break;\n            }\n        }\n        // release stack info\n        _boxPool.releasePrimitive(localBox);\n        _bufferStack1.clearBuffer();\n        offset1 += roots[i].length;\n        if (result) {\n            break;\n        }\n    }\n    _active = false;\n    return result;\n}\nfunction _traverse(node1Index32, node2Index32, matrix2to1, matrix1to2, intersectsRangesFunc, // offsets for ids\nnode1IndexByteOffset = 0, node2IndexByteOffset = 0, // tree depth\ndepth1 = 0, depth2 = 0, currBox = null, reversed = false) {\n    // get the buffer stacks associated with the current indices\n    let bufferStack1, bufferStack2;\n    if (reversed) {\n        bufferStack1 = _bufferStack2;\n        bufferStack2 = _bufferStack1;\n    } else {\n        bufferStack1 = _bufferStack1;\n        bufferStack2 = _bufferStack2;\n    }\n    // get the local instances of the typed buffers\n    const float32Array1 = bufferStack1.float32Array, uint32Array1 = bufferStack1.uint32Array, uint16Array1 = bufferStack1.uint16Array, float32Array2 = bufferStack2.float32Array, uint32Array2 = bufferStack2.uint32Array, uint16Array2 = bufferStack2.uint16Array;\n    const node1Index16 = node1Index32 * 2;\n    const node2Index16 = node2Index32 * 2;\n    const isLeaf1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(node1Index16, uint16Array1);\n    const isLeaf2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(node2Index16, uint16Array2);\n    let result = false;\n    if (isLeaf2 && isLeaf1) {\n        // if both bounds are leaf nodes then fire the callback if the boxes intersect\n        if (reversed) {\n            result = intersectsRangesFunc((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node2Index32, uint32Array2), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node2Index32 * 2, uint16Array2), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node1Index32, uint32Array1), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node1Index32 * 2, uint16Array1), depth2, node2IndexByteOffset + node2Index32, depth1, node1IndexByteOffset + node1Index32);\n        } else {\n            result = intersectsRangesFunc((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node1Index32, uint32Array1), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node1Index32 * 2, uint16Array1), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(node2Index32, uint32Array2), (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(node2Index32 * 2, uint16Array2), depth1, node1IndexByteOffset + node1Index32, depth2, node2IndexByteOffset + node2Index32);\n        }\n    } else if (isLeaf2) {\n        // SWAP\n        // If we've traversed to the leaf node on the other bvh then we need to swap over\n        // to traverse down the first one\n        // get the new box to use\n        const newBox = _boxPool.getPrimitive();\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(node2Index32), float32Array2, newBox);\n        newBox.applyMatrix4(matrix2to1);\n        // get the child bounds to check before traversal\n        const cl1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node1Index32);\n        const cr1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node1Index32, uint32Array1);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl1), float32Array1, _leftBox1);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr1), float32Array1, _rightBox1);\n        // precompute the intersections otherwise the global boxes will be modified during traversal\n        const intersectCl1 = newBox.intersectsBox(_leftBox1);\n        const intersectCr1 = newBox.intersectsBox(_rightBox1);\n        result = intersectCl1 && _traverse(node2Index32, cl1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed) || intersectCr1 && _traverse(node2Index32, cr1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed);\n        _boxPool.releasePrimitive(newBox);\n    } else {\n        // if neither are leaves then we should swap if one of the children does not\n        // intersect with the current bounds\n        // get the child bounds to check\n        const cl2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node2Index32);\n        const cr2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node2Index32, uint32Array2);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl2), float32Array2, _leftBox2);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr2), float32Array2, _rightBox2);\n        const leftIntersects = currBox.intersectsBox(_leftBox2);\n        const rightIntersects = currBox.intersectsBox(_rightBox2);\n        if (leftIntersects && rightIntersects) {\n            // continue to traverse both children if they both intersect\n            result = _traverse(node1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed) || _traverse(node1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed);\n        } else if (leftIntersects) {\n            if (isLeaf1) {\n                // if the current box is a leaf then just continue\n                result = _traverse(node1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed);\n            } else {\n                // SWAP\n                // if only one box intersects then we have to swap to the other bvh to continue\n                const newBox = _boxPool.getPrimitive();\n                newBox.copy(_leftBox2).applyMatrix4(matrix2to1);\n                const cl1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node1Index32);\n                const cr1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node1Index32, uint32Array1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl1), float32Array1, _leftBox1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr1), float32Array1, _rightBox1);\n                // precompute the intersections otherwise the global boxes will be modified during traversal\n                const intersectCl1 = newBox.intersectsBox(_leftBox1);\n                const intersectCr1 = newBox.intersectsBox(_rightBox1);\n                result = intersectCl1 && _traverse(cl2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed) || intersectCr1 && _traverse(cl2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed);\n                _boxPool.releasePrimitive(newBox);\n            }\n        } else if (rightIntersects) {\n            if (isLeaf1) {\n                // if the current box is a leaf then just continue\n                result = _traverse(node1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc, node1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1, currBox, reversed);\n            } else {\n                // SWAP\n                // if only one box intersects then we have to swap to the other bvh to continue\n                const newBox = _boxPool.getPrimitive();\n                newBox.copy(_rightBox2).applyMatrix4(matrix2to1);\n                const cl1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.LEFT_NODE)(node1Index32);\n                const cr1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.RIGHT_NODE)(node1Index32, uint32Array1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cl1), float32Array1, _leftBox1);\n                (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_3__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(cr1), float32Array1, _rightBox1);\n                // precompute the intersections otherwise the global boxes will be modified during traversal\n                const intersectCl1 = newBox.intersectsBox(_leftBox1);\n                const intersectCr1 = newBox.intersectsBox(_rightBox1);\n                result = intersectCl1 && _traverse(cr2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed) || intersectCr1 && _traverse(cr2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc, node2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1, newBox, !reversed);\n                _boxPool.releasePrimitive(newBox);\n            }\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/bvhcast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointToGeometry: () => (/* binding */ closestPointToGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../build/geometryUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n/* harmony import */ var _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ExtendedTrianglePool.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\");\n\n\n\n\n\n/*********************************************************************/ /* This file is generated from \"closestPointToGeometry.template.js\". */ /*********************************************************************/ const tempMatrix = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst temp1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp4 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction closestPointToGeometry(bvh, otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n    if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n    }\n    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n    obb.needsUpdate = true;\n    const geometry = bvh.geometry;\n    const pos = geometry.attributes.position;\n    const index = geometry.index;\n    const otherPos = otherGeometry.attributes.position;\n    const otherIndex = otherGeometry.index;\n    const triangle = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    const triangle2 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    let tempTarget1 = temp1;\n    let tempTargetDest1 = temp2;\n    let tempTarget2 = null;\n    let tempTargetDest2 = null;\n    if (target2) {\n        tempTarget2 = temp3;\n        tempTargetDest2 = temp4;\n    }\n    let closestDistance = Infinity;\n    let closestDistanceTriIndex = null;\n    let closestDistanceOtherTriIndex = null;\n    tempMatrix.copy(geometryToBvh).invert();\n    obb2.matrix.copy(tempMatrix);\n    bvh.shapecast({\n        boundsTraverseOrder: (box)=>{\n            return obb.distanceToBox(box);\n        },\n        intersectsBounds: (box, isLeaf, score)=>{\n            if (score < closestDistance && score < maxThreshold) {\n                // if we know the triangles of this bounds will be intersected next then\n                // save the bounds to use during triangle checks.\n                if (isLeaf) {\n                    obb2.min.copy(box.min);\n                    obb2.max.copy(box.max);\n                    obb2.needsUpdate = true;\n                }\n                return true;\n            }\n            return false;\n        },\n        intersectsRange: (offset, count)=>{\n            if (otherGeometry.boundsTree) {\n                // if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n                // the closest bounds in the other geometry to check.\n                const otherBvh = otherGeometry.boundsTree;\n                return otherBvh.shapecast({\n                    boundsTraverseOrder: (box)=>{\n                        return obb2.distanceToBox(box);\n                    },\n                    intersectsBounds: (box, isLeaf, score)=>{\n                        return score < closestDistance && score < maxThreshold;\n                    },\n                    intersectsRange: (otherOffset, otherCount)=>{\n                        for(let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2++){\n                            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * i2, otherIndex, otherPos);\n                            triangle2.a.applyMatrix4(geometryToBvh);\n                            triangle2.b.applyMatrix4(geometryToBvh);\n                            triangle2.c.applyMatrix4(geometryToBvh);\n                            triangle2.needsUpdate = true;\n                            for(let i = offset, l = offset + count; i < l; i++){\n                                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * i, index, pos);\n                                triangle.needsUpdate = true;\n                                const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                                if (dist < closestDistance) {\n                                    tempTargetDest1.copy(tempTarget1);\n                                    if (tempTargetDest2) {\n                                        tempTargetDest2.copy(tempTarget2);\n                                    }\n                                    closestDistance = dist;\n                                    closestDistanceTriIndex = i;\n                                    closestDistanceOtherTriIndex = i2;\n                                }\n                                // stop traversal if we find a point that's under the given threshold\n                                if (dist < minThreshold) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                });\n            } else {\n                // If no bounds tree then we'll just check every triangle.\n                const triCount = (0,_build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTriCount)(otherGeometry);\n                for(let i2 = 0, l2 = triCount; i2 < l2; i2++){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * i2, otherIndex, otherPos);\n                    triangle2.a.applyMatrix4(geometryToBvh);\n                    triangle2.b.applyMatrix4(geometryToBvh);\n                    triangle2.c.applyMatrix4(geometryToBvh);\n                    triangle2.needsUpdate = true;\n                    for(let i = offset, l = offset + count; i < l; i++){\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * i, index, pos);\n                        triangle.needsUpdate = true;\n                        const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                        if (dist < closestDistance) {\n                            tempTargetDest1.copy(tempTarget1);\n                            if (tempTargetDest2) {\n                                tempTargetDest2.copy(tempTarget2);\n                            }\n                            closestDistance = dist;\n                            closestDistanceTriIndex = i;\n                            closestDistanceOtherTriIndex = i2;\n                        }\n                        // stop traversal if we find a point that's under the given threshold\n                        if (dist < minThreshold) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    });\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle);\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle2);\n    if (closestDistance === Infinity) {\n        return null;\n    }\n    if (!target1.point) {\n        target1.point = tempTargetDest1.clone();\n    } else {\n        target1.point.copy(tempTargetDest1);\n    }\n    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n    if (target2) {\n        if (!target2.point) target2.point = tempTargetDest2.clone();\n        else target2.point.copy(tempTargetDest2);\n        target2.point.applyMatrix4(tempMatrix);\n        tempTargetDest1.applyMatrix4(tempMatrix);\n        target2.distance = tempTargetDest1.sub(target2.point).length();\n        target2.faceIndex = closestDistanceOtherTriIndex;\n    }\n    return target1;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointToGeometry_indirect: () => (/* binding */ closestPointToGeometry_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../build/geometryUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/build/geometryUtils.js\");\n/* harmony import */ var _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ExtendedTrianglePool.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\");\n\n\n\n\n\n/*********************************************************************/ /* This file is generated from \"closestPointToGeometry.template.js\". */ /*********************************************************************/ const tempMatrix = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_1__.OrientedBox();\nconst temp1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp4 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction closestPointToGeometry_indirect(bvh, otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {\n    if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n    }\n    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n    obb.needsUpdate = true;\n    const geometry = bvh.geometry;\n    const pos = geometry.attributes.position;\n    const index = geometry.index;\n    const otherPos = otherGeometry.attributes.position;\n    const otherIndex = otherGeometry.index;\n    const triangle = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    const triangle2 = _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.getPrimitive();\n    let tempTarget1 = temp1;\n    let tempTargetDest1 = temp2;\n    let tempTarget2 = null;\n    let tempTargetDest2 = null;\n    if (target2) {\n        tempTarget2 = temp3;\n        tempTargetDest2 = temp4;\n    }\n    let closestDistance = Infinity;\n    let closestDistanceTriIndex = null;\n    let closestDistanceOtherTriIndex = null;\n    tempMatrix.copy(geometryToBvh).invert();\n    obb2.matrix.copy(tempMatrix);\n    bvh.shapecast({\n        boundsTraverseOrder: (box)=>{\n            return obb.distanceToBox(box);\n        },\n        intersectsBounds: (box, isLeaf, score)=>{\n            if (score < closestDistance && score < maxThreshold) {\n                // if we know the triangles of this bounds will be intersected next then\n                // save the bounds to use during triangle checks.\n                if (isLeaf) {\n                    obb2.min.copy(box.min);\n                    obb2.max.copy(box.max);\n                    obb2.needsUpdate = true;\n                }\n                return true;\n            }\n            return false;\n        },\n        intersectsRange: (offset, count)=>{\n            if (otherGeometry.boundsTree) {\n                // if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n                // the closest bounds in the other geometry to check.\n                const otherBvh = otherGeometry.boundsTree;\n                return otherBvh.shapecast({\n                    boundsTraverseOrder: (box)=>{\n                        return obb2.distanceToBox(box);\n                    },\n                    intersectsBounds: (box, isLeaf, score)=>{\n                        return score < closestDistance && score < maxThreshold;\n                    },\n                    intersectsRange: (otherOffset, otherCount)=>{\n                        for(let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2++){\n                            const ti2 = otherBvh.resolveTriangleIndex(i2);\n                            (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * ti2, otherIndex, otherPos);\n                            triangle2.a.applyMatrix4(geometryToBvh);\n                            triangle2.b.applyMatrix4(geometryToBvh);\n                            triangle2.c.applyMatrix4(geometryToBvh);\n                            triangle2.needsUpdate = true;\n                            for(let i = offset, l = offset + count; i < l; i++){\n                                const ti = bvh.resolveTriangleIndex(i);\n                                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * ti, index, pos);\n                                triangle.needsUpdate = true;\n                                const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                                if (dist < closestDistance) {\n                                    tempTargetDest1.copy(tempTarget1);\n                                    if (tempTargetDest2) {\n                                        tempTargetDest2.copy(tempTarget2);\n                                    }\n                                    closestDistance = dist;\n                                    closestDistanceTriIndex = i;\n                                    closestDistanceOtherTriIndex = i2;\n                                }\n                                // stop traversal if we find a point that's under the given threshold\n                                if (dist < minThreshold) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                });\n            } else {\n                // If no bounds tree then we'll just check every triangle.\n                const triCount = (0,_build_geometryUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTriCount)(otherGeometry);\n                for(let i2 = 0, l2 = triCount; i2 < l2; i2++){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle2, 3 * i2, otherIndex, otherPos);\n                    triangle2.a.applyMatrix4(geometryToBvh);\n                    triangle2.b.applyMatrix4(geometryToBvh);\n                    triangle2.c.applyMatrix4(geometryToBvh);\n                    triangle2.needsUpdate = true;\n                    for(let i = offset, l = offset + count; i < l; i++){\n                        const ti = bvh.resolveTriangleIndex(i);\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_3__.setTriangle)(triangle, 3 * ti, index, pos);\n                        triangle.needsUpdate = true;\n                        const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n                        if (dist < closestDistance) {\n                            tempTargetDest1.copy(tempTarget1);\n                            if (tempTargetDest2) {\n                                tempTargetDest2.copy(tempTarget2);\n                            }\n                            closestDistance = dist;\n                            closestDistanceTriIndex = i;\n                            closestDistanceOtherTriIndex = i2;\n                        }\n                        // stop traversal if we find a point that's under the given threshold\n                        if (dist < minThreshold) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    });\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle);\n    _utils_ExtendedTrianglePool_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTrianglePool.releasePrimitive(triangle2);\n    if (closestDistance === Infinity) {\n        return null;\n    }\n    if (!target1.point) {\n        target1.point = tempTargetDest1.clone();\n    } else {\n        target1.point.copy(tempTargetDest1);\n    }\n    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n    if (target2) {\n        if (!target2.point) target2.point = tempTargetDest2.clone();\n        else target2.point.copy(tempTargetDest2);\n        target2.point.applyMatrix4(tempMatrix);\n        tempTargetDest1.applyMatrix4(tempMatrix);\n        target2.distance = tempTargetDest1.sub(target2.point).length();\n        target2.faceIndex = closestDistanceOtherTriIndex;\n    }\n    return target1;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvY2xvc2VzdFBvaW50VG9HZW9tZXRyeV9pbmRpcmVjdC5nZW5lcmF0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlDO0FBQ2U7QUFDTztBQUNQO0FBQ21CO0FBRTNFLHFFQUFxRSxHQUNyRSxxRUFBcUUsR0FDckUscUVBQXFFLEdBRXJFLE1BQU1NLGFBQWEsYUFBYSxHQUFHLElBQUlOLDBDQUFPQTtBQUM5QyxNQUFNTyxNQUFNLGFBQWEsR0FBRyxJQUFJTCw2REFBV0E7QUFDM0MsTUFBTU0sT0FBTyxhQUFhLEdBQUcsSUFBSU4sNkRBQVdBO0FBQzVDLE1BQU1PLFFBQVEsYUFBYSxHQUFHLElBQUlSLDBDQUFPQTtBQUN6QyxNQUFNUyxRQUFRLGFBQWEsR0FBRyxJQUFJVCwwQ0FBT0E7QUFDekMsTUFBTVUsUUFBUSxhQUFhLEdBQUcsSUFBSVYsMENBQU9BO0FBQ3pDLE1BQU1XLFFBQVEsYUFBYSxHQUFHLElBQUlYLDBDQUFPQTtBQUV6QyxTQUFTWSxnQ0FDUkMsR0FBRyxFQUNIQyxhQUFhLEVBQ2JDLGFBQWEsRUFDYkMsVUFBVSxDQUFFLENBQUMsRUFDYkMsVUFBVSxDQUFFLENBQUMsRUFDYkMsZUFBZSxDQUFDLEVBQ2hCQyxlQUFlQyxRQUFRO0lBR3ZCLElBQUssQ0FBRU4sY0FBY08sV0FBVyxFQUFHO1FBRWxDUCxjQUFjUSxrQkFBa0I7SUFFakM7SUFFQWhCLElBQUlpQixHQUFHLENBQUVULGNBQWNPLFdBQVcsQ0FBQ0csR0FBRyxFQUFFVixjQUFjTyxXQUFXLENBQUNJLEdBQUcsRUFBRVY7SUFDdkVULElBQUlvQixXQUFXLEdBQUc7SUFFbEIsTUFBTUMsV0FBV2QsSUFBSWMsUUFBUTtJQUM3QixNQUFNQyxNQUFNRCxTQUFTRSxVQUFVLENBQUNDLFFBQVE7SUFDeEMsTUFBTUMsUUFBUUosU0FBU0ksS0FBSztJQUM1QixNQUFNQyxXQUFXbEIsY0FBY2UsVUFBVSxDQUFDQyxRQUFRO0lBQ2xELE1BQU1HLGFBQWFuQixjQUFjaUIsS0FBSztJQUN0QyxNQUFNRyxXQUFXOUIsZ0ZBQW9CQSxDQUFDK0IsWUFBWTtJQUNsRCxNQUFNQyxZQUFZaEMsZ0ZBQW9CQSxDQUFDK0IsWUFBWTtJQUVuRCxJQUFJRSxjQUFjN0I7SUFDbEIsSUFBSThCLGtCQUFrQjdCO0lBQ3RCLElBQUk4QixjQUFjO0lBQ2xCLElBQUlDLGtCQUFrQjtJQUV0QixJQUFLdkIsU0FBVTtRQUVkc0IsY0FBYzdCO1FBQ2Q4QixrQkFBa0I3QjtJQUVuQjtJQUVBLElBQUk4QixrQkFBa0JyQjtJQUN0QixJQUFJc0IsMEJBQTBCO0lBQzlCLElBQUlDLCtCQUErQjtJQUNuQ3RDLFdBQVd1QyxJQUFJLENBQUU3QixlQUFnQjhCLE1BQU07SUFDdkN0QyxLQUFLdUMsTUFBTSxDQUFDRixJQUFJLENBQUV2QztJQUNsQlEsSUFBSWtDLFNBQVMsQ0FDWjtRQUVDQyxxQkFBcUJDLENBQUFBO1lBRXBCLE9BQU8zQyxJQUFJNEMsYUFBYSxDQUFFRDtRQUUzQjtRQUVBRSxrQkFBa0IsQ0FBRUYsS0FBS0csUUFBUUM7WUFFaEMsSUFBS0EsUUFBUVosbUJBQW1CWSxRQUFRbEMsY0FBZTtnQkFFdEQsd0VBQXdFO2dCQUN4RSxpREFBaUQ7Z0JBQ2pELElBQUtpQyxRQUFTO29CQUViN0MsS0FBS2lCLEdBQUcsQ0FBQ29CLElBQUksQ0FBRUssSUFBSXpCLEdBQUc7b0JBQ3RCakIsS0FBS2tCLEdBQUcsQ0FBQ21CLElBQUksQ0FBRUssSUFBSXhCLEdBQUc7b0JBQ3RCbEIsS0FBS21CLFdBQVcsR0FBRztnQkFFcEI7Z0JBRUEsT0FBTztZQUVSO1lBRUEsT0FBTztRQUVSO1FBRUE0QixpQkFBaUIsQ0FBRUMsUUFBUUM7WUFFMUIsSUFBSzFDLGNBQWMyQyxVQUFVLEVBQUc7Z0JBRS9CLCtGQUErRjtnQkFDL0YscURBQXFEO2dCQUNyRCxNQUFNQyxXQUFXNUMsY0FBYzJDLFVBQVU7Z0JBQ3pDLE9BQU9DLFNBQVNYLFNBQVMsQ0FBRTtvQkFDMUJDLHFCQUFxQkMsQ0FBQUE7d0JBRXBCLE9BQU8xQyxLQUFLMkMsYUFBYSxDQUFFRDtvQkFFNUI7b0JBRUFFLGtCQUFrQixDQUFFRixLQUFLRyxRQUFRQzt3QkFFaEMsT0FBT0EsUUFBUVosbUJBQW1CWSxRQUFRbEM7b0JBRTNDO29CQUVBbUMsaUJBQWlCLENBQUVLLGFBQWFDO3dCQUUvQixJQUFNLElBQUlDLEtBQUtGLGFBQWFHLEtBQUtILGNBQWNDLFlBQVlDLEtBQUtDLElBQUlELEtBQVE7NEJBRTNFLE1BQU1FLE1BQU1MLFNBQVNNLG9CQUFvQixDQUFFSDs0QkFDM0MzRCx3RUFBV0EsQ0FBRWtDLFdBQVcsSUFBSTJCLEtBQUs5QixZQUFZRDs0QkFFN0NJLFVBQVU2QixDQUFDLENBQUNDLFlBQVksQ0FBRW5EOzRCQUMxQnFCLFVBQVUrQixDQUFDLENBQUNELFlBQVksQ0FBRW5EOzRCQUMxQnFCLFVBQVVnQyxDQUFDLENBQUNGLFlBQVksQ0FBRW5EOzRCQUMxQnFCLFVBQVVWLFdBQVcsR0FBRzs0QkFFeEIsSUFBTSxJQUFJMkMsSUFBSWQsUUFBUWUsSUFBSWYsU0FBU0MsT0FBT2EsSUFBSUMsR0FBR0QsSUFBTztnQ0FFdkQsTUFBTUUsS0FBSzFELElBQUltRCxvQkFBb0IsQ0FBRUs7Z0NBQ3JDbkUsd0VBQVdBLENBQUVnQyxVQUFVLElBQUlxQyxJQUFJeEMsT0FBT0g7Z0NBRXRDTSxTQUFTUixXQUFXLEdBQUc7Z0NBRXZCLE1BQU04QyxPQUFPdEMsU0FBU3VDLGtCQUFrQixDQUFFckMsV0FBV0MsYUFBYUU7Z0NBQ2xFLElBQUtpQyxPQUFPL0IsaUJBQWtCO29DQUU3QkgsZ0JBQWdCTSxJQUFJLENBQUVQO29DQUV0QixJQUFLRyxpQkFBa0I7d0NBRXRCQSxnQkFBZ0JJLElBQUksQ0FBRUw7b0NBRXZCO29DQUVBRSxrQkFBa0IrQjtvQ0FDbEI5QiwwQkFBMEIyQjtvQ0FDMUIxQiwrQkFBK0JrQjtnQ0FFaEM7Z0NBRUEscUVBQXFFO2dDQUNyRSxJQUFLVyxPQUFPdEQsY0FBZTtvQ0FFMUIsT0FBTztnQ0FFUjs0QkFFRDt3QkFFRDtvQkFFRDtnQkFDRDtZQUVELE9BQU87Z0JBRU4sMERBQTBEO2dCQUMxRCxNQUFNd0QsV0FBV3ZFLG9FQUFXQSxDQUFFVztnQkFDOUIsSUFBTSxJQUFJK0MsS0FBSyxHQUFHQyxLQUFLWSxVQUFVYixLQUFLQyxJQUFJRCxLQUFRO29CQUVqRDNELHdFQUFXQSxDQUFFa0MsV0FBVyxJQUFJeUIsSUFBSTVCLFlBQVlEO29CQUM1Q0ksVUFBVTZCLENBQUMsQ0FBQ0MsWUFBWSxDQUFFbkQ7b0JBQzFCcUIsVUFBVStCLENBQUMsQ0FBQ0QsWUFBWSxDQUFFbkQ7b0JBQzFCcUIsVUFBVWdDLENBQUMsQ0FBQ0YsWUFBWSxDQUFFbkQ7b0JBQzFCcUIsVUFBVVYsV0FBVyxHQUFHO29CQUV4QixJQUFNLElBQUkyQyxJQUFJZCxRQUFRZSxJQUFJZixTQUFTQyxPQUFPYSxJQUFJQyxHQUFHRCxJQUFPO3dCQUV2RCxNQUFNRSxLQUFLMUQsSUFBSW1ELG9CQUFvQixDQUFFSzt3QkFDckNuRSx3RUFBV0EsQ0FBRWdDLFVBQVUsSUFBSXFDLElBQUl4QyxPQUFPSDt3QkFFdENNLFNBQVNSLFdBQVcsR0FBRzt3QkFFdkIsTUFBTThDLE9BQU90QyxTQUFTdUMsa0JBQWtCLENBQUVyQyxXQUFXQyxhQUFhRTt3QkFDbEUsSUFBS2lDLE9BQU8vQixpQkFBa0I7NEJBRTdCSCxnQkFBZ0JNLElBQUksQ0FBRVA7NEJBRXRCLElBQUtHLGlCQUFrQjtnQ0FFdEJBLGdCQUFnQkksSUFBSSxDQUFFTDs0QkFFdkI7NEJBRUFFLGtCQUFrQitCOzRCQUNsQjlCLDBCQUEwQjJCOzRCQUMxQjFCLCtCQUErQmtCO3dCQUVoQzt3QkFFQSxxRUFBcUU7d0JBQ3JFLElBQUtXLE9BQU90RCxjQUFlOzRCQUUxQixPQUFPO3dCQUVSO29CQUVEO2dCQUVEO1lBRUQ7UUFFRDtJQUVEO0lBSURkLGdGQUFvQkEsQ0FBQ3VFLGdCQUFnQixDQUFFekM7SUFDdkM5QixnRkFBb0JBLENBQUN1RSxnQkFBZ0IsQ0FBRXZDO0lBRXZDLElBQUtLLG9CQUFvQnJCLFVBQVc7UUFFbkMsT0FBTztJQUVSO0lBRUEsSUFBSyxDQUFFSixRQUFRNEQsS0FBSyxFQUFHO1FBRXRCNUQsUUFBUTRELEtBQUssR0FBR3RDLGdCQUFnQnVDLEtBQUs7SUFFdEMsT0FBTztRQUVON0QsUUFBUTRELEtBQUssQ0FBQ2hDLElBQUksQ0FBRU47SUFFckI7SUFFQXRCLFFBQVE4RCxRQUFRLEdBQUdyQyxpQkFDbkJ6QixRQUFRK0QsU0FBUyxHQUFHckM7SUFFcEIsSUFBS3pCLFNBQVU7UUFFZCxJQUFLLENBQUVBLFFBQVEyRCxLQUFLLEVBQUczRCxRQUFRMkQsS0FBSyxHQUFHcEMsZ0JBQWdCcUMsS0FBSzthQUN2RDVELFFBQVEyRCxLQUFLLENBQUNoQyxJQUFJLENBQUVKO1FBQ3pCdkIsUUFBUTJELEtBQUssQ0FBQ1YsWUFBWSxDQUFFN0Q7UUFDNUJpQyxnQkFBZ0I0QixZQUFZLENBQUU3RDtRQUM5QlksUUFBUTZELFFBQVEsR0FBR3hDLGdCQUFnQjBDLEdBQUcsQ0FBRS9ELFFBQVEyRCxLQUFLLEVBQUdLLE1BQU07UUFDOURoRSxRQUFROEQsU0FBUyxHQUFHcEM7SUFFckI7SUFFQSxPQUFPM0I7QUFFUjtBQUUyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9jbG9zZXN0UG9pbnRUb0dlb21ldHJ5X2luZGlyZWN0LmdlbmVyYXRlZC5qcz9mNTczIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdHJpeDQsIFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBPcmllbnRlZEJveCB9IGZyb20gJy4uLy4uL21hdGgvT3JpZW50ZWRCb3guanMnO1xuaW1wb3J0IHsgc2V0VHJpYW5nbGUgfSBmcm9tICcuLi8uLi91dGlscy9UcmlhbmdsZVV0aWxpdGllcy5qcyc7XG5pbXBvcnQgeyBnZXRUcmlDb3VudCB9IGZyb20gJy4uL2J1aWxkL2dlb21ldHJ5VXRpbHMuanMnO1xuaW1wb3J0IHsgRXh0ZW5kZWRUcmlhbmdsZVBvb2wgfSBmcm9tICcuLi8uLi91dGlscy9FeHRlbmRlZFRyaWFuZ2xlUG9vbC5qcyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGZyb20gXCJjbG9zZXN0UG9pbnRUb0dlb21ldHJ5LnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCB0ZW1wTWF0cml4ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBvYmIgPSAvKiBAX19QVVJFX18gKi8gbmV3IE9yaWVudGVkQm94KCk7XG5jb25zdCBvYmIyID0gLyogQF9fUFVSRV9fICovIG5ldyBPcmllbnRlZEJveCgpO1xuY29uc3QgdGVtcDEgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IHRlbXAyID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCB0ZW1wMyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgdGVtcDQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gY2xvc2VzdFBvaW50VG9HZW9tZXRyeV9pbmRpcmVjdChcblx0YnZoLFxuXHRvdGhlckdlb21ldHJ5LFxuXHRnZW9tZXRyeVRvQnZoLFxuXHR0YXJnZXQxID0geyB9LFxuXHR0YXJnZXQyID0geyB9LFxuXHRtaW5UaHJlc2hvbGQgPSAwLFxuXHRtYXhUaHJlc2hvbGQgPSBJbmZpbml0eSxcbikge1xuXG5cdGlmICggISBvdGhlckdlb21ldHJ5LmJvdW5kaW5nQm94ICkge1xuXG5cdFx0b3RoZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHR9XG5cblx0b2JiLnNldCggb3RoZXJHZW9tZXRyeS5ib3VuZGluZ0JveC5taW4sIG90aGVyR2VvbWV0cnkuYm91bmRpbmdCb3gubWF4LCBnZW9tZXRyeVRvQnZoICk7XG5cdG9iYi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0Y29uc3QgZ2VvbWV0cnkgPSBidmguZ2VvbWV0cnk7XG5cdGNvbnN0IHBvcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdGNvbnN0IG90aGVyUG9zID0gb3RoZXJHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRjb25zdCBvdGhlckluZGV4ID0gb3RoZXJHZW9tZXRyeS5pbmRleDtcblx0Y29uc3QgdHJpYW5nbGUgPSBFeHRlbmRlZFRyaWFuZ2xlUG9vbC5nZXRQcmltaXRpdmUoKTtcblx0Y29uc3QgdHJpYW5nbGUyID0gRXh0ZW5kZWRUcmlhbmdsZVBvb2wuZ2V0UHJpbWl0aXZlKCk7XG5cblx0bGV0IHRlbXBUYXJnZXQxID0gdGVtcDE7XG5cdGxldCB0ZW1wVGFyZ2V0RGVzdDEgPSB0ZW1wMjtcblx0bGV0IHRlbXBUYXJnZXQyID0gbnVsbDtcblx0bGV0IHRlbXBUYXJnZXREZXN0MiA9IG51bGw7XG5cblx0aWYgKCB0YXJnZXQyICkge1xuXG5cdFx0dGVtcFRhcmdldDIgPSB0ZW1wMztcblx0XHR0ZW1wVGFyZ2V0RGVzdDIgPSB0ZW1wNDtcblxuXHR9XG5cblx0bGV0IGNsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuXHRsZXQgY2xvc2VzdERpc3RhbmNlVHJpSW5kZXggPSBudWxsO1xuXHRsZXQgY2xvc2VzdERpc3RhbmNlT3RoZXJUcmlJbmRleCA9IG51bGw7XG5cdHRlbXBNYXRyaXguY29weSggZ2VvbWV0cnlUb0J2aCApLmludmVydCgpO1xuXHRvYmIyLm1hdHJpeC5jb3B5KCB0ZW1wTWF0cml4ICk7XG5cdGJ2aC5zaGFwZWNhc3QoXG5cdFx0e1xuXG5cdFx0XHRib3VuZHNUcmF2ZXJzZU9yZGVyOiBib3ggPT4ge1xuXG5cdFx0XHRcdHJldHVybiBvYmIuZGlzdGFuY2VUb0JveCggYm94ICk7XG5cblx0XHRcdH0sXG5cblx0XHRcdGludGVyc2VjdHNCb3VuZHM6ICggYm94LCBpc0xlYWYsIHNjb3JlICkgPT4ge1xuXG5cdFx0XHRcdGlmICggc2NvcmUgPCBjbG9zZXN0RGlzdGFuY2UgJiYgc2NvcmUgPCBtYXhUaHJlc2hvbGQgKSB7XG5cblx0XHRcdFx0XHQvLyBpZiB3ZSBrbm93IHRoZSB0cmlhbmdsZXMgb2YgdGhpcyBib3VuZHMgd2lsbCBiZSBpbnRlcnNlY3RlZCBuZXh0IHRoZW5cblx0XHRcdFx0XHQvLyBzYXZlIHRoZSBib3VuZHMgdG8gdXNlIGR1cmluZyB0cmlhbmdsZSBjaGVja3MuXG5cdFx0XHRcdFx0aWYgKCBpc0xlYWYgKSB7XG5cblx0XHRcdFx0XHRcdG9iYjIubWluLmNvcHkoIGJveC5taW4gKTtcblx0XHRcdFx0XHRcdG9iYjIubWF4LmNvcHkoIGJveC5tYXggKTtcblx0XHRcdFx0XHRcdG9iYjIubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0aW50ZXJzZWN0c1JhbmdlOiAoIG9mZnNldCwgY291bnQgKSA9PiB7XG5cblx0XHRcdFx0aWYgKCBvdGhlckdlb21ldHJ5LmJvdW5kc1RyZWUgKSB7XG5cblx0XHRcdFx0XHQvLyBpZiB0aGUgb3RoZXIgZ2VvbWV0cnkgaGFzIGEgYnZoIHRoZW4gdXNlIHRoZSBhY2NlbGVyYXRlZCBwYXRoIHdoZXJlIHdlIHVzZSBzaGFwZWNhc3QgdG8gZmluZFxuXHRcdFx0XHRcdC8vIHRoZSBjbG9zZXN0IGJvdW5kcyBpbiB0aGUgb3RoZXIgZ2VvbWV0cnkgdG8gY2hlY2suXG5cdFx0XHRcdFx0Y29uc3Qgb3RoZXJCdmggPSBvdGhlckdlb21ldHJ5LmJvdW5kc1RyZWU7XG5cdFx0XHRcdFx0cmV0dXJuIG90aGVyQnZoLnNoYXBlY2FzdCgge1xuXHRcdFx0XHRcdFx0Ym91bmRzVHJhdmVyc2VPcmRlcjogYm94ID0+IHtcblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gb2JiMi5kaXN0YW5jZVRvQm94KCBib3ggKTtcblxuXHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0c0JvdW5kczogKCBib3gsIGlzTGVhZiwgc2NvcmUgKSA9PiB7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNjb3JlIDwgY2xvc2VzdERpc3RhbmNlICYmIHNjb3JlIDwgbWF4VGhyZXNob2xkO1xuXG5cdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3RzUmFuZ2U6ICggb3RoZXJPZmZzZXQsIG90aGVyQ291bnQgKSA9PiB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkyID0gb3RoZXJPZmZzZXQsIGwyID0gb3RoZXJPZmZzZXQgKyBvdGhlckNvdW50OyBpMiA8IGwyOyBpMiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHRpMiA9IG90aGVyQnZoLnJlc29sdmVUcmlhbmdsZUluZGV4KCBpMiApO1xuXHRcdFx0XHRcdFx0XHRcdHNldFRyaWFuZ2xlKCB0cmlhbmdsZTIsIDMgKiB0aTIsIG90aGVySW5kZXgsIG90aGVyUG9zICk7XG5cblx0XHRcdFx0XHRcdFx0XHR0cmlhbmdsZTIuYS5hcHBseU1hdHJpeDQoIGdlb21ldHJ5VG9CdmggKTtcblx0XHRcdFx0XHRcdFx0XHR0cmlhbmdsZTIuYi5hcHBseU1hdHJpeDQoIGdlb21ldHJ5VG9CdmggKTtcblx0XHRcdFx0XHRcdFx0XHR0cmlhbmdsZTIuYy5hcHBseU1hdHJpeDQoIGdlb21ldHJ5VG9CdmggKTtcblx0XHRcdFx0XHRcdFx0XHR0cmlhbmdsZTIubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSBvZmZzZXQsIGwgPSBvZmZzZXQgKyBjb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHRpID0gYnZoLnJlc29sdmVUcmlhbmdsZUluZGV4KCBpICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRUcmlhbmdsZSggdHJpYW5nbGUsIDMgKiB0aSwgaW5kZXgsIHBvcyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR0cmlhbmdsZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGRpc3QgPSB0cmlhbmdsZS5kaXN0YW5jZVRvVHJpYW5nbGUoIHRyaWFuZ2xlMiwgdGVtcFRhcmdldDEsIHRlbXBUYXJnZXQyICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRpc3QgPCBjbG9zZXN0RGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0dGVtcFRhcmdldERlc3QxLmNvcHkoIHRlbXBUYXJnZXQxICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB0ZW1wVGFyZ2V0RGVzdDIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0ZW1wVGFyZ2V0RGVzdDIuY29weSggdGVtcFRhcmdldDIgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xvc2VzdERpc3RhbmNlID0gZGlzdDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xvc2VzdERpc3RhbmNlVHJpSW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbG9zZXN0RGlzdGFuY2VPdGhlclRyaUluZGV4ID0gaTI7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gc3RvcCB0cmF2ZXJzYWwgaWYgd2UgZmluZCBhIHBvaW50IHRoYXQncyB1bmRlciB0aGUgZ2l2ZW4gdGhyZXNob2xkXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRpc3QgPCBtaW5UaHJlc2hvbGQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBJZiBubyBib3VuZHMgdHJlZSB0aGVuIHdlJ2xsIGp1c3QgY2hlY2sgZXZlcnkgdHJpYW5nbGUuXG5cdFx0XHRcdFx0Y29uc3QgdHJpQ291bnQgPSBnZXRUcmlDb3VudCggb3RoZXJHZW9tZXRyeSApO1xuXHRcdFx0XHRcdGZvciAoIGxldCBpMiA9IDAsIGwyID0gdHJpQ291bnQ7IGkyIDwgbDI7IGkyICsrICkge1xuXG5cdFx0XHRcdFx0XHRzZXRUcmlhbmdsZSggdHJpYW5nbGUyLCAzICogaTIsIG90aGVySW5kZXgsIG90aGVyUG9zICk7XG5cdFx0XHRcdFx0XHR0cmlhbmdsZTIuYS5hcHBseU1hdHJpeDQoIGdlb21ldHJ5VG9CdmggKTtcblx0XHRcdFx0XHRcdHRyaWFuZ2xlMi5iLmFwcGx5TWF0cml4NCggZ2VvbWV0cnlUb0J2aCApO1xuXHRcdFx0XHRcdFx0dHJpYW5nbGUyLmMuYXBwbHlNYXRyaXg0KCBnZW9tZXRyeVRvQnZoICk7XG5cdFx0XHRcdFx0XHR0cmlhbmdsZTIubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IG9mZnNldCwgbCA9IG9mZnNldCArIGNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCB0aSA9IGJ2aC5yZXNvbHZlVHJpYW5nbGVJbmRleCggaSApO1xuXHRcdFx0XHRcdFx0XHRzZXRUcmlhbmdsZSggdHJpYW5nbGUsIDMgKiB0aSwgaW5kZXgsIHBvcyApO1xuXG5cdFx0XHRcdFx0XHRcdHRyaWFuZ2xlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBkaXN0ID0gdHJpYW5nbGUuZGlzdGFuY2VUb1RyaWFuZ2xlKCB0cmlhbmdsZTIsIHRlbXBUYXJnZXQxLCB0ZW1wVGFyZ2V0MiApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRpc3QgPCBjbG9zZXN0RGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHR0ZW1wVGFyZ2V0RGVzdDEuY29weSggdGVtcFRhcmdldDEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggdGVtcFRhcmdldERlc3QyICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR0ZW1wVGFyZ2V0RGVzdDIuY29weSggdGVtcFRhcmdldDIgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGNsb3Nlc3REaXN0YW5jZSA9IGRpc3Q7XG5cdFx0XHRcdFx0XHRcdFx0Y2xvc2VzdERpc3RhbmNlVHJpSW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRcdGNsb3Nlc3REaXN0YW5jZU90aGVyVHJpSW5kZXggPSBpMjtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8gc3RvcCB0cmF2ZXJzYWwgaWYgd2UgZmluZCBhIHBvaW50IHRoYXQncyB1bmRlciB0aGUgZ2l2ZW4gdGhyZXNob2xkXG5cdFx0XHRcdFx0XHRcdGlmICggZGlzdCA8IG1pblRocmVzaG9sZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdH1cblxuXHQpO1xuXG5cdEV4dGVuZGVkVHJpYW5nbGVQb29sLnJlbGVhc2VQcmltaXRpdmUoIHRyaWFuZ2xlICk7XG5cdEV4dGVuZGVkVHJpYW5nbGVQb29sLnJlbGVhc2VQcmltaXRpdmUoIHRyaWFuZ2xlMiApO1xuXG5cdGlmICggY2xvc2VzdERpc3RhbmNlID09PSBJbmZpbml0eSApIHtcblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHRpZiAoICEgdGFyZ2V0MS5wb2ludCApIHtcblxuXHRcdHRhcmdldDEucG9pbnQgPSB0ZW1wVGFyZ2V0RGVzdDEuY2xvbmUoKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGFyZ2V0MS5wb2ludC5jb3B5KCB0ZW1wVGFyZ2V0RGVzdDEgKTtcblxuXHR9XG5cblx0dGFyZ2V0MS5kaXN0YW5jZSA9IGNsb3Nlc3REaXN0YW5jZSxcblx0dGFyZ2V0MS5mYWNlSW5kZXggPSBjbG9zZXN0RGlzdGFuY2VUcmlJbmRleDtcblxuXHRpZiAoIHRhcmdldDIgKSB7XG5cblx0XHRpZiAoICEgdGFyZ2V0Mi5wb2ludCApIHRhcmdldDIucG9pbnQgPSB0ZW1wVGFyZ2V0RGVzdDIuY2xvbmUoKTtcblx0XHRlbHNlIHRhcmdldDIucG9pbnQuY29weSggdGVtcFRhcmdldERlc3QyICk7XG5cdFx0dGFyZ2V0Mi5wb2ludC5hcHBseU1hdHJpeDQoIHRlbXBNYXRyaXggKTtcblx0XHR0ZW1wVGFyZ2V0RGVzdDEuYXBwbHlNYXRyaXg0KCB0ZW1wTWF0cml4ICk7XG5cdFx0dGFyZ2V0Mi5kaXN0YW5jZSA9IHRlbXBUYXJnZXREZXN0MS5zdWIoIHRhcmdldDIucG9pbnQgKS5sZW5ndGgoKTtcblx0XHR0YXJnZXQyLmZhY2VJbmRleCA9IGNsb3Nlc3REaXN0YW5jZU90aGVyVHJpSW5kZXg7XG5cblx0fVxuXG5cdHJldHVybiB0YXJnZXQxO1xuXG59XG5cbmV4cG9ydCB7IGNsb3Nlc3RQb2ludFRvR2VvbWV0cnlfaW5kaXJlY3QgfTtcbiJdLCJuYW1lcyI6WyJNYXRyaXg0IiwiVmVjdG9yMyIsIk9yaWVudGVkQm94Iiwic2V0VHJpYW5nbGUiLCJnZXRUcmlDb3VudCIsIkV4dGVuZGVkVHJpYW5nbGVQb29sIiwidGVtcE1hdHJpeCIsIm9iYiIsIm9iYjIiLCJ0ZW1wMSIsInRlbXAyIiwidGVtcDMiLCJ0ZW1wNCIsImNsb3Nlc3RQb2ludFRvR2VvbWV0cnlfaW5kaXJlY3QiLCJidmgiLCJvdGhlckdlb21ldHJ5IiwiZ2VvbWV0cnlUb0J2aCIsInRhcmdldDEiLCJ0YXJnZXQyIiwibWluVGhyZXNob2xkIiwibWF4VGhyZXNob2xkIiwiSW5maW5pdHkiLCJib3VuZGluZ0JveCIsImNvbXB1dGVCb3VuZGluZ0JveCIsInNldCIsIm1pbiIsIm1heCIsIm5lZWRzVXBkYXRlIiwiZ2VvbWV0cnkiLCJwb3MiLCJhdHRyaWJ1dGVzIiwicG9zaXRpb24iLCJpbmRleCIsIm90aGVyUG9zIiwib3RoZXJJbmRleCIsInRyaWFuZ2xlIiwiZ2V0UHJpbWl0aXZlIiwidHJpYW5nbGUyIiwidGVtcFRhcmdldDEiLCJ0ZW1wVGFyZ2V0RGVzdDEiLCJ0ZW1wVGFyZ2V0MiIsInRlbXBUYXJnZXREZXN0MiIsImNsb3Nlc3REaXN0YW5jZSIsImNsb3Nlc3REaXN0YW5jZVRyaUluZGV4IiwiY2xvc2VzdERpc3RhbmNlT3RoZXJUcmlJbmRleCIsImNvcHkiLCJpbnZlcnQiLCJtYXRyaXgiLCJzaGFwZWNhc3QiLCJib3VuZHNUcmF2ZXJzZU9yZGVyIiwiYm94IiwiZGlzdGFuY2VUb0JveCIsImludGVyc2VjdHNCb3VuZHMiLCJpc0xlYWYiLCJzY29yZSIsImludGVyc2VjdHNSYW5nZSIsIm9mZnNldCIsImNvdW50IiwiYm91bmRzVHJlZSIsIm90aGVyQnZoIiwib3RoZXJPZmZzZXQiLCJvdGhlckNvdW50IiwiaTIiLCJsMiIsInRpMiIsInJlc29sdmVUcmlhbmdsZUluZGV4IiwiYSIsImFwcGx5TWF0cml4NCIsImIiLCJjIiwiaSIsImwiLCJ0aSIsImRpc3QiLCJkaXN0YW5jZVRvVHJpYW5nbGUiLCJ0cmlDb3VudCIsInJlbGVhc2VQcmltaXRpdmUiLCJwb2ludCIsImNsb25lIiwiZGlzdGFuY2UiLCJmYWNlSW5kZXgiLCJzdWIiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointToPoint: () => (/* binding */ closestPointToPoint)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\nconst temp = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst temp1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction closestPointToPoint(bvh, point, target = {}, minThreshold = 0, maxThreshold = Infinity) {\n    // early out if under minThreshold\n    // skip checking if over maxThreshold\n    // set minThreshold = maxThreshold to quickly check if a point is within a threshold\n    // returns Infinity if no value found\n    const minThresholdSq = minThreshold * minThreshold;\n    const maxThresholdSq = maxThreshold * maxThreshold;\n    let closestDistanceSq = Infinity;\n    let closestDistanceTriIndex = null;\n    bvh.shapecast({\n        boundsTraverseOrder: (box)=>{\n            temp.copy(point).clamp(box.min, box.max);\n            return temp.distanceToSquared(point);\n        },\n        intersectsBounds: (box, isLeaf, score)=>{\n            return score < closestDistanceSq && score < maxThresholdSq;\n        },\n        intersectsTriangle: (tri, triIndex)=>{\n            tri.closestPointToPoint(point, temp);\n            const distSq = point.distanceToSquared(temp);\n            if (distSq < closestDistanceSq) {\n                temp1.copy(temp);\n                closestDistanceSq = distSq;\n                closestDistanceTriIndex = triIndex;\n            }\n            if (distSq < minThresholdSq) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    });\n    if (closestDistanceSq === Infinity) return null;\n    const closestDistance = Math.sqrt(closestDistanceSq);\n    if (!target.point) target.point = temp1.clone();\n    else target.point.copy(temp1);\n    target.distance = closestDistance, target.faceIndex = closestDistanceTriIndex;\n    return target;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvY2xvc2VzdFBvaW50VG9Qb2ludC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnQztBQUVoQyxNQUFNQyxPQUFPLGFBQWEsR0FBRyxJQUFJRCwwQ0FBT0E7QUFDeEMsTUFBTUUsUUFBUSxhQUFhLEdBQUcsSUFBSUYsMENBQU9BO0FBRWxDLFNBQVNHLG9CQUNmQyxHQUFHLEVBQ0hDLEtBQUssRUFDTEMsU0FBUyxDQUFFLENBQUMsRUFDWkMsZUFBZSxDQUFDLEVBQ2hCQyxlQUFlQyxRQUFRO0lBR3ZCLGtDQUFrQztJQUNsQyxxQ0FBcUM7SUFDckMsb0ZBQW9GO0lBQ3BGLHFDQUFxQztJQUNyQyxNQUFNQyxpQkFBaUJILGVBQWVBO0lBQ3RDLE1BQU1JLGlCQUFpQkgsZUFBZUE7SUFDdEMsSUFBSUksb0JBQW9CSDtJQUN4QixJQUFJSSwwQkFBMEI7SUFDOUJULElBQUlVLFNBQVMsQ0FFWjtRQUVDQyxxQkFBcUJDLENBQUFBO1lBRXBCZixLQUFLZ0IsSUFBSSxDQUFFWixPQUFRYSxLQUFLLENBQUVGLElBQUlHLEdBQUcsRUFBRUgsSUFBSUksR0FBRztZQUMxQyxPQUFPbkIsS0FBS29CLGlCQUFpQixDQUFFaEI7UUFFaEM7UUFFQWlCLGtCQUFrQixDQUFFTixLQUFLTyxRQUFRQztZQUVoQyxPQUFPQSxRQUFRWixxQkFBcUJZLFFBQVFiO1FBRTdDO1FBRUFjLG9CQUFvQixDQUFFQyxLQUFLQztZQUUxQkQsSUFBSXZCLG1CQUFtQixDQUFFRSxPQUFPSjtZQUNoQyxNQUFNMkIsU0FBU3ZCLE1BQU1nQixpQkFBaUIsQ0FBRXBCO1lBQ3hDLElBQUsyQixTQUFTaEIsbUJBQW9CO2dCQUVqQ1YsTUFBTWUsSUFBSSxDQUFFaEI7Z0JBQ1pXLG9CQUFvQmdCO2dCQUNwQmYsMEJBQTBCYztZQUUzQjtZQUVBLElBQUtDLFNBQVNsQixnQkFBaUI7Z0JBRTlCLE9BQU87WUFFUixPQUFPO2dCQUVOLE9BQU87WUFFUjtRQUVEO0lBRUQ7SUFJRCxJQUFLRSxzQkFBc0JILFVBQVcsT0FBTztJQUU3QyxNQUFNb0Isa0JBQWtCQyxLQUFLQyxJQUFJLENBQUVuQjtJQUVuQyxJQUFLLENBQUVOLE9BQU9ELEtBQUssRUFBR0MsT0FBT0QsS0FBSyxHQUFHSCxNQUFNOEIsS0FBSztTQUMzQzFCLE9BQU9ELEtBQUssQ0FBQ1ksSUFBSSxDQUFFZjtJQUN4QkksT0FBTzJCLFFBQVEsR0FBR0osaUJBQ2xCdkIsT0FBTzRCLFNBQVMsR0FBR3JCO0lBRW5CLE9BQU9QO0FBRVIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvY2xvc2VzdFBvaW50VG9Qb2ludC5qcz8xZjEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5cbmNvbnN0IHRlbXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IHRlbXAxID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWN0b3IzKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZXN0UG9pbnRUb1BvaW50KFxuXHRidmgsXG5cdHBvaW50LFxuXHR0YXJnZXQgPSB7IH0sXG5cdG1pblRocmVzaG9sZCA9IDAsXG5cdG1heFRocmVzaG9sZCA9IEluZmluaXR5LFxuKSB7XG5cblx0Ly8gZWFybHkgb3V0IGlmIHVuZGVyIG1pblRocmVzaG9sZFxuXHQvLyBza2lwIGNoZWNraW5nIGlmIG92ZXIgbWF4VGhyZXNob2xkXG5cdC8vIHNldCBtaW5UaHJlc2hvbGQgPSBtYXhUaHJlc2hvbGQgdG8gcXVpY2tseSBjaGVjayBpZiBhIHBvaW50IGlzIHdpdGhpbiBhIHRocmVzaG9sZFxuXHQvLyByZXR1cm5zIEluZmluaXR5IGlmIG5vIHZhbHVlIGZvdW5kXG5cdGNvbnN0IG1pblRocmVzaG9sZFNxID0gbWluVGhyZXNob2xkICogbWluVGhyZXNob2xkO1xuXHRjb25zdCBtYXhUaHJlc2hvbGRTcSA9IG1heFRocmVzaG9sZCAqIG1heFRocmVzaG9sZDtcblx0bGV0IGNsb3Nlc3REaXN0YW5jZVNxID0gSW5maW5pdHk7XG5cdGxldCBjbG9zZXN0RGlzdGFuY2VUcmlJbmRleCA9IG51bGw7XG5cdGJ2aC5zaGFwZWNhc3QoXG5cblx0XHR7XG5cblx0XHRcdGJvdW5kc1RyYXZlcnNlT3JkZXI6IGJveCA9PiB7XG5cblx0XHRcdFx0dGVtcC5jb3B5KCBwb2ludCApLmNsYW1wKCBib3gubWluLCBib3gubWF4ICk7XG5cdFx0XHRcdHJldHVybiB0ZW1wLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRpbnRlcnNlY3RzQm91bmRzOiAoIGJveCwgaXNMZWFmLCBzY29yZSApID0+IHtcblxuXHRcdFx0XHRyZXR1cm4gc2NvcmUgPCBjbG9zZXN0RGlzdGFuY2VTcSAmJiBzY29yZSA8IG1heFRocmVzaG9sZFNxO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRpbnRlcnNlY3RzVHJpYW5nbGU6ICggdHJpLCB0cmlJbmRleCApID0+IHtcblxuXHRcdFx0XHR0cmkuY2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIHRlbXAgKTtcblx0XHRcdFx0Y29uc3QgZGlzdFNxID0gcG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRlbXAgKTtcblx0XHRcdFx0aWYgKCBkaXN0U3EgPCBjbG9zZXN0RGlzdGFuY2VTcSApIHtcblxuXHRcdFx0XHRcdHRlbXAxLmNvcHkoIHRlbXAgKTtcblx0XHRcdFx0XHRjbG9zZXN0RGlzdGFuY2VTcSA9IGRpc3RTcTtcblx0XHRcdFx0XHRjbG9zZXN0RGlzdGFuY2VUcmlJbmRleCA9IHRyaUluZGV4O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRpc3RTcSA8IG1pblRocmVzaG9sZFNxICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHR9XG5cblx0KTtcblxuXHRpZiAoIGNsb3Nlc3REaXN0YW5jZVNxID09PSBJbmZpbml0eSApIHJldHVybiBudWxsO1xuXG5cdGNvbnN0IGNsb3Nlc3REaXN0YW5jZSA9IE1hdGguc3FydCggY2xvc2VzdERpc3RhbmNlU3EgKTtcblxuXHRpZiAoICEgdGFyZ2V0LnBvaW50ICkgdGFyZ2V0LnBvaW50ID0gdGVtcDEuY2xvbmUoKTtcblx0ZWxzZSB0YXJnZXQucG9pbnQuY29weSggdGVtcDEgKTtcblx0dGFyZ2V0LmRpc3RhbmNlID0gY2xvc2VzdERpc3RhbmNlLFxuXHR0YXJnZXQuZmFjZUluZGV4ID0gY2xvc2VzdERpc3RhbmNlVHJpSW5kZXg7XG5cblx0cmV0dXJuIHRhcmdldDtcblxufVxuIl0sIm5hbWVzIjpbIlZlY3RvcjMiLCJ0ZW1wIiwidGVtcDEiLCJjbG9zZXN0UG9pbnRUb1BvaW50IiwiYnZoIiwicG9pbnQiLCJ0YXJnZXQiLCJtaW5UaHJlc2hvbGQiLCJtYXhUaHJlc2hvbGQiLCJJbmZpbml0eSIsIm1pblRocmVzaG9sZFNxIiwibWF4VGhyZXNob2xkU3EiLCJjbG9zZXN0RGlzdGFuY2VTcSIsImNsb3Nlc3REaXN0YW5jZVRyaUluZGV4Iiwic2hhcGVjYXN0IiwiYm91bmRzVHJhdmVyc2VPcmRlciIsImJveCIsImNvcHkiLCJjbGFtcCIsIm1pbiIsIm1heCIsImRpc3RhbmNlVG9TcXVhcmVkIiwiaW50ZXJzZWN0c0JvdW5kcyIsImlzTGVhZiIsInNjb3JlIiwiaW50ZXJzZWN0c1RyaWFuZ2xlIiwidHJpIiwidHJpSW5kZXgiLCJkaXN0U3EiLCJjbG9zZXN0RGlzdGFuY2UiLCJNYXRoIiwic3FydCIsImNsb25lIiwiZGlzdGFuY2UiLCJmYWNlSW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectsGeometry: () => (/* binding */ intersectsGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/ExtendedTriangle.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n\n\n\n\n\n\n\n/*****************************************************************/ /* This file is generated from \"intersectsGeometry.template.js\". */ /*****************************************************************/ /* eslint-disable indent */ const boundingBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst triangle = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nfunction intersectsGeometry(bvh, root, otherGeometry, geometryToBvh) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _intersectsGeometry(0, bvh, otherGeometry, geometryToBvh);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _intersectsGeometry(nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    if (cachedObb === null) {\n        if (!otherGeometry.boundingBox) {\n            otherGeometry.computeBoundingBox();\n        }\n        obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n        cachedObb = obb;\n    }\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const thisGeometry = bvh.geometry;\n        const thisIndex = thisGeometry.index;\n        const thisPos = thisGeometry.attributes.position;\n        const index = otherGeometry.index;\n        const pos = otherGeometry.attributes.position;\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(nodeIndex16, uint16Array);\n        // get the inverse of the geometry matrix so we can transform our triangles into the\n        // geometry space we're trying to test. We assume there are fewer triangles being checked\n        // here.\n        invertedMat.copy(geometryToBvh).invert();\n        if (otherGeometry.boundsTree) {\n            // if there's a bounds tree\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(nodeIndex32), float32Array, obb2);\n            obb2.matrix.copy(invertedMat);\n            obb2.needsUpdate = true;\n            // TODO: use a triangle iteration function here\n            const res = otherGeometry.boundsTree.shapecast({\n                intersectsBounds: (box)=>obb2.intersectsBox(box),\n                intersectsTriangle: (tri)=>{\n                    tri.a.applyMatrix4(geometryToBvh);\n                    tri.b.applyMatrix4(geometryToBvh);\n                    tri.c.applyMatrix4(geometryToBvh);\n                    tri.needsUpdate = true;\n                    for(let i = offset * 3, l = (count + offset) * 3; i < l; i += 3){\n                        // this triangle needs to be transformed into the current BVH coordinate frame\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, i, thisIndex, thisPos);\n                        triangle2.needsUpdate = true;\n                        if (tri.intersectsTriangle(triangle2)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            });\n            return res;\n        } else {\n            // if we're just dealing with raw geometry\n            for(let i = offset * 3, l = (count + offset) * 3; i < l; i += 3){\n                // this triangle needs to be transformed into the current BVH coordinate frame\n                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle, i, thisIndex, thisPos);\n                triangle.a.applyMatrix4(invertedMat);\n                triangle.b.applyMatrix4(invertedMat);\n                triangle.c.applyMatrix4(invertedMat);\n                triangle.needsUpdate = true;\n                for(let i2 = 0, l2 = index.count; i2 < l2; i2 += 3){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, i2, index, pos);\n                    triangle2.needsUpdate = true;\n                    if (triangle.intersectsTriangle(triangle2)) {\n                        return true;\n                    }\n                }\n            }\n        }\n    } else {\n        const left = nodeIndex32 + 8;\n        const right = uint32Array[nodeIndex32 + 6];\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(left), float32Array, boundingBox);\n        const leftIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(left, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (leftIntersection) return true;\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(right), float32Array, boundingBox);\n        const rightIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(right, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (rightIntersection) return true;\n        return false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectsGeometry_indirect: () => (/* binding */ intersectsGeometry_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/OrientedBox.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js\");\n/* harmony import */ var _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/ExtendedTriangle.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n\n\n\n\n\n\n\n/*****************************************************************/ /* This file is generated from \"intersectsGeometry.template.js\". */ /*****************************************************************/ /* eslint-disable indent */ const boundingBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst triangle = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst obb = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nconst obb2 = /* @__PURE__ */ new _math_OrientedBox_js__WEBPACK_IMPORTED_MODULE_2__.OrientedBox();\nfunction intersectsGeometry_indirect(bvh, root, otherGeometry, geometryToBvh) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _intersectsGeometry(0, bvh, otherGeometry, geometryToBvh);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _intersectsGeometry(nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_3__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    if (cachedObb === null) {\n        if (!otherGeometry.boundingBox) {\n            otherGeometry.computeBoundingBox();\n        }\n        obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n        cachedObb = obb;\n    }\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const thisGeometry = bvh.geometry;\n        const thisIndex = thisGeometry.index;\n        const thisPos = thisGeometry.attributes.position;\n        const index = otherGeometry.index;\n        const pos = otherGeometry.attributes.position;\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.COUNT)(nodeIndex16, uint16Array);\n        // get the inverse of the geometry matrix so we can transform our triangles into the\n        // geometry space we're trying to test. We assume there are fewer triangles being checked\n        // here.\n        invertedMat.copy(geometryToBvh).invert();\n        if (otherGeometry.boundsTree) {\n            // if there's a bounds tree\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(nodeIndex32), float32Array, obb2);\n            obb2.matrix.copy(invertedMat);\n            obb2.needsUpdate = true;\n            // TODO: use a triangle iteration function here\n            const res = otherGeometry.boundsTree.shapecast({\n                intersectsBounds: (box)=>obb2.intersectsBox(box),\n                intersectsTriangle: (tri)=>{\n                    tri.a.applyMatrix4(geometryToBvh);\n                    tri.b.applyMatrix4(geometryToBvh);\n                    tri.c.applyMatrix4(geometryToBvh);\n                    tri.needsUpdate = true;\n                    for(let i = offset, l = count + offset; i < l; i++){\n                        // this triangle needs to be transformed into the current BVH coordinate frame\n                        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, 3 * bvh.resolveTriangleIndex(i), thisIndex, thisPos);\n                        triangle2.needsUpdate = true;\n                        if (tri.intersectsTriangle(triangle2)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            });\n            return res;\n        } else {\n            // if we're just dealing with raw geometry\n            for(let i = offset, l = count + offset; i < l; i++){\n                // this triangle needs to be transformed into the current BVH coordinate frame\n                const ti = bvh.resolveTriangleIndex(i);\n                (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle, 3 * ti, thisIndex, thisPos);\n                triangle.a.applyMatrix4(invertedMat);\n                triangle.b.applyMatrix4(invertedMat);\n                triangle.c.applyMatrix4(invertedMat);\n                triangle.needsUpdate = true;\n                for(let i2 = 0, l2 = index.count; i2 < l2; i2 += 3){\n                    (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_6__.setTriangle)(triangle2, i2, index, pos);\n                    triangle2.needsUpdate = true;\n                    if (triangle.intersectsTriangle(triangle2)) {\n                        return true;\n                    }\n                }\n            }\n        }\n    } else {\n        const left = nodeIndex32 + 8;\n        const right = uint32Array[nodeIndex32 + 6];\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(left), float32Array, boundingBox);\n        const leftIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(left, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (leftIntersection) return true;\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_5__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_4__.BOUNDING_DATA_INDEX)(right), float32Array, boundingBox);\n        const rightIntersection = cachedObb.intersectsBox(boundingBox) && _intersectsGeometry(right, bvh, otherGeometry, geometryToBvh, cachedObb);\n        if (rightIntersection) return true;\n        return false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycast: () => (/* binding */ raycast)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\");\n\n\n\n\n\n\n/******************************************************/ /* This file is generated from \"raycast.template.js\". */ /******************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction raycast(bvh, root, side, ray, intersects) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    _raycast(0, bvh, side, ray, intersects);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n}\nfunction _raycast(nodeIndex32, bvh, side, ray, intersects) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    const nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        (0,_utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectTris)(bvh, side, ray, offset, count, intersects);\n    } else {\n        const leftIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(leftIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(leftIndex, bvh, side, ray, intersects);\n        }\n        const rightIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(rightIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(rightIndex, bvh, side, ray, intersects);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdC5nZW5lcmF0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdDO0FBQzBCO0FBQ2tDO0FBQ3RDO0FBQ2U7QUFDZDtBQUV2RCxzREFBc0QsR0FDdEQsc0RBQXNELEdBQ3RELHNEQUFzRCxHQUV0RCxNQUFNUyxtQkFBbUIsYUFBYSxHQUFHLElBQUlULDBDQUFPQTtBQUNwRCxTQUFTVSxRQUFTQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFVBQVU7SUFFakRSLDhEQUFXQSxDQUFDUyxTQUFTLENBQUVMLElBQUlNLE1BQU0sQ0FBRUwsS0FBTTtJQUN6Q00sU0FBVSxHQUFHUCxLQUFLRSxNQUFNQyxLQUFLQztJQUM3QlIsOERBQVdBLENBQUNZLFdBQVc7QUFFeEI7QUFFQSxTQUFTRCxTQUFVRSxXQUFXLEVBQUVULEdBQUcsRUFBRUUsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFVBQVU7SUFFekQsTUFBTSxFQUFFTSxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFLEdBQUdoQiw4REFBV0E7SUFDOUQsTUFBTWlCLGNBQWNKLGNBQWM7SUFDbEMsTUFBTUssU0FBU3ZCLGtFQUFPQSxDQUFFc0IsYUFBYUY7SUFDckMsSUFBS0csUUFBUztRQUViLE1BQU1DLFNBQVN2QixpRUFBTUEsQ0FBRWlCLGFBQWFHO1FBQ3BDLE1BQU1JLFFBQVF2QixnRUFBS0EsQ0FBRW9CLGFBQWFGO1FBR2xDZCxpRkFBYUEsQ0FBRUcsS0FBS0UsTUFBTUMsS0FBS1ksUUFBUUMsT0FBT1o7SUFHL0MsT0FBTztRQUVOLE1BQU1hLFlBQVl2QixvRUFBU0EsQ0FBRWU7UUFDN0IsSUFBS25CLHNFQUFZQSxDQUFFMkIsV0FBV1AsY0FBY1AsS0FBS0wsbUJBQXFCO1lBRXJFUyxTQUFVVSxXQUFXakIsS0FBS0UsTUFBTUMsS0FBS0M7UUFFdEM7UUFFQSxNQUFNYyxhQUFhdkIscUVBQVVBLENBQUVjLGFBQWFHO1FBQzVDLElBQUt0QixzRUFBWUEsQ0FBRTRCLFlBQVlSLGNBQWNQLEtBQUtMLG1CQUFxQjtZQUV0RVMsU0FBVVcsWUFBWWxCLEtBQUtFLE1BQU1DLEtBQUtDO1FBRXZDO0lBRUQ7QUFFRDtBQUVtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9yYXljYXN0LmdlbmVyYXRlZC5qcz9iNjdkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBpbnRlcnNlY3RSYXkgfSBmcm9tICcuLi91dGlscy9pbnRlcnNlY3RVdGlscy5qcyc7XG5pbXBvcnQgeyBJU19MRUFGLCBPRkZTRVQsIENPVU5ULCBMRUZUX05PREUsIFJJR0hUX05PREUgfSBmcm9tICcuLi91dGlscy9ub2RlQnVmZmVyVXRpbHMuanMnO1xuaW1wb3J0IHsgQnVmZmVyU3RhY2sgfSBmcm9tICcuLi91dGlscy9CdWZmZXJTdGFjay5qcyc7XG5pbXBvcnQgeyBpbnRlcnNlY3RUcmlzIH0gZnJvbSAnLi4vdXRpbHMvaXRlcmF0aW9uVXRpbHMuZ2VuZXJhdGVkLmpzJztcbmltcG9ydCAnLi4vdXRpbHMvaXRlcmF0aW9uVXRpbHNfaW5kaXJlY3QuZ2VuZXJhdGVkLmpzJztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBcInJheWNhc3QudGVtcGxhdGUuanNcIi4gKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IF9ib3hJbnRlcnNlY3Rpb24gPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlY3RvcjMoKTtcbmZ1bmN0aW9uIHJheWNhc3QoIGJ2aCwgcm9vdCwgc2lkZSwgcmF5LCBpbnRlcnNlY3RzICkge1xuXG5cdEJ1ZmZlclN0YWNrLnNldEJ1ZmZlciggYnZoLl9yb290c1sgcm9vdCBdICk7XG5cdF9yYXljYXN0KCAwLCBidmgsIHNpZGUsIHJheSwgaW50ZXJzZWN0cyApO1xuXHRCdWZmZXJTdGFjay5jbGVhckJ1ZmZlcigpO1xuXG59XG5cbmZ1bmN0aW9uIF9yYXljYXN0KCBub2RlSW5kZXgzMiwgYnZoLCBzaWRlLCByYXksIGludGVyc2VjdHMgKSB7XG5cblx0Y29uc3QgeyBmbG9hdDMyQXJyYXksIHVpbnQxNkFycmF5LCB1aW50MzJBcnJheSB9ID0gQnVmZmVyU3RhY2s7XG5cdGNvbnN0IG5vZGVJbmRleDE2ID0gbm9kZUluZGV4MzIgKiAyO1xuXHRjb25zdCBpc0xlYWYgPSBJU19MRUFGKCBub2RlSW5kZXgxNiwgdWludDE2QXJyYXkgKTtcblx0aWYgKCBpc0xlYWYgKSB7XG5cblx0XHRjb25zdCBvZmZzZXQgPSBPRkZTRVQoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdGNvbnN0IGNvdW50ID0gQ09VTlQoIG5vZGVJbmRleDE2LCB1aW50MTZBcnJheSApO1xuXG5cblx0XHRpbnRlcnNlY3RUcmlzKCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCwgaW50ZXJzZWN0cyApO1xuXG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnN0IGxlZnRJbmRleCA9IExFRlRfTk9ERSggbm9kZUluZGV4MzIgKTtcblx0XHRpZiAoIGludGVyc2VjdFJheSggbGVmdEluZGV4LCBmbG9hdDMyQXJyYXksIHJheSwgX2JveEludGVyc2VjdGlvbiApICkge1xuXG5cdFx0XHRfcmF5Y2FzdCggbGVmdEluZGV4LCBidmgsIHNpZGUsIHJheSwgaW50ZXJzZWN0cyApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcmlnaHRJbmRleCA9IFJJR0hUX05PREUoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdGlmICggaW50ZXJzZWN0UmF5KCByaWdodEluZGV4LCBmbG9hdDMyQXJyYXksIHJheSwgX2JveEludGVyc2VjdGlvbiApICkge1xuXG5cdFx0XHRfcmF5Y2FzdCggcmlnaHRJbmRleCwgYnZoLCBzaWRlLCByYXksIGludGVyc2VjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgcmF5Y2FzdCB9O1xuIl0sIm5hbWVzIjpbIlZlY3RvcjMiLCJpbnRlcnNlY3RSYXkiLCJJU19MRUFGIiwiT0ZGU0VUIiwiQ09VTlQiLCJMRUZUX05PREUiLCJSSUdIVF9OT0RFIiwiQnVmZmVyU3RhY2siLCJpbnRlcnNlY3RUcmlzIiwiX2JveEludGVyc2VjdGlvbiIsInJheWNhc3QiLCJidmgiLCJyb290Iiwic2lkZSIsInJheSIsImludGVyc2VjdHMiLCJzZXRCdWZmZXIiLCJfcm9vdHMiLCJfcmF5Y2FzdCIsImNsZWFyQnVmZmVyIiwibm9kZUluZGV4MzIiLCJmbG9hdDMyQXJyYXkiLCJ1aW50MTZBcnJheSIsInVpbnQzMkFycmF5Iiwibm9kZUluZGV4MTYiLCJpc0xlYWYiLCJvZmZzZXQiLCJjb3VudCIsImxlZnRJbmRleCIsInJpZ2h0SW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycastFirst: () => (/* binding */ raycastFirst)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\");\n\n\n\n\n\n\n/***********************************************************/ /* This file is generated from \"raycastFirst.template.js\". */ /***********************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _xyzFields = [\n    \"x\",\n    \"y\",\n    \"z\"\n];\nfunction raycastFirst(bvh, root, side, ray) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _raycastFirst(0, bvh, side, ray);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _raycastFirst(nodeIndex32, bvh, side, ray) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        return (0,_utils_iterationUtils_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectClosestTri)(bvh, side, ray, offset, count);\n    } else {\n        // consider the position of the split plane with respect to the oncoming ray; whichever direction\n        // the ray is coming from, look for an intersection among that side of the tree first\n        const splitAxis = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.SPLIT_AXIS)(nodeIndex32, uint32Array);\n        const xyzAxis = _xyzFields[splitAxis];\n        const rayDir = ray.direction[xyzAxis];\n        const leftToRight = rayDir >= 0;\n        // c1 is the child to check first\n        let c1, c2;\n        if (leftToRight) {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        } else {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        }\n        const c1Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c1, float32Array, ray, _boxIntersection);\n        const c1Result = c1Intersection ? _raycastFirst(c1, bvh, side, ray) : null;\n        // if we got an intersection in the first node and it's closer than the second node's bounding\n        // box, we don't need to consider the second node because it couldn't possibly be a better result\n        if (c1Result) {\n            // check if the point is within the second bounds\n            // \"point\" is in the local frame of the bvh\n            const point = c1Result.point[xyzAxis];\n            const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : point >= float32Array[c2 + splitAxis + 3]; // max bounding data\n            if (isOutside) {\n                return c1Result;\n            }\n        }\n        // either there was no intersection in the first node, or there could still be a closer\n        // intersection in the second, so check the second node and then take the better of the two\n        const c2Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c2, float32Array, ray, _boxIntersection);\n        const c2Result = c2Intersection ? _raycastFirst(c2, bvh, side, ray) : null;\n        if (c1Result && c2Result) {\n            return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n        } else {\n            return c1Result || c2Result || null;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdEZpcnN0LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0M7QUFDd0U7QUFDbEQ7QUFDSTtBQUNpQjtBQUNwQjtBQUV2RCwyREFBMkQsR0FDM0QsMkRBQTJELEdBQzNELDJEQUEyRCxHQUMzRCxNQUFNVSxtQkFBbUIsYUFBYSxHQUFHLElBQUlWLDBDQUFPQTtBQUNwRCxNQUFNVyxhQUFhO0lBQUU7SUFBSztJQUFLO0NBQUs7QUFDcEMsU0FBU0MsYUFBY0MsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsR0FBRztJQUUxQ1QsOERBQVdBLENBQUNVLFNBQVMsQ0FBRUosSUFBSUssTUFBTSxDQUFFSixLQUFNO0lBQ3pDLE1BQU1LLFNBQVNDLGNBQWUsR0FBR1AsS0FBS0UsTUFBTUM7SUFDNUNULDhEQUFXQSxDQUFDYyxXQUFXO0lBRXZCLE9BQU9GO0FBRVI7QUFFQSxTQUFTQyxjQUFlRSxXQUFXLEVBQUVULEdBQUcsRUFBRUUsSUFBSSxFQUFFQyxHQUFHO0lBRWxELE1BQU0sRUFBRU8sWUFBWSxFQUFFQyxXQUFXLEVBQUVDLFdBQVcsRUFBRSxHQUFHbEIsOERBQVdBO0lBQzlELElBQUltQixjQUFjSixjQUFjO0lBRWhDLE1BQU1LLFNBQVMxQixrRUFBT0EsQ0FBRXlCLGFBQWFGO0lBQ3JDLElBQUtHLFFBQVM7UUFFYixNQUFNQyxTQUFTMUIsaUVBQU1BLENBQUVvQixhQUFhRztRQUNwQyxNQUFNSSxRQUFRMUIsZ0VBQUtBLENBQUV1QixhQUFhRjtRQUdsQyxPQUFPZix1RkFBbUJBLENBQUVJLEtBQUtFLE1BQU1DLEtBQUtZLFFBQVFDO0lBR3JELE9BQU87UUFFTixpR0FBaUc7UUFDakcscUZBQXFGO1FBQ3JGLE1BQU1DLFlBQVkxQixxRUFBVUEsQ0FBRWtCLGFBQWFHO1FBQzNDLE1BQU1NLFVBQVVwQixVQUFVLENBQUVtQixVQUFXO1FBQ3ZDLE1BQU1FLFNBQVNoQixJQUFJaUIsU0FBUyxDQUFFRixRQUFTO1FBQ3ZDLE1BQU1HLGNBQWNGLFVBQVU7UUFFOUIsaUNBQWlDO1FBQ2pDLElBQUlHLElBQUlDO1FBQ1IsSUFBS0YsYUFBYztZQUVsQkMsS0FBSzlCLG9FQUFTQSxDQUFFaUI7WUFDaEJjLEtBQUs5QixxRUFBVUEsQ0FBRWdCLGFBQWFHO1FBRS9CLE9BQU87WUFFTlUsS0FBSzdCLHFFQUFVQSxDQUFFZ0IsYUFBYUc7WUFDOUJXLEtBQUsvQixvRUFBU0EsQ0FBRWlCO1FBRWpCO1FBRUEsTUFBTWUsaUJBQWlCN0Isc0VBQVlBLENBQUUyQixJQUFJWixjQUFjUCxLQUFLTjtRQUM1RCxNQUFNNEIsV0FBV0QsaUJBQWlCakIsY0FBZWUsSUFBSXRCLEtBQUtFLE1BQU1DLE9BQVE7UUFFeEUsOEZBQThGO1FBQzlGLGlHQUFpRztRQUNqRyxJQUFLc0IsVUFBVztZQUVmLGlEQUFpRDtZQUNqRCwyQ0FBMkM7WUFDM0MsTUFBTUMsUUFBUUQsU0FBU0MsS0FBSyxDQUFFUixRQUFTO1lBQ3ZDLE1BQU1TLFlBQVlOLGNBQ2pCSyxTQUFTaEIsWUFBWSxDQUFFYSxLQUFLTixVQUFXLEdBQ3ZDUyxTQUFTaEIsWUFBWSxDQUFFYSxLQUFLTixZQUFZLEVBQUcsRUFBRSxvQkFBb0I7WUFFbEUsSUFBS1UsV0FBWTtnQkFFaEIsT0FBT0Y7WUFFUjtRQUVEO1FBRUEsdUZBQXVGO1FBQ3ZGLDJGQUEyRjtRQUMzRixNQUFNRyxpQkFBaUJqQyxzRUFBWUEsQ0FBRTRCLElBQUliLGNBQWNQLEtBQUtOO1FBQzVELE1BQU1nQyxXQUFXRCxpQkFBaUJyQixjQUFlZ0IsSUFBSXZCLEtBQUtFLE1BQU1DLE9BQVE7UUFFeEUsSUFBS3NCLFlBQVlJLFVBQVc7WUFFM0IsT0FBT0osU0FBU0ssUUFBUSxJQUFJRCxTQUFTQyxRQUFRLEdBQUdMLFdBQVdJO1FBRTVELE9BQU87WUFFTixPQUFPSixZQUFZSSxZQUFZO1FBRWhDO0lBRUQ7QUFFRDtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvY2FzdC9yYXljYXN0Rmlyc3QuZ2VuZXJhdGVkLmpzP2IwYzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IElTX0xFQUYsIE9GRlNFVCwgQ09VTlQsIFNQTElUX0FYSVMsIExFRlRfTk9ERSwgUklHSFRfTk9ERSB9IGZyb20gJy4uL3V0aWxzL25vZGVCdWZmZXJVdGlscy5qcyc7XG5pbXBvcnQgeyBCdWZmZXJTdGFjayB9IGZyb20gJy4uL3V0aWxzL0J1ZmZlclN0YWNrLmpzJztcbmltcG9ydCB7IGludGVyc2VjdFJheSB9IGZyb20gJy4uL3V0aWxzL2ludGVyc2VjdFV0aWxzLmpzJztcbmltcG9ydCB7IGludGVyc2VjdENsb3Nlc3RUcmkgfSBmcm9tICcuLi91dGlscy9pdGVyYXRpb25VdGlscy5nZW5lcmF0ZWQuanMnO1xuaW1wb3J0ICcuLi91dGlscy9pdGVyYXRpb25VdGlsc19pbmRpcmVjdC5nZW5lcmF0ZWQuanMnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGZyb20gXCJyYXljYXN0Rmlyc3QudGVtcGxhdGUuanNcIi4gKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmNvbnN0IF9ib3hJbnRlcnNlY3Rpb24gPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF94eXpGaWVsZHMgPSBbICd4JywgJ3knLCAneicgXTtcbmZ1bmN0aW9uIHJheWNhc3RGaXJzdCggYnZoLCByb290LCBzaWRlLCByYXkgKSB7XG5cblx0QnVmZmVyU3RhY2suc2V0QnVmZmVyKCBidmguX3Jvb3RzWyByb290IF0gKTtcblx0Y29uc3QgcmVzdWx0ID0gX3JheWNhc3RGaXJzdCggMCwgYnZoLCBzaWRlLCByYXkgKTtcblx0QnVmZmVyU3RhY2suY2xlYXJCdWZmZXIoKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59XG5cbmZ1bmN0aW9uIF9yYXljYXN0Rmlyc3QoIG5vZGVJbmRleDMyLCBidmgsIHNpZGUsIHJheSApIHtcblxuXHRjb25zdCB7IGZsb2F0MzJBcnJheSwgdWludDE2QXJyYXksIHVpbnQzMkFycmF5IH0gPSBCdWZmZXJTdGFjaztcblx0bGV0IG5vZGVJbmRleDE2ID0gbm9kZUluZGV4MzIgKiAyO1xuXG5cdGNvbnN0IGlzTGVhZiA9IElTX0xFQUYoIG5vZGVJbmRleDE2LCB1aW50MTZBcnJheSApO1xuXHRpZiAoIGlzTGVhZiApIHtcblxuXHRcdGNvbnN0IG9mZnNldCA9IE9GRlNFVCggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cdFx0Y29uc3QgY291bnQgPSBDT1VOVCggbm9kZUluZGV4MTYsIHVpbnQxNkFycmF5ICk7XG5cblxuXHRcdHJldHVybiBpbnRlcnNlY3RDbG9zZXN0VHJpKCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCApO1xuXG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGNvbnNpZGVyIHRoZSBwb3NpdGlvbiBvZiB0aGUgc3BsaXQgcGxhbmUgd2l0aCByZXNwZWN0IHRvIHRoZSBvbmNvbWluZyByYXk7IHdoaWNoZXZlciBkaXJlY3Rpb25cblx0XHQvLyB0aGUgcmF5IGlzIGNvbWluZyBmcm9tLCBsb29rIGZvciBhbiBpbnRlcnNlY3Rpb24gYW1vbmcgdGhhdCBzaWRlIG9mIHRoZSB0cmVlIGZpcnN0XG5cdFx0Y29uc3Qgc3BsaXRBeGlzID0gU1BMSVRfQVhJUyggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cdFx0Y29uc3QgeHl6QXhpcyA9IF94eXpGaWVsZHNbIHNwbGl0QXhpcyBdO1xuXHRcdGNvbnN0IHJheURpciA9IHJheS5kaXJlY3Rpb25bIHh5ekF4aXMgXTtcblx0XHRjb25zdCBsZWZ0VG9SaWdodCA9IHJheURpciA+PSAwO1xuXG5cdFx0Ly8gYzEgaXMgdGhlIGNoaWxkIHRvIGNoZWNrIGZpcnN0XG5cdFx0bGV0IGMxLCBjMjtcblx0XHRpZiAoIGxlZnRUb1JpZ2h0ICkge1xuXG5cdFx0XHRjMSA9IExFRlRfTk9ERSggbm9kZUluZGV4MzIgKTtcblx0XHRcdGMyID0gUklHSFRfTk9ERSggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjMSA9IFJJR0hUX05PREUoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdFx0YzIgPSBMRUZUX05PREUoIG5vZGVJbmRleDMyICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjMUludGVyc2VjdGlvbiA9IGludGVyc2VjdFJheSggYzEsIGZsb2F0MzJBcnJheSwgcmF5LCBfYm94SW50ZXJzZWN0aW9uICk7XG5cdFx0Y29uc3QgYzFSZXN1bHQgPSBjMUludGVyc2VjdGlvbiA/IF9yYXljYXN0Rmlyc3QoIGMxLCBidmgsIHNpZGUsIHJheSApIDogbnVsbDtcblxuXHRcdC8vIGlmIHdlIGdvdCBhbiBpbnRlcnNlY3Rpb24gaW4gdGhlIGZpcnN0IG5vZGUgYW5kIGl0J3MgY2xvc2VyIHRoYW4gdGhlIHNlY29uZCBub2RlJ3MgYm91bmRpbmdcblx0XHQvLyBib3gsIHdlIGRvbid0IG5lZWQgdG8gY29uc2lkZXIgdGhlIHNlY29uZCBub2RlIGJlY2F1c2UgaXQgY291bGRuJ3QgcG9zc2libHkgYmUgYSBiZXR0ZXIgcmVzdWx0XG5cdFx0aWYgKCBjMVJlc3VsdCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgaWYgdGhlIHBvaW50IGlzIHdpdGhpbiB0aGUgc2Vjb25kIGJvdW5kc1xuXHRcdFx0Ly8gXCJwb2ludFwiIGlzIGluIHRoZSBsb2NhbCBmcmFtZSBvZiB0aGUgYnZoXG5cdFx0XHRjb25zdCBwb2ludCA9IGMxUmVzdWx0LnBvaW50WyB4eXpBeGlzIF07XG5cdFx0XHRjb25zdCBpc091dHNpZGUgPSBsZWZ0VG9SaWdodCA/XG5cdFx0XHRcdHBvaW50IDw9IGZsb2F0MzJBcnJheVsgYzIgKyBzcGxpdEF4aXMgXSA6IC8vIG1pbiBib3VuZGluZyBkYXRhXG5cdFx0XHRcdHBvaW50ID49IGZsb2F0MzJBcnJheVsgYzIgKyBzcGxpdEF4aXMgKyAzIF07IC8vIG1heCBib3VuZGluZyBkYXRhXG5cblx0XHRcdGlmICggaXNPdXRzaWRlICkge1xuXG5cdFx0XHRcdHJldHVybiBjMVJlc3VsdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gZWl0aGVyIHRoZXJlIHdhcyBubyBpbnRlcnNlY3Rpb24gaW4gdGhlIGZpcnN0IG5vZGUsIG9yIHRoZXJlIGNvdWxkIHN0aWxsIGJlIGEgY2xvc2VyXG5cdFx0Ly8gaW50ZXJzZWN0aW9uIGluIHRoZSBzZWNvbmQsIHNvIGNoZWNrIHRoZSBzZWNvbmQgbm9kZSBhbmQgdGhlbiB0YWtlIHRoZSBiZXR0ZXIgb2YgdGhlIHR3b1xuXHRcdGNvbnN0IGMySW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0UmF5KCBjMiwgZmxvYXQzMkFycmF5LCByYXksIF9ib3hJbnRlcnNlY3Rpb24gKTtcblx0XHRjb25zdCBjMlJlc3VsdCA9IGMySW50ZXJzZWN0aW9uID8gX3JheWNhc3RGaXJzdCggYzIsIGJ2aCwgc2lkZSwgcmF5ICkgOiBudWxsO1xuXG5cdFx0aWYgKCBjMVJlc3VsdCAmJiBjMlJlc3VsdCApIHtcblxuXHRcdFx0cmV0dXJuIGMxUmVzdWx0LmRpc3RhbmNlIDw9IGMyUmVzdWx0LmRpc3RhbmNlID8gYzFSZXN1bHQgOiBjMlJlc3VsdDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBjMVJlc3VsdCB8fCBjMlJlc3VsdCB8fCBudWxsO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgeyByYXljYXN0Rmlyc3QgfTtcbiJdLCJuYW1lcyI6WyJWZWN0b3IzIiwiSVNfTEVBRiIsIk9GRlNFVCIsIkNPVU5UIiwiU1BMSVRfQVhJUyIsIkxFRlRfTk9ERSIsIlJJR0hUX05PREUiLCJCdWZmZXJTdGFjayIsImludGVyc2VjdFJheSIsImludGVyc2VjdENsb3Nlc3RUcmkiLCJfYm94SW50ZXJzZWN0aW9uIiwiX3h5ekZpZWxkcyIsInJheWNhc3RGaXJzdCIsImJ2aCIsInJvb3QiLCJzaWRlIiwicmF5Iiwic2V0QnVmZmVyIiwiX3Jvb3RzIiwicmVzdWx0IiwiX3JheWNhc3RGaXJzdCIsImNsZWFyQnVmZmVyIiwibm9kZUluZGV4MzIiLCJmbG9hdDMyQXJyYXkiLCJ1aW50MTZBcnJheSIsInVpbnQzMkFycmF5Iiwibm9kZUluZGV4MTYiLCJpc0xlYWYiLCJvZmZzZXQiLCJjb3VudCIsInNwbGl0QXhpcyIsInh5ekF4aXMiLCJyYXlEaXIiLCJkaXJlY3Rpb24iLCJsZWZ0VG9SaWdodCIsImMxIiwiYzIiLCJjMUludGVyc2VjdGlvbiIsImMxUmVzdWx0IiwicG9pbnQiLCJpc091dHNpZGUiLCJjMkludGVyc2VjdGlvbiIsImMyUmVzdWx0IiwiZGlzdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycastFirst_indirect: () => (/* binding */ raycastFirst_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\");\n\n\n\n\n\n\n/***********************************************************/ /* This file is generated from \"raycastFirst.template.js\". */ /***********************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _xyzFields = [\n    \"x\",\n    \"y\",\n    \"z\"\n];\nfunction raycastFirst_indirect(bvh, root, side, ray) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = _raycastFirst(0, bvh, side, ray);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n    return result;\n}\nfunction _raycastFirst(nodeIndex32, bvh, side, ray) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        return (0,_utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectClosestTri_indirect)(bvh, side, ray, offset, count);\n    } else {\n        // consider the position of the split plane with respect to the oncoming ray; whichever direction\n        // the ray is coming from, look for an intersection among that side of the tree first\n        const splitAxis = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.SPLIT_AXIS)(nodeIndex32, uint32Array);\n        const xyzAxis = _xyzFields[splitAxis];\n        const rayDir = ray.direction[xyzAxis];\n        const leftToRight = rayDir >= 0;\n        // c1 is the child to check first\n        let c1, c2;\n        if (leftToRight) {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        } else {\n            c1 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n            c2 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        }\n        const c1Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c1, float32Array, ray, _boxIntersection);\n        const c1Result = c1Intersection ? _raycastFirst(c1, bvh, side, ray) : null;\n        // if we got an intersection in the first node and it's closer than the second node's bounding\n        // box, we don't need to consider the second node because it couldn't possibly be a better result\n        if (c1Result) {\n            // check if the point is within the second bounds\n            // \"point\" is in the local frame of the bvh\n            const point = c1Result.point[xyzAxis];\n            const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : point >= float32Array[c2 + splitAxis + 3]; // max bounding data\n            if (isOutside) {\n                return c1Result;\n            }\n        }\n        // either there was no intersection in the first node, or there could still be a closer\n        // intersection in the second, so check the second node and then take the better of the two\n        const c2Intersection = (0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(c2, float32Array, ray, _boxIntersection);\n        const c2Result = c2Intersection ? _raycastFirst(c2, bvh, side, ray) : null;\n        if (c1Result && c2Result) {\n            return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n        } else {\n            return c1Result || c2Result || null;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdEZpcnN0X2luZGlyZWN0LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0M7QUFDd0U7QUFDbEQ7QUFDSTtBQUNaO0FBQytDO0FBRTdGLDJEQUEyRCxHQUMzRCwyREFBMkQsR0FDM0QsMkRBQTJELEdBQzNELE1BQU1VLG1CQUFtQixhQUFhLEdBQUcsSUFBSVYsMENBQU9BO0FBQ3BELE1BQU1XLGFBQWE7SUFBRTtJQUFLO0lBQUs7Q0FBSztBQUNwQyxTQUFTQyxzQkFBdUJDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLEdBQUc7SUFFbkRULDhEQUFXQSxDQUFDVSxTQUFTLENBQUVKLElBQUlLLE1BQU0sQ0FBRUosS0FBTTtJQUN6QyxNQUFNSyxTQUFTQyxjQUFlLEdBQUdQLEtBQUtFLE1BQU1DO0lBQzVDVCw4REFBV0EsQ0FBQ2MsV0FBVztJQUV2QixPQUFPRjtBQUVSO0FBRUEsU0FBU0MsY0FBZUUsV0FBVyxFQUFFVCxHQUFHLEVBQUVFLElBQUksRUFBRUMsR0FBRztJQUVsRCxNQUFNLEVBQUVPLFlBQVksRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUUsR0FBR2xCLDhEQUFXQTtJQUM5RCxJQUFJbUIsY0FBY0osY0FBYztJQUVoQyxNQUFNSyxTQUFTMUIsa0VBQU9BLENBQUV5QixhQUFhRjtJQUNyQyxJQUFLRyxRQUFTO1FBRWIsTUFBTUMsU0FBUzFCLGlFQUFNQSxDQUFFb0IsYUFBYUc7UUFDcEMsTUFBTUksUUFBUTFCLGdFQUFLQSxDQUFFdUIsYUFBYUY7UUFFbEMsT0FBT2YseUdBQTRCQSxDQUFFSSxLQUFLRSxNQUFNQyxLQUFLWSxRQUFRQztJQUc5RCxPQUFPO1FBRU4saUdBQWlHO1FBQ2pHLHFGQUFxRjtRQUNyRixNQUFNQyxZQUFZMUIscUVBQVVBLENBQUVrQixhQUFhRztRQUMzQyxNQUFNTSxVQUFVcEIsVUFBVSxDQUFFbUIsVUFBVztRQUN2QyxNQUFNRSxTQUFTaEIsSUFBSWlCLFNBQVMsQ0FBRUYsUUFBUztRQUN2QyxNQUFNRyxjQUFjRixVQUFVO1FBRTlCLGlDQUFpQztRQUNqQyxJQUFJRyxJQUFJQztRQUNSLElBQUtGLGFBQWM7WUFFbEJDLEtBQUs5QixvRUFBU0EsQ0FBRWlCO1lBQ2hCYyxLQUFLOUIscUVBQVVBLENBQUVnQixhQUFhRztRQUUvQixPQUFPO1lBRU5VLEtBQUs3QixxRUFBVUEsQ0FBRWdCLGFBQWFHO1lBQzlCVyxLQUFLL0Isb0VBQVNBLENBQUVpQjtRQUVqQjtRQUVBLE1BQU1lLGlCQUFpQjdCLHNFQUFZQSxDQUFFMkIsSUFBSVosY0FBY1AsS0FBS047UUFDNUQsTUFBTTRCLFdBQVdELGlCQUFpQmpCLGNBQWVlLElBQUl0QixLQUFLRSxNQUFNQyxPQUFRO1FBRXhFLDhGQUE4RjtRQUM5RixpR0FBaUc7UUFDakcsSUFBS3NCLFVBQVc7WUFFZixpREFBaUQ7WUFDakQsMkNBQTJDO1lBQzNDLE1BQU1DLFFBQVFELFNBQVNDLEtBQUssQ0FBRVIsUUFBUztZQUN2QyxNQUFNUyxZQUFZTixjQUNqQkssU0FBU2hCLFlBQVksQ0FBRWEsS0FBS04sVUFBVyxHQUN2Q1MsU0FBU2hCLFlBQVksQ0FBRWEsS0FBS04sWUFBWSxFQUFHLEVBQUUsb0JBQW9CO1lBRWxFLElBQUtVLFdBQVk7Z0JBRWhCLE9BQU9GO1lBRVI7UUFFRDtRQUVBLHVGQUF1RjtRQUN2RiwyRkFBMkY7UUFDM0YsTUFBTUcsaUJBQWlCakMsc0VBQVlBLENBQUU0QixJQUFJYixjQUFjUCxLQUFLTjtRQUM1RCxNQUFNZ0MsV0FBV0QsaUJBQWlCckIsY0FBZWdCLElBQUl2QixLQUFLRSxNQUFNQyxPQUFRO1FBRXhFLElBQUtzQixZQUFZSSxVQUFXO1lBRTNCLE9BQU9KLFNBQVNLLFFBQVEsSUFBSUQsU0FBU0MsUUFBUSxHQUFHTCxXQUFXSTtRQUU1RCxPQUFPO1lBRU4sT0FBT0osWUFBWUksWUFBWTtRQUVoQztJQUVEO0FBRUQ7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdEZpcnN0X2luZGlyZWN0LmdlbmVyYXRlZC5qcz83ZDQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBJU19MRUFGLCBPRkZTRVQsIENPVU5ULCBTUExJVF9BWElTLCBMRUZUX05PREUsIFJJR0hUX05PREUgfSBmcm9tICcuLi91dGlscy9ub2RlQnVmZmVyVXRpbHMuanMnO1xuaW1wb3J0IHsgQnVmZmVyU3RhY2sgfSBmcm9tICcuLi91dGlscy9CdWZmZXJTdGFjay5qcyc7XG5pbXBvcnQgeyBpbnRlcnNlY3RSYXkgfSBmcm9tICcuLi91dGlscy9pbnRlcnNlY3RVdGlscy5qcyc7XG5pbXBvcnQgJy4uL3V0aWxzL2l0ZXJhdGlvblV0aWxzLmdlbmVyYXRlZC5qcyc7XG5pbXBvcnQgeyBpbnRlcnNlY3RDbG9zZXN0VHJpX2luZGlyZWN0IH0gZnJvbSAnLi4vdXRpbHMvaXRlcmF0aW9uVXRpbHNfaW5kaXJlY3QuZ2VuZXJhdGVkLmpzJztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIFwicmF5Y2FzdEZpcnN0LnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5jb25zdCBfYm94SW50ZXJzZWN0aW9uID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfeHl6RmllbGRzID0gWyAneCcsICd5JywgJ3onIF07XG5mdW5jdGlvbiByYXljYXN0Rmlyc3RfaW5kaXJlY3QoIGJ2aCwgcm9vdCwgc2lkZSwgcmF5ICkge1xuXG5cdEJ1ZmZlclN0YWNrLnNldEJ1ZmZlciggYnZoLl9yb290c1sgcm9vdCBdICk7XG5cdGNvbnN0IHJlc3VsdCA9IF9yYXljYXN0Rmlyc3QoIDAsIGJ2aCwgc2lkZSwgcmF5ICk7XG5cdEJ1ZmZlclN0YWNrLmNsZWFyQnVmZmVyKCk7XG5cblx0cmV0dXJuIHJlc3VsdDtcblxufVxuXG5mdW5jdGlvbiBfcmF5Y2FzdEZpcnN0KCBub2RlSW5kZXgzMiwgYnZoLCBzaWRlLCByYXkgKSB7XG5cblx0Y29uc3QgeyBmbG9hdDMyQXJyYXksIHVpbnQxNkFycmF5LCB1aW50MzJBcnJheSB9ID0gQnVmZmVyU3RhY2s7XG5cdGxldCBub2RlSW5kZXgxNiA9IG5vZGVJbmRleDMyICogMjtcblxuXHRjb25zdCBpc0xlYWYgPSBJU19MRUFGKCBub2RlSW5kZXgxNiwgdWludDE2QXJyYXkgKTtcblx0aWYgKCBpc0xlYWYgKSB7XG5cblx0XHRjb25zdCBvZmZzZXQgPSBPRkZTRVQoIG5vZGVJbmRleDMyLCB1aW50MzJBcnJheSApO1xuXHRcdGNvbnN0IGNvdW50ID0gQ09VTlQoIG5vZGVJbmRleDE2LCB1aW50MTZBcnJheSApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdENsb3Nlc3RUcmlfaW5kaXJlY3QoIGJ2aCwgc2lkZSwgcmF5LCBvZmZzZXQsIGNvdW50ICk7XG5cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gY29uc2lkZXIgdGhlIHBvc2l0aW9uIG9mIHRoZSBzcGxpdCBwbGFuZSB3aXRoIHJlc3BlY3QgdG8gdGhlIG9uY29taW5nIHJheTsgd2hpY2hldmVyIGRpcmVjdGlvblxuXHRcdC8vIHRoZSByYXkgaXMgY29taW5nIGZyb20sIGxvb2sgZm9yIGFuIGludGVyc2VjdGlvbiBhbW9uZyB0aGF0IHNpZGUgb2YgdGhlIHRyZWUgZmlyc3Rcblx0XHRjb25zdCBzcGxpdEF4aXMgPSBTUExJVF9BWElTKCBub2RlSW5kZXgzMiwgdWludDMyQXJyYXkgKTtcblx0XHRjb25zdCB4eXpBeGlzID0gX3h5ekZpZWxkc1sgc3BsaXRBeGlzIF07XG5cdFx0Y29uc3QgcmF5RGlyID0gcmF5LmRpcmVjdGlvblsgeHl6QXhpcyBdO1xuXHRcdGNvbnN0IGxlZnRUb1JpZ2h0ID0gcmF5RGlyID49IDA7XG5cblx0XHQvLyBjMSBpcyB0aGUgY2hpbGQgdG8gY2hlY2sgZmlyc3Rcblx0XHRsZXQgYzEsIGMyO1xuXHRcdGlmICggbGVmdFRvUmlnaHQgKSB7XG5cblx0XHRcdGMxID0gTEVGVF9OT0RFKCBub2RlSW5kZXgzMiApO1xuXHRcdFx0YzIgPSBSSUdIVF9OT0RFKCBub2RlSW5kZXgzMiwgdWludDMyQXJyYXkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGMxID0gUklHSFRfTk9ERSggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cdFx0XHRjMiA9IExFRlRfTk9ERSggbm9kZUluZGV4MzIgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGMxSW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0UmF5KCBjMSwgZmxvYXQzMkFycmF5LCByYXksIF9ib3hJbnRlcnNlY3Rpb24gKTtcblx0XHRjb25zdCBjMVJlc3VsdCA9IGMxSW50ZXJzZWN0aW9uID8gX3JheWNhc3RGaXJzdCggYzEsIGJ2aCwgc2lkZSwgcmF5ICkgOiBudWxsO1xuXG5cdFx0Ly8gaWYgd2UgZ290IGFuIGludGVyc2VjdGlvbiBpbiB0aGUgZmlyc3Qgbm9kZSBhbmQgaXQncyBjbG9zZXIgdGhhbiB0aGUgc2Vjb25kIG5vZGUncyBib3VuZGluZ1xuXHRcdC8vIGJveCwgd2UgZG9uJ3QgbmVlZCB0byBjb25zaWRlciB0aGUgc2Vjb25kIG5vZGUgYmVjYXVzZSBpdCBjb3VsZG4ndCBwb3NzaWJseSBiZSBhIGJldHRlciByZXN1bHRcblx0XHRpZiAoIGMxUmVzdWx0ICkge1xuXG5cdFx0XHQvLyBjaGVjayBpZiB0aGUgcG9pbnQgaXMgd2l0aGluIHRoZSBzZWNvbmQgYm91bmRzXG5cdFx0XHQvLyBcInBvaW50XCIgaXMgaW4gdGhlIGxvY2FsIGZyYW1lIG9mIHRoZSBidmhcblx0XHRcdGNvbnN0IHBvaW50ID0gYzFSZXN1bHQucG9pbnRbIHh5ekF4aXMgXTtcblx0XHRcdGNvbnN0IGlzT3V0c2lkZSA9IGxlZnRUb1JpZ2h0ID9cblx0XHRcdFx0cG9pbnQgPD0gZmxvYXQzMkFycmF5WyBjMiArIHNwbGl0QXhpcyBdIDogLy8gbWluIGJvdW5kaW5nIGRhdGFcblx0XHRcdFx0cG9pbnQgPj0gZmxvYXQzMkFycmF5WyBjMiArIHNwbGl0QXhpcyArIDMgXTsgLy8gbWF4IGJvdW5kaW5nIGRhdGFcblxuXHRcdFx0aWYgKCBpc091dHNpZGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGMxUmVzdWx0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBlaXRoZXIgdGhlcmUgd2FzIG5vIGludGVyc2VjdGlvbiBpbiB0aGUgZmlyc3Qgbm9kZSwgb3IgdGhlcmUgY291bGQgc3RpbGwgYmUgYSBjbG9zZXJcblx0XHQvLyBpbnRlcnNlY3Rpb24gaW4gdGhlIHNlY29uZCwgc28gY2hlY2sgdGhlIHNlY29uZCBub2RlIGFuZCB0aGVuIHRha2UgdGhlIGJldHRlciBvZiB0aGUgdHdvXG5cdFx0Y29uc3QgYzJJbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3RSYXkoIGMyLCBmbG9hdDMyQXJyYXksIHJheSwgX2JveEludGVyc2VjdGlvbiApO1xuXHRcdGNvbnN0IGMyUmVzdWx0ID0gYzJJbnRlcnNlY3Rpb24gPyBfcmF5Y2FzdEZpcnN0KCBjMiwgYnZoLCBzaWRlLCByYXkgKSA6IG51bGw7XG5cblx0XHRpZiAoIGMxUmVzdWx0ICYmIGMyUmVzdWx0ICkge1xuXG5cdFx0XHRyZXR1cm4gYzFSZXN1bHQuZGlzdGFuY2UgPD0gYzJSZXN1bHQuZGlzdGFuY2UgPyBjMVJlc3VsdCA6IGMyUmVzdWx0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGMxUmVzdWx0IHx8IGMyUmVzdWx0IHx8IG51bGw7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IHJheWNhc3RGaXJzdF9pbmRpcmVjdCB9O1xuIl0sIm5hbWVzIjpbIlZlY3RvcjMiLCJJU19MRUFGIiwiT0ZGU0VUIiwiQ09VTlQiLCJTUExJVF9BWElTIiwiTEVGVF9OT0RFIiwiUklHSFRfTk9ERSIsIkJ1ZmZlclN0YWNrIiwiaW50ZXJzZWN0UmF5IiwiaW50ZXJzZWN0Q2xvc2VzdFRyaV9pbmRpcmVjdCIsIl9ib3hJbnRlcnNlY3Rpb24iLCJfeHl6RmllbGRzIiwicmF5Y2FzdEZpcnN0X2luZGlyZWN0IiwiYnZoIiwicm9vdCIsInNpZGUiLCJyYXkiLCJzZXRCdWZmZXIiLCJfcm9vdHMiLCJyZXN1bHQiLCJfcmF5Y2FzdEZpcnN0IiwiY2xlYXJCdWZmZXIiLCJub2RlSW5kZXgzMiIsImZsb2F0MzJBcnJheSIsInVpbnQxNkFycmF5IiwidWludDMyQXJyYXkiLCJub2RlSW5kZXgxNiIsImlzTGVhZiIsIm9mZnNldCIsImNvdW50Iiwic3BsaXRBeGlzIiwieHl6QXhpcyIsInJheURpciIsImRpcmVjdGlvbiIsImxlZnRUb1JpZ2h0IiwiYzEiLCJjMiIsImMxSW50ZXJzZWN0aW9uIiwiYzFSZXN1bHQiLCJwb2ludCIsImlzT3V0c2lkZSIsImMySW50ZXJzZWN0aW9uIiwiYzJSZXN1bHQiLCJkaXN0YW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raycast_indirect: () => (/* binding */ raycast_indirect)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/intersectUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n/* harmony import */ var _utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iterationUtils_indirect.generated.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\");\n\n\n\n\n\n\n/******************************************************/ /* This file is generated from \"raycast.template.js\". */ /******************************************************/ const _boxIntersection = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction raycast_indirect(bvh, root, side, ray, intersects) {\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.setBuffer(bvh._roots[root]);\n    _raycast(0, bvh, side, ray, intersects);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack.clearBuffer();\n}\nfunction _raycast(nodeIndex32, bvh, side, ray, intersects) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_1__.BufferStack;\n    const nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.COUNT)(nodeIndex16, uint16Array);\n        (0,_utils_iterationUtils_indirect_generated_js__WEBPACK_IMPORTED_MODULE_3__.intersectTris_indirect)(bvh, side, ray, offset, count, intersects);\n    } else {\n        const leftIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.LEFT_NODE)(nodeIndex32);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(leftIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(leftIndex, bvh, side, ray, intersects);\n        }\n        const rightIndex = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_2__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        if ((0,_utils_intersectUtils_js__WEBPACK_IMPORTED_MODULE_4__.intersectRay)(rightIndex, float32Array, ray, _boxIntersection)) {\n            _raycast(rightIndex, bvh, side, ray, intersects);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdF9pbmRpcmVjdC5nZW5lcmF0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdDO0FBQzBCO0FBQ2tDO0FBQ3RDO0FBQ1I7QUFDeUM7QUFFdkYsc0RBQXNELEdBQ3RELHNEQUFzRCxHQUN0RCxzREFBc0QsR0FFdEQsTUFBTVMsbUJBQW1CLGFBQWEsR0FBRyxJQUFJVCwwQ0FBT0E7QUFDcEQsU0FBU1UsaUJBQWtCQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFVBQVU7SUFFMURSLDhEQUFXQSxDQUFDUyxTQUFTLENBQUVMLElBQUlNLE1BQU0sQ0FBRUwsS0FBTTtJQUN6Q00sU0FBVSxHQUFHUCxLQUFLRSxNQUFNQyxLQUFLQztJQUM3QlIsOERBQVdBLENBQUNZLFdBQVc7QUFFeEI7QUFFQSxTQUFTRCxTQUFVRSxXQUFXLEVBQUVULEdBQUcsRUFBRUUsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFVBQVU7SUFFekQsTUFBTSxFQUFFTSxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFLEdBQUdoQiw4REFBV0E7SUFDOUQsTUFBTWlCLGNBQWNKLGNBQWM7SUFDbEMsTUFBTUssU0FBU3ZCLGtFQUFPQSxDQUFFc0IsYUFBYUY7SUFDckMsSUFBS0csUUFBUztRQUViLE1BQU1DLFNBQVN2QixpRUFBTUEsQ0FBRWlCLGFBQWFHO1FBQ3BDLE1BQU1JLFFBQVF2QixnRUFBS0EsQ0FBRW9CLGFBQWFGO1FBRWxDZCxtR0FBc0JBLENBQUVHLEtBQUtFLE1BQU1DLEtBQUtZLFFBQVFDLE9BQU9aO0lBR3hELE9BQU87UUFFTixNQUFNYSxZQUFZdkIsb0VBQVNBLENBQUVlO1FBQzdCLElBQUtuQixzRUFBWUEsQ0FBRTJCLFdBQVdQLGNBQWNQLEtBQUtMLG1CQUFxQjtZQUVyRVMsU0FBVVUsV0FBV2pCLEtBQUtFLE1BQU1DLEtBQUtDO1FBRXRDO1FBRUEsTUFBTWMsYUFBYXZCLHFFQUFVQSxDQUFFYyxhQUFhRztRQUM1QyxJQUFLdEIsc0VBQVlBLENBQUU0QixZQUFZUixjQUFjUCxLQUFLTCxtQkFBcUI7WUFFdEVTLFNBQVVXLFlBQVlsQixLQUFLRSxNQUFNQyxLQUFLQztRQUV2QztJQUVEO0FBRUQ7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL2Nhc3QvcmF5Y2FzdF9pbmRpcmVjdC5nZW5lcmF0ZWQuanM/OGRmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgaW50ZXJzZWN0UmF5IH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJzZWN0VXRpbHMuanMnO1xuaW1wb3J0IHsgSVNfTEVBRiwgT0ZGU0VULCBDT1VOVCwgTEVGVF9OT0RFLCBSSUdIVF9OT0RFIH0gZnJvbSAnLi4vdXRpbHMvbm9kZUJ1ZmZlclV0aWxzLmpzJztcbmltcG9ydCB7IEJ1ZmZlclN0YWNrIH0gZnJvbSAnLi4vdXRpbHMvQnVmZmVyU3RhY2suanMnO1xuaW1wb3J0ICcuLi91dGlscy9pdGVyYXRpb25VdGlscy5nZW5lcmF0ZWQuanMnO1xuaW1wb3J0IHsgaW50ZXJzZWN0VHJpc19pbmRpcmVjdCB9IGZyb20gJy4uL3V0aWxzL2l0ZXJhdGlvblV0aWxzX2luZGlyZWN0LmdlbmVyYXRlZC5qcyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGZyb20gXCJyYXljYXN0LnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBfYm94SW50ZXJzZWN0aW9uID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWN0b3IzKCk7XG5mdW5jdGlvbiByYXljYXN0X2luZGlyZWN0KCBidmgsIHJvb3QsIHNpZGUsIHJheSwgaW50ZXJzZWN0cyApIHtcblxuXHRCdWZmZXJTdGFjay5zZXRCdWZmZXIoIGJ2aC5fcm9vdHNbIHJvb3QgXSApO1xuXHRfcmF5Y2FzdCggMCwgYnZoLCBzaWRlLCByYXksIGludGVyc2VjdHMgKTtcblx0QnVmZmVyU3RhY2suY2xlYXJCdWZmZXIoKTtcblxufVxuXG5mdW5jdGlvbiBfcmF5Y2FzdCggbm9kZUluZGV4MzIsIGJ2aCwgc2lkZSwgcmF5LCBpbnRlcnNlY3RzICkge1xuXG5cdGNvbnN0IHsgZmxvYXQzMkFycmF5LCB1aW50MTZBcnJheSwgdWludDMyQXJyYXkgfSA9IEJ1ZmZlclN0YWNrO1xuXHRjb25zdCBub2RlSW5kZXgxNiA9IG5vZGVJbmRleDMyICogMjtcblx0Y29uc3QgaXNMZWFmID0gSVNfTEVBRiggbm9kZUluZGV4MTYsIHVpbnQxNkFycmF5ICk7XG5cdGlmICggaXNMZWFmICkge1xuXG5cdFx0Y29uc3Qgb2Zmc2V0ID0gT0ZGU0VUKCBub2RlSW5kZXgzMiwgdWludDMyQXJyYXkgKTtcblx0XHRjb25zdCBjb3VudCA9IENPVU5UKCBub2RlSW5kZXgxNiwgdWludDE2QXJyYXkgKTtcblxuXHRcdGludGVyc2VjdFRyaXNfaW5kaXJlY3QoIGJ2aCwgc2lkZSwgcmF5LCBvZmZzZXQsIGNvdW50LCBpbnRlcnNlY3RzICk7XG5cblxuXHR9IGVsc2Uge1xuXG5cdFx0Y29uc3QgbGVmdEluZGV4ID0gTEVGVF9OT0RFKCBub2RlSW5kZXgzMiApO1xuXHRcdGlmICggaW50ZXJzZWN0UmF5KCBsZWZ0SW5kZXgsIGZsb2F0MzJBcnJheSwgcmF5LCBfYm94SW50ZXJzZWN0aW9uICkgKSB7XG5cblx0XHRcdF9yYXljYXN0KCBsZWZ0SW5kZXgsIGJ2aCwgc2lkZSwgcmF5LCBpbnRlcnNlY3RzICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCByaWdodEluZGV4ID0gUklHSFRfTk9ERSggbm9kZUluZGV4MzIsIHVpbnQzMkFycmF5ICk7XG5cdFx0aWYgKCBpbnRlcnNlY3RSYXkoIHJpZ2h0SW5kZXgsIGZsb2F0MzJBcnJheSwgcmF5LCBfYm94SW50ZXJzZWN0aW9uICkgKSB7XG5cblx0XHRcdF9yYXljYXN0KCByaWdodEluZGV4LCBidmgsIHNpZGUsIHJheSwgaW50ZXJzZWN0cyApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgeyByYXljYXN0X2luZGlyZWN0IH07XG4iXSwibmFtZXMiOlsiVmVjdG9yMyIsImludGVyc2VjdFJheSIsIklTX0xFQUYiLCJPRkZTRVQiLCJDT1VOVCIsIkxFRlRfTk9ERSIsIlJJR0hUX05PREUiLCJCdWZmZXJTdGFjayIsImludGVyc2VjdFRyaXNfaW5kaXJlY3QiLCJfYm94SW50ZXJzZWN0aW9uIiwicmF5Y2FzdF9pbmRpcmVjdCIsImJ2aCIsInJvb3QiLCJzaWRlIiwicmF5IiwiaW50ZXJzZWN0cyIsInNldEJ1ZmZlciIsIl9yb290cyIsIl9yYXljYXN0IiwiY2xlYXJCdWZmZXIiLCJub2RlSW5kZXgzMiIsImZsb2F0MzJBcnJheSIsInVpbnQxNkFycmF5IiwidWludDMyQXJyYXkiLCJub2RlSW5kZXgxNiIsImlzTGVhZiIsIm9mZnNldCIsImNvdW50IiwibGVmdEluZGV4IiwicmlnaHRJbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   refit: () => (/* binding */ refit)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n\n/****************************************************/ /* This file is generated from \"refit.template.js\". */ /****************************************************/ function refit(bvh, nodeIndices = null) {\n    if (nodeIndices && Array.isArray(nodeIndices)) {\n        nodeIndices = new Set(nodeIndices);\n    }\n    const geometry = bvh.geometry;\n    const indexArr = geometry.index ? geometry.index.array : null;\n    const posAttr = geometry.attributes.position;\n    let buffer, uint32Array, uint16Array, float32Array;\n    let byteOffset = 0;\n    const roots = bvh._roots;\n    for(let i = 0, l = roots.length; i < l; i++){\n        buffer = roots[i];\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        float32Array = new Float32Array(buffer);\n        _traverse(0, byteOffset);\n        byteOffset += buffer.byteLength;\n    }\n    function _traverse(node32Index, byteOffset, force = false) {\n        const node16Index = node32Index * 2;\n        const isLeaf = uint16Array[node16Index + 15] === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.IS_LEAFNODE_FLAG;\n        if (isLeaf) {\n            const offset = uint32Array[node32Index + 6];\n            const count = uint16Array[node16Index + 14];\n            let minx = Infinity;\n            let miny = Infinity;\n            let minz = Infinity;\n            let maxx = -Infinity;\n            let maxy = -Infinity;\n            let maxz = -Infinity;\n            for(let i = 3 * offset, l = 3 * (offset + count); i < l; i++){\n                let index = indexArr[i];\n                const x = posAttr.getX(index);\n                const y = posAttr.getY(index);\n                const z = posAttr.getZ(index);\n                if (x < minx) minx = x;\n                if (x > maxx) maxx = x;\n                if (y < miny) miny = y;\n                if (y > maxy) maxy = y;\n                if (z < minz) minz = z;\n                if (z > maxz) maxz = z;\n            }\n            if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n                float32Array[node32Index + 0] = minx;\n                float32Array[node32Index + 1] = miny;\n                float32Array[node32Index + 2] = minz;\n                float32Array[node32Index + 3] = maxx;\n                float32Array[node32Index + 4] = maxy;\n                float32Array[node32Index + 5] = maxz;\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            const left = node32Index + 8;\n            const right = uint32Array[node32Index + 6];\n            // the identifying node indices provided by the shapecast function include offsets of all\n            // root buffers to guarantee they're unique between roots so offset left and right indices here.\n            const offsetLeft = left + byteOffset;\n            const offsetRight = right + byteOffset;\n            let forceChildren = force;\n            let includesLeft = false;\n            let includesRight = false;\n            if (nodeIndices) {\n                // if we see that neither the left or right child are included in the set that need to be updated\n                // then we assume that all children need to be updated.\n                if (!forceChildren) {\n                    includesLeft = nodeIndices.has(offsetLeft);\n                    includesRight = nodeIndices.has(offsetRight);\n                    forceChildren = !includesLeft && !includesRight;\n                }\n            } else {\n                includesLeft = true;\n                includesRight = true;\n            }\n            const traverseLeft = forceChildren || includesLeft;\n            const traverseRight = forceChildren || includesRight;\n            let leftChange = false;\n            if (traverseLeft) {\n                leftChange = _traverse(left, byteOffset, forceChildren);\n            }\n            let rightChange = false;\n            if (traverseRight) {\n                rightChange = _traverse(right, byteOffset, forceChildren);\n            }\n            const didChange = leftChange || rightChange;\n            if (didChange) {\n                for(let i = 0; i < 3; i++){\n                    const lefti = left + i;\n                    const righti = right + i;\n                    const minLeftValue = float32Array[lefti];\n                    const maxLeftValue = float32Array[lefti + 3];\n                    const minRightValue = float32Array[righti];\n                    const maxRightValue = float32Array[righti + 3];\n                    float32Array[node32Index + i] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n                    float32Array[node32Index + i + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n                }\n            }\n            return didChange;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   refit_indirect: () => (/* binding */ refit_indirect)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n\n/****************************************************/ /* This file is generated from \"refit.template.js\". */ /****************************************************/ function refit_indirect(bvh, nodeIndices = null) {\n    if (nodeIndices && Array.isArray(nodeIndices)) {\n        nodeIndices = new Set(nodeIndices);\n    }\n    const geometry = bvh.geometry;\n    const indexArr = geometry.index ? geometry.index.array : null;\n    const posAttr = geometry.attributes.position;\n    let buffer, uint32Array, uint16Array, float32Array;\n    let byteOffset = 0;\n    const roots = bvh._roots;\n    for(let i = 0, l = roots.length; i < l; i++){\n        buffer = roots[i];\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        float32Array = new Float32Array(buffer);\n        _traverse(0, byteOffset);\n        byteOffset += buffer.byteLength;\n    }\n    function _traverse(node32Index, byteOffset, force = false) {\n        const node16Index = node32Index * 2;\n        const isLeaf = uint16Array[node16Index + 15] === _Constants_js__WEBPACK_IMPORTED_MODULE_0__.IS_LEAFNODE_FLAG;\n        if (isLeaf) {\n            const offset = uint32Array[node32Index + 6];\n            const count = uint16Array[node16Index + 14];\n            let minx = Infinity;\n            let miny = Infinity;\n            let minz = Infinity;\n            let maxx = -Infinity;\n            let maxy = -Infinity;\n            let maxz = -Infinity;\n            for(let i = offset, l = offset + count; i < l; i++){\n                const t = 3 * bvh.resolveTriangleIndex(i);\n                for(let j = 0; j < 3; j++){\n                    let index = t + j;\n                    index = indexArr ? indexArr[index] : index;\n                    const x = posAttr.getX(index);\n                    const y = posAttr.getY(index);\n                    const z = posAttr.getZ(index);\n                    if (x < minx) minx = x;\n                    if (x > maxx) maxx = x;\n                    if (y < miny) miny = y;\n                    if (y > maxy) maxy = y;\n                    if (z < minz) minz = z;\n                    if (z > maxz) maxz = z;\n                }\n            }\n            if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n                float32Array[node32Index + 0] = minx;\n                float32Array[node32Index + 1] = miny;\n                float32Array[node32Index + 2] = minz;\n                float32Array[node32Index + 3] = maxx;\n                float32Array[node32Index + 4] = maxy;\n                float32Array[node32Index + 5] = maxz;\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            const left = node32Index + 8;\n            const right = uint32Array[node32Index + 6];\n            // the identifying node indices provided by the shapecast function include offsets of all\n            // root buffers to guarantee they're unique between roots so offset left and right indices here.\n            const offsetLeft = left + byteOffset;\n            const offsetRight = right + byteOffset;\n            let forceChildren = force;\n            let includesLeft = false;\n            let includesRight = false;\n            if (nodeIndices) {\n                // if we see that neither the left or right child are included in the set that need to be updated\n                // then we assume that all children need to be updated.\n                if (!forceChildren) {\n                    includesLeft = nodeIndices.has(offsetLeft);\n                    includesRight = nodeIndices.has(offsetRight);\n                    forceChildren = !includesLeft && !includesRight;\n                }\n            } else {\n                includesLeft = true;\n                includesRight = true;\n            }\n            const traverseLeft = forceChildren || includesLeft;\n            const traverseRight = forceChildren || includesRight;\n            let leftChange = false;\n            if (traverseLeft) {\n                leftChange = _traverse(left, byteOffset, forceChildren);\n            }\n            let rightChange = false;\n            if (traverseRight) {\n                rightChange = _traverse(right, byteOffset, forceChildren);\n            }\n            const didChange = leftChange || rightChange;\n            if (didChange) {\n                for(let i = 0; i < 3; i++){\n                    const lefti = left + i;\n                    const righti = right + i;\n                    const minLeftValue = float32Array[lefti];\n                    const maxLeftValue = float32Array[lefti + 3];\n                    const minRightValue = float32Array[righti];\n                    const maxRightValue = float32Array[righti + 3];\n                    float32Array[node32Index + i] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n                    float32Array[node32Index + i + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n                }\n            }\n            return didChange;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/shapecast.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/shapecast.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shapecast: () => (/* binding */ shapecast)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Constants.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/Constants.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n/* harmony import */ var _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/PrimitivePool.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\");\n/* harmony import */ var _utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/nodeBufferUtils.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\");\n/* harmony import */ var _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BufferStack.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\");\n\n\n\n\n\n\nlet _box1, _box2;\nconst boxStack = [];\nconst boxPool = /* @__PURE__ */ new _utils_PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__.PrimitivePool(()=>new three__WEBPACK_IMPORTED_MODULE_1__.Box3());\nfunction shapecast(bvh, root, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset) {\n    // setup\n    _box1 = boxPool.getPrimitive();\n    _box2 = boxPool.getPrimitive();\n    boxStack.push(_box1, _box2);\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack.setBuffer(bvh._roots[root]);\n    const result = shapecastTraverse(0, bvh.geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n    // cleanup\n    _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack.clearBuffer();\n    boxPool.releasePrimitive(_box1);\n    boxPool.releasePrimitive(_box2);\n    boxStack.pop();\n    boxStack.pop();\n    const length = boxStack.length;\n    if (length > 0) {\n        _box2 = boxStack[length - 1];\n        _box1 = boxStack[length - 2];\n    }\n    return result;\n}\nfunction shapecastTraverse(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc = null, nodeIndexByteOffset = 0, depth = 0) {\n    const { float32Array, uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack;\n    let nodeIndex16 = nodeIndex32 * 2;\n    const isLeaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(nodeIndex16, uint16Array);\n    if (isLeaf) {\n        const offset = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.OFFSET)(nodeIndex32, uint32Array);\n        const count = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.COUNT)(nodeIndex16, uint16Array);\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(nodeIndex32), float32Array, _box1);\n        return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1);\n    } else {\n        const left = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.LEFT_NODE)(nodeIndex32);\n        const right = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.RIGHT_NODE)(nodeIndex32, uint32Array);\n        let c1 = left;\n        let c2 = right;\n        let score1, score2;\n        let box1, box2;\n        if (nodeScoreFunc) {\n            box1 = _box1;\n            box2 = _box2;\n            // bounding data is not offset\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c1), float32Array, box1);\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c2), float32Array, box2);\n            score1 = nodeScoreFunc(box1);\n            score2 = nodeScoreFunc(box2);\n            if (score2 < score1) {\n                c1 = right;\n                c2 = left;\n                const temp = score1;\n                score1 = score2;\n                score2 = temp;\n                box1 = box2;\n            // box2 is always set before use below\n            }\n        }\n        // Check box 1 intersection\n        if (!box1) {\n            box1 = _box1;\n            (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c1), float32Array, box1);\n        }\n        const isC1Leaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(c1 * 2, uint16Array);\n        const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);\n        let c1StopTraversal;\n        if (c1Intersection === _Constants_js__WEBPACK_IMPORTED_MODULE_5__.CONTAINED) {\n            const offset = getLeftOffset(c1);\n            const end = getRightEndOffset(c1);\n            const count = end - offset;\n            c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1);\n        } else {\n            c1StopTraversal = c1Intersection && shapecastTraverse(c1, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n        }\n        if (c1StopTraversal) return true;\n        // Check box 2 intersection\n        // cached box2 will have been overwritten by previous traversal\n        box2 = _box2;\n        (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_4__.arrayToBox)((0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.BOUNDING_DATA_INDEX)(c2), float32Array, box2);\n        const isC2Leaf = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(c2 * 2, uint16Array);\n        const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);\n        let c2StopTraversal;\n        if (c2Intersection === _Constants_js__WEBPACK_IMPORTED_MODULE_5__.CONTAINED) {\n            const offset = getLeftOffset(c2);\n            const end = getRightEndOffset(c2);\n            const count = end - offset;\n            c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2);\n        } else {\n            c2StopTraversal = c2Intersection && shapecastTraverse(c2, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n        }\n        if (c2StopTraversal) return true;\n        return false;\n        // Define these inside the function so it has access to the local variables needed\n        // when converting to the buffer equivalents\n        function getLeftOffset(nodeIndex32) {\n            const { uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack;\n            let nodeIndex16 = nodeIndex32 * 2;\n            // traverse until we find a leaf\n            while(!(0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(nodeIndex16, uint16Array)){\n                nodeIndex32 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.LEFT_NODE)(nodeIndex32);\n                nodeIndex16 = nodeIndex32 * 2;\n            }\n            return (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.OFFSET)(nodeIndex32, uint32Array);\n        }\n        function getRightEndOffset(nodeIndex32) {\n            const { uint16Array, uint32Array } = _utils_BufferStack_js__WEBPACK_IMPORTED_MODULE_2__.BufferStack;\n            let nodeIndex16 = nodeIndex32 * 2;\n            // traverse until we find a leaf\n            while(!(0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.IS_LEAF)(nodeIndex16, uint16Array)){\n                // adjust offset to point to the right node\n                nodeIndex32 = (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.RIGHT_NODE)(nodeIndex32, uint32Array);\n                nodeIndex16 = nodeIndex32 * 2;\n            }\n            // return the end offset of the triangle range\n            return (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.OFFSET)(nodeIndex32, uint32Array) + (0,_utils_nodeBufferUtils_js__WEBPACK_IMPORTED_MODULE_3__.COUNT)(nodeIndex16, uint16Array);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/cast/shapecast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferStack: () => (/* binding */ BufferStack)\n/* harmony export */ });\nclass _BufferStack {\n    constructor(){\n        this.float32Array = null;\n        this.uint16Array = null;\n        this.uint32Array = null;\n        const stack = [];\n        let prevBuffer = null;\n        this.setBuffer = (buffer)=>{\n            if (prevBuffer) {\n                stack.push(prevBuffer);\n            }\n            prevBuffer = buffer;\n            this.float32Array = new Float32Array(buffer);\n            this.uint16Array = new Uint16Array(buffer);\n            this.uint32Array = new Uint32Array(buffer);\n        };\n        this.clearBuffer = ()=>{\n            prevBuffer = null;\n            this.float32Array = null;\n            this.uint16Array = null;\n            this.uint32Array = null;\n            if (stack.length !== 0) {\n                this.setBuffer(stack.pop());\n            }\n        };\n    }\n}\nconst BufferStack = new _BufferStack();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL0J1ZmZlclN0YWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQTtJQUVMQyxhQUFjO1FBRWIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFFbkIsTUFBTUMsUUFBUSxFQUFFO1FBQ2hCLElBQUlDLGFBQWE7UUFDakIsSUFBSSxDQUFDQyxTQUFTLEdBQUdDLENBQUFBO1lBRWhCLElBQUtGLFlBQWE7Z0JBRWpCRCxNQUFNSSxJQUFJLENBQUVIO1lBRWI7WUFFQUEsYUFBYUU7WUFDYixJQUFJLENBQUNOLFlBQVksR0FBRyxJQUFJUSxhQUFjRjtZQUN0QyxJQUFJLENBQUNMLFdBQVcsR0FBRyxJQUFJUSxZQUFhSDtZQUNwQyxJQUFJLENBQUNKLFdBQVcsR0FBRyxJQUFJUSxZQUFhSjtRQUVyQztRQUVBLElBQUksQ0FBQ0ssV0FBVyxHQUFHO1lBRWxCUCxhQUFhO1lBQ2IsSUFBSSxDQUFDSixZQUFZLEdBQUc7WUFDcEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7WUFDbkIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7WUFFbkIsSUFBS0MsTUFBTVMsTUFBTSxLQUFLLEdBQUk7Z0JBRXpCLElBQUksQ0FBQ1AsU0FBUyxDQUFFRixNQUFNVSxHQUFHO1lBRTFCO1FBRUQ7SUFFRDtBQUVEO0FBRU8sTUFBTUMsY0FBYyxJQUFJaEIsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvQnVmZmVyU3RhY2suanM/NTFjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBfQnVmZmVyU3RhY2sge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5mbG9hdDMyQXJyYXkgPSBudWxsO1xuXHRcdHRoaXMudWludDE2QXJyYXkgPSBudWxsO1xuXHRcdHRoaXMudWludDMyQXJyYXkgPSBudWxsO1xuXG5cdFx0Y29uc3Qgc3RhY2sgPSBbXTtcblx0XHRsZXQgcHJldkJ1ZmZlciA9IG51bGw7XG5cdFx0dGhpcy5zZXRCdWZmZXIgPSBidWZmZXIgPT4ge1xuXG5cdFx0XHRpZiAoIHByZXZCdWZmZXIgKSB7XG5cblx0XHRcdFx0c3RhY2sucHVzaCggcHJldkJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHByZXZCdWZmZXIgPSBidWZmZXI7XG5cdFx0XHR0aGlzLmZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIGJ1ZmZlciApO1xuXHRcdFx0dGhpcy51aW50MTZBcnJheSA9IG5ldyBVaW50MTZBcnJheSggYnVmZmVyICk7XG5cdFx0XHR0aGlzLnVpbnQzMkFycmF5ID0gbmV3IFVpbnQzMkFycmF5KCBidWZmZXIgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmNsZWFyQnVmZmVyID0gKCkgPT4ge1xuXG5cdFx0XHRwcmV2QnVmZmVyID0gbnVsbDtcblx0XHRcdHRoaXMuZmxvYXQzMkFycmF5ID0gbnVsbDtcblx0XHRcdHRoaXMudWludDE2QXJyYXkgPSBudWxsO1xuXHRcdFx0dGhpcy51aW50MzJBcnJheSA9IG51bGw7XG5cblx0XHRcdGlmICggc3RhY2subGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuc2V0QnVmZmVyKCBzdGFjay5wb3AoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxufVxuXG5leHBvcnQgY29uc3QgQnVmZmVyU3RhY2sgPSBuZXcgX0J1ZmZlclN0YWNrKCk7XG4iXSwibmFtZXMiOlsiX0J1ZmZlclN0YWNrIiwiY29uc3RydWN0b3IiLCJmbG9hdDMyQXJyYXkiLCJ1aW50MTZBcnJheSIsInVpbnQzMkFycmF5Iiwic3RhY2siLCJwcmV2QnVmZmVyIiwic2V0QnVmZmVyIiwiYnVmZmVyIiwicHVzaCIsIkZsb2F0MzJBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJjbGVhckJ1ZmZlciIsImxlbmd0aCIsInBvcCIsIkJ1ZmZlclN0YWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/BufferStack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectRay: () => (/* binding */ intersectRay)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ArrayBoxUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\");\n\n\nconst _boundingBox = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nfunction intersectRay(nodeIndex32, array, ray, target) {\n    (0,_utils_ArrayBoxUtilities_js__WEBPACK_IMPORTED_MODULE_1__.arrayToBox)(nodeIndex32, array, _boundingBox);\n    return ray.intersectBox(_boundingBox, target);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL2ludGVyc2VjdFV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QjtBQUNpQztBQUU5RCxNQUFNRSxlQUFlLGFBQWEsR0FBRyxJQUFJRix1Q0FBSUE7QUFDdEMsU0FBU0csYUFBY0MsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsTUFBTTtJQUU1RE4sdUVBQVVBLENBQUVHLGFBQWFDLE9BQU9IO0lBQ2hDLE9BQU9JLElBQUlFLFlBQVksQ0FBRU4sY0FBY0s7QUFFeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL2ludGVyc2VjdFV0aWxzLmpzP2Q1ZjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm94MyB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGFycmF5VG9Cb3ggfSBmcm9tICcuLi8uLi91dGlscy9BcnJheUJveFV0aWxpdGllcy5qcyc7XG5cbmNvbnN0IF9ib3VuZGluZ0JveCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgQm94MygpO1xuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdFJheSggbm9kZUluZGV4MzIsIGFycmF5LCByYXksIHRhcmdldCApIHtcblxuXHRhcnJheVRvQm94KCBub2RlSW5kZXgzMiwgYXJyYXksIF9ib3VuZGluZ0JveCApO1xuXHRyZXR1cm4gcmF5LmludGVyc2VjdEJveCggX2JvdW5kaW5nQm94LCB0YXJnZXQgKTtcblxufVxuIl0sIm5hbWVzIjpbIkJveDMiLCJhcnJheVRvQm94IiwiX2JvdW5kaW5nQm94IiwiaW50ZXJzZWN0UmF5Iiwibm9kZUluZGV4MzIiLCJhcnJheSIsInJheSIsInRhcmdldCIsImludGVyc2VjdEJveCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectClosestTri: () => (/* binding */ intersectClosestTri),\n/* harmony export */   intersectTris: () => (/* binding */ intersectTris),\n/* harmony export */   iterateOverTriangles: () => (/* binding */ iterateOverTriangles)\n/* harmony export */ });\n/* harmony import */ var _utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ThreeRayIntersectUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n\n\n/*************************************************************/ /* This file is generated from \"iterationUtils.template.js\". */ /*************************************************************/ /* eslint-disable indent */ function intersectTris(bvh, side, ray, offset, count, intersections) {\n    const { geometry, _indirectBuffer } = bvh;\n    for(let i = offset, end = offset + count; i < end; i++){\n        (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, i, intersections);\n    }\n}\nfunction intersectClosestTri(bvh, side, ray, offset, count) {\n    const { geometry, _indirectBuffer } = bvh;\n    let dist = Infinity;\n    let res = null;\n    for(let i = offset, end = offset + count; i < end; i++){\n        let intersection;\n        intersection = (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, i);\n        if (intersection && intersection.distance < dist) {\n            res = intersection;\n            dist = intersection.distance;\n        }\n    }\n    return res;\n}\nfunction iterateOverTriangles(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle) {\n    const { geometry } = bvh;\n    const { index } = geometry;\n    const pos = geometry.attributes.position;\n    for(let i = offset, l = count + offset; i < l; i++){\n        let tri;\n        tri = i;\n        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__.setTriangle)(triangle, tri * 3, index, pos);\n        triangle.needsUpdate = true;\n        if (intersectsTriangleFunc(triangle, tri, contained, depth)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL2l0ZXJhdGlvblV0aWxzLmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5RTtBQUNWO0FBRS9ELDZEQUE2RCxHQUM3RCw2REFBNkQsR0FDN0QsNkRBQTZELEdBQzdELHlCQUF5QixHQUV6QixTQUFTRSxjQUFlQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsYUFBYTtJQUVuRSxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsZUFBZSxFQUFFLEdBQUdQO0lBQ3RDLElBQU0sSUFBSVEsSUFBSUwsUUFBUU0sTUFBTU4sU0FBU0MsT0FBT0ksSUFBSUMsS0FBS0QsSUFBTztRQUczRFgsa0ZBQVlBLENBQUVTLFVBQVVMLE1BQU1DLEtBQUtNLEdBQUdIO0lBR3ZDO0FBRUQ7QUFFQSxTQUFTSyxvQkFBcUJWLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsS0FBSztJQUUxRCxNQUFNLEVBQUVFLFFBQVEsRUFBRUMsZUFBZSxFQUFFLEdBQUdQO0lBQ3RDLElBQUlXLE9BQU9DO0lBQ1gsSUFBSUMsTUFBTTtJQUNWLElBQU0sSUFBSUwsSUFBSUwsUUFBUU0sTUFBTU4sU0FBU0MsT0FBT0ksSUFBSUMsS0FBS0QsSUFBTztRQUUzRCxJQUFJTTtRQUVKQSxlQUFlakIsa0ZBQVlBLENBQUVTLFVBQVVMLE1BQU1DLEtBQUtNO1FBR2xELElBQUtNLGdCQUFnQkEsYUFBYUMsUUFBUSxHQUFHSixNQUFPO1lBRW5ERSxNQUFNQztZQUNOSCxPQUFPRyxhQUFhQyxRQUFRO1FBRTdCO0lBRUQ7SUFFQSxPQUFPRjtBQUVSO0FBRUEsU0FBU0cscUJBQ1JiLE1BQU0sRUFDTkMsS0FBSyxFQUNMSixHQUFHLEVBQ0hpQixzQkFBc0IsRUFDdEJDLFNBQVMsRUFDVEMsS0FBSyxFQUNMQyxRQUFRO0lBR1IsTUFBTSxFQUFFZCxRQUFRLEVBQUUsR0FBR047SUFDckIsTUFBTSxFQUFFcUIsS0FBSyxFQUFFLEdBQUdmO0lBQ2xCLE1BQU1nQixNQUFNaEIsU0FBU2lCLFVBQVUsQ0FBQ0MsUUFBUTtJQUN4QyxJQUFNLElBQUloQixJQUFJTCxRQUFRc0IsSUFBSXJCLFFBQVFELFFBQVFLLElBQUlpQixHQUFHakIsSUFBTztRQUV2RCxJQUFJa0I7UUFFSkEsTUFBTWxCO1FBRU5WLHdFQUFXQSxDQUFFc0IsVUFBVU0sTUFBTSxHQUFHTCxPQUFPQztRQUN2Q0YsU0FBU08sV0FBVyxHQUFHO1FBRXZCLElBQUtWLHVCQUF3QkcsVUFBVU0sS0FBS1IsV0FBV0MsUUFBVTtZQUVoRSxPQUFPO1FBRVI7SUFFRDtJQUVBLE9BQU87QUFFUjtBQUVvRSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL2NvcmUvdXRpbHMvaXRlcmF0aW9uVXRpbHMuZ2VuZXJhdGVkLmpzPzQ3ZjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW50ZXJzZWN0VHJpIH0gZnJvbSAnLi4vLi4vdXRpbHMvVGhyZWVSYXlJbnRlcnNlY3RVdGlsaXRpZXMuanMnO1xuaW1wb3J0IHsgc2V0VHJpYW5nbGUgfSBmcm9tICcuLi8uLi91dGlscy9UcmlhbmdsZVV0aWxpdGllcy5qcyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIFwiaXRlcmF0aW9uVXRpbHMudGVtcGxhdGUuanNcIi4gKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyogZXNsaW50LWRpc2FibGUgaW5kZW50ICovXG5cbmZ1bmN0aW9uIGludGVyc2VjdFRyaXMoIGJ2aCwgc2lkZSwgcmF5LCBvZmZzZXQsIGNvdW50LCBpbnRlcnNlY3Rpb25zICkge1xuXG5cdGNvbnN0IHsgZ2VvbWV0cnksIF9pbmRpcmVjdEJ1ZmZlciB9ID0gYnZoO1xuXHRmb3IgKCBsZXQgaSA9IG9mZnNldCwgZW5kID0gb2Zmc2V0ICsgY291bnQ7IGkgPCBlbmQ7IGkgKysgKSB7XG5cblxuXHRcdGludGVyc2VjdFRyaSggZ2VvbWV0cnksIHNpZGUsIHJheSwgaSwgaW50ZXJzZWN0aW9ucyApO1xuXG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdENsb3Nlc3RUcmkoIGJ2aCwgc2lkZSwgcmF5LCBvZmZzZXQsIGNvdW50ICkge1xuXG5cdGNvbnN0IHsgZ2VvbWV0cnksIF9pbmRpcmVjdEJ1ZmZlciB9ID0gYnZoO1xuXHRsZXQgZGlzdCA9IEluZmluaXR5O1xuXHRsZXQgcmVzID0gbnVsbDtcblx0Zm9yICggbGV0IGkgPSBvZmZzZXQsIGVuZCA9IG9mZnNldCArIGNvdW50OyBpIDwgZW5kOyBpICsrICkge1xuXG5cdFx0bGV0IGludGVyc2VjdGlvbjtcblxuXHRcdGludGVyc2VjdGlvbiA9IGludGVyc2VjdFRyaSggZ2VvbWV0cnksIHNpZGUsIHJheSwgaSApO1xuXG5cblx0XHRpZiAoIGludGVyc2VjdGlvbiAmJiBpbnRlcnNlY3Rpb24uZGlzdGFuY2UgPCBkaXN0ICkge1xuXG5cdFx0XHRyZXMgPSBpbnRlcnNlY3Rpb247XG5cdFx0XHRkaXN0ID0gaW50ZXJzZWN0aW9uLmRpc3RhbmNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcmVzO1xuXG59XG5cbmZ1bmN0aW9uIGl0ZXJhdGVPdmVyVHJpYW5nbGVzKFxuXHRvZmZzZXQsXG5cdGNvdW50LFxuXHRidmgsXG5cdGludGVyc2VjdHNUcmlhbmdsZUZ1bmMsXG5cdGNvbnRhaW5lZCxcblx0ZGVwdGgsXG5cdHRyaWFuZ2xlXG4pIHtcblxuXHRjb25zdCB7IGdlb21ldHJ5IH0gPSBidmg7XG5cdGNvbnN0IHsgaW5kZXggfSA9IGdlb21ldHJ5O1xuXHRjb25zdCBwb3MgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRmb3IgKCBsZXQgaSA9IG9mZnNldCwgbCA9IGNvdW50ICsgb2Zmc2V0OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGxldCB0cmk7XG5cblx0XHR0cmkgPSBpO1xuXG5cdFx0c2V0VHJpYW5nbGUoIHRyaWFuZ2xlLCB0cmkgKiAzLCBpbmRleCwgcG9zICk7XG5cdFx0dHJpYW5nbGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0aWYgKCBpbnRlcnNlY3RzVHJpYW5nbGVGdW5jKCB0cmlhbmdsZSwgdHJpLCBjb250YWluZWQsIGRlcHRoICkgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuZXhwb3J0IHsgaW50ZXJzZWN0Q2xvc2VzdFRyaSwgaW50ZXJzZWN0VHJpcywgaXRlcmF0ZU92ZXJUcmlhbmdsZXMgfTtcbiJdLCJuYW1lcyI6WyJpbnRlcnNlY3RUcmkiLCJzZXRUcmlhbmdsZSIsImludGVyc2VjdFRyaXMiLCJidmgiLCJzaWRlIiwicmF5Iiwib2Zmc2V0IiwiY291bnQiLCJpbnRlcnNlY3Rpb25zIiwiZ2VvbWV0cnkiLCJfaW5kaXJlY3RCdWZmZXIiLCJpIiwiZW5kIiwiaW50ZXJzZWN0Q2xvc2VzdFRyaSIsImRpc3QiLCJJbmZpbml0eSIsInJlcyIsImludGVyc2VjdGlvbiIsImRpc3RhbmNlIiwiaXRlcmF0ZU92ZXJUcmlhbmdsZXMiLCJpbnRlcnNlY3RzVHJpYW5nbGVGdW5jIiwiY29udGFpbmVkIiwiZGVwdGgiLCJ0cmlhbmdsZSIsImluZGV4IiwicG9zIiwiYXR0cmlidXRlcyIsInBvc2l0aW9uIiwibCIsInRyaSIsIm5lZWRzVXBkYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectClosestTri_indirect: () => (/* binding */ intersectClosestTri_indirect),\n/* harmony export */   intersectTris_indirect: () => (/* binding */ intersectTris_indirect),\n/* harmony export */   iterateOverTriangles_indirect: () => (/* binding */ iterateOverTriangles_indirect)\n/* harmony export */ });\n/* harmony import */ var _utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ThreeRayIntersectUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js\");\n/* harmony import */ var _utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/TriangleUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\");\n\n\n/*************************************************************/ /* This file is generated from \"iterationUtils.template.js\". */ /*************************************************************/ /* eslint-disable indent */ function intersectTris_indirect(bvh, side, ray, offset, count, intersections) {\n    const { geometry, _indirectBuffer } = bvh;\n    for(let i = offset, end = offset + count; i < end; i++){\n        let vi = _indirectBuffer ? _indirectBuffer[i] : i;\n        (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, vi, intersections);\n    }\n}\nfunction intersectClosestTri_indirect(bvh, side, ray, offset, count) {\n    const { geometry, _indirectBuffer } = bvh;\n    let dist = Infinity;\n    let res = null;\n    for(let i = offset, end = offset + count; i < end; i++){\n        let intersection;\n        intersection = (0,_utils_ThreeRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_0__.intersectTri)(geometry, side, ray, _indirectBuffer ? _indirectBuffer[i] : i);\n        if (intersection && intersection.distance < dist) {\n            res = intersection;\n            dist = intersection.distance;\n        }\n    }\n    return res;\n}\nfunction iterateOverTriangles_indirect(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle) {\n    const { geometry } = bvh;\n    const { index } = geometry;\n    const pos = geometry.attributes.position;\n    for(let i = offset, l = count + offset; i < l; i++){\n        let tri;\n        tri = bvh.resolveTriangleIndex(i);\n        (0,_utils_TriangleUtilities_js__WEBPACK_IMPORTED_MODULE_1__.setTriangle)(triangle, tri * 3, index, pos);\n        triangle.needsUpdate = true;\n        if (intersectsTriangleFunc(triangle, tri, contained, depth)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL2l0ZXJhdGlvblV0aWxzX2luZGlyZWN0LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5RTtBQUNWO0FBRS9ELDZEQUE2RCxHQUM3RCw2REFBNkQsR0FDN0QsNkRBQTZELEdBQzdELHlCQUF5QixHQUV6QixTQUFTRSx1QkFBd0JDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxhQUFhO0lBRTVFLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxlQUFlLEVBQUUsR0FBR1A7SUFDdEMsSUFBTSxJQUFJUSxJQUFJTCxRQUFRTSxNQUFNTixTQUFTQyxPQUFPSSxJQUFJQyxLQUFLRCxJQUFPO1FBRTNELElBQUlFLEtBQUtILGtCQUFrQkEsZUFBZSxDQUFFQyxFQUFHLEdBQUdBO1FBQ2xEWCxrRkFBWUEsQ0FBRVMsVUFBVUwsTUFBTUMsS0FBS1EsSUFBSUw7SUFHeEM7QUFFRDtBQUVBLFNBQVNNLDZCQUE4QlgsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxLQUFLO0lBRW5FLE1BQU0sRUFBRUUsUUFBUSxFQUFFQyxlQUFlLEVBQUUsR0FBR1A7SUFDdEMsSUFBSVksT0FBT0M7SUFDWCxJQUFJQyxNQUFNO0lBQ1YsSUFBTSxJQUFJTixJQUFJTCxRQUFRTSxNQUFNTixTQUFTQyxPQUFPSSxJQUFJQyxLQUFLRCxJQUFPO1FBRTNELElBQUlPO1FBQ0pBLGVBQWVsQixrRkFBWUEsQ0FBRVMsVUFBVUwsTUFBTUMsS0FBS0ssa0JBQWtCQSxlQUFlLENBQUVDLEVBQUcsR0FBR0E7UUFHM0YsSUFBS08sZ0JBQWdCQSxhQUFhQyxRQUFRLEdBQUdKLE1BQU87WUFFbkRFLE1BQU1DO1lBQ05ILE9BQU9HLGFBQWFDLFFBQVE7UUFFN0I7SUFFRDtJQUVBLE9BQU9GO0FBRVI7QUFFQSxTQUFTRyw4QkFDUmQsTUFBTSxFQUNOQyxLQUFLLEVBQ0xKLEdBQUcsRUFDSGtCLHNCQUFzQixFQUN0QkMsU0FBUyxFQUNUQyxLQUFLLEVBQ0xDLFFBQVE7SUFHUixNQUFNLEVBQUVmLFFBQVEsRUFBRSxHQUFHTjtJQUNyQixNQUFNLEVBQUVzQixLQUFLLEVBQUUsR0FBR2hCO0lBQ2xCLE1BQU1pQixNQUFNakIsU0FBU2tCLFVBQVUsQ0FBQ0MsUUFBUTtJQUN4QyxJQUFNLElBQUlqQixJQUFJTCxRQUFRdUIsSUFBSXRCLFFBQVFELFFBQVFLLElBQUlrQixHQUFHbEIsSUFBTztRQUV2RCxJQUFJbUI7UUFDSkEsTUFBTTNCLElBQUk0QixvQkFBb0IsQ0FBRXBCO1FBRWhDVix3RUFBV0EsQ0FBRXVCLFVBQVVNLE1BQU0sR0FBR0wsT0FBT0M7UUFDdkNGLFNBQVNRLFdBQVcsR0FBRztRQUV2QixJQUFLWCx1QkFBd0JHLFVBQVVNLEtBQUtSLFdBQVdDLFFBQVU7WUFFaEUsT0FBTztRQUVSO0lBRUQ7SUFFQSxPQUFPO0FBRVI7QUFFK0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL2l0ZXJhdGlvblV0aWxzX2luZGlyZWN0LmdlbmVyYXRlZC5qcz85NDY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludGVyc2VjdFRyaSB9IGZyb20gJy4uLy4uL3V0aWxzL1RocmVlUmF5SW50ZXJzZWN0VXRpbGl0aWVzLmpzJztcbmltcG9ydCB7IHNldFRyaWFuZ2xlIH0gZnJvbSAnLi4vLi4vdXRpbHMvVHJpYW5nbGVVdGlsaXRpZXMuanMnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBcIml0ZXJhdGlvblV0aWxzLnRlbXBsYXRlLmpzXCIuICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qIGVzbGludC1kaXNhYmxlIGluZGVudCAqL1xuXG5mdW5jdGlvbiBpbnRlcnNlY3RUcmlzX2luZGlyZWN0KCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCwgaW50ZXJzZWN0aW9ucyApIHtcblxuXHRjb25zdCB7IGdlb21ldHJ5LCBfaW5kaXJlY3RCdWZmZXIgfSA9IGJ2aDtcblx0Zm9yICggbGV0IGkgPSBvZmZzZXQsIGVuZCA9IG9mZnNldCArIGNvdW50OyBpIDwgZW5kOyBpICsrICkge1xuXG5cdFx0bGV0IHZpID0gX2luZGlyZWN0QnVmZmVyID8gX2luZGlyZWN0QnVmZmVyWyBpIF0gOiBpO1xuXHRcdGludGVyc2VjdFRyaSggZ2VvbWV0cnksIHNpZGUsIHJheSwgdmksIGludGVyc2VjdGlvbnMgKTtcblxuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RDbG9zZXN0VHJpX2luZGlyZWN0KCBidmgsIHNpZGUsIHJheSwgb2Zmc2V0LCBjb3VudCApIHtcblxuXHRjb25zdCB7IGdlb21ldHJ5LCBfaW5kaXJlY3RCdWZmZXIgfSA9IGJ2aDtcblx0bGV0IGRpc3QgPSBJbmZpbml0eTtcblx0bGV0IHJlcyA9IG51bGw7XG5cdGZvciAoIGxldCBpID0gb2Zmc2V0LCBlbmQgPSBvZmZzZXQgKyBjb3VudDsgaSA8IGVuZDsgaSArKyApIHtcblxuXHRcdGxldCBpbnRlcnNlY3Rpb247XG5cdFx0aW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0VHJpKCBnZW9tZXRyeSwgc2lkZSwgcmF5LCBfaW5kaXJlY3RCdWZmZXIgPyBfaW5kaXJlY3RCdWZmZXJbIGkgXSA6IGkgKTtcblxuXG5cdFx0aWYgKCBpbnRlcnNlY3Rpb24gJiYgaW50ZXJzZWN0aW9uLmRpc3RhbmNlIDwgZGlzdCApIHtcblxuXHRcdFx0cmVzID0gaW50ZXJzZWN0aW9uO1xuXHRcdFx0ZGlzdCA9IGludGVyc2VjdGlvbi5kaXN0YW5jZTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHJlcztcblxufVxuXG5mdW5jdGlvbiBpdGVyYXRlT3ZlclRyaWFuZ2xlc19pbmRpcmVjdChcblx0b2Zmc2V0LFxuXHRjb3VudCxcblx0YnZoLFxuXHRpbnRlcnNlY3RzVHJpYW5nbGVGdW5jLFxuXHRjb250YWluZWQsXG5cdGRlcHRoLFxuXHR0cmlhbmdsZVxuKSB7XG5cblx0Y29uc3QgeyBnZW9tZXRyeSB9ID0gYnZoO1xuXHRjb25zdCB7IGluZGV4IH0gPSBnZW9tZXRyeTtcblx0Y29uc3QgcG9zID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0Zm9yICggbGV0IGkgPSBvZmZzZXQsIGwgPSBjb3VudCArIG9mZnNldDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRsZXQgdHJpO1xuXHRcdHRyaSA9IGJ2aC5yZXNvbHZlVHJpYW5nbGVJbmRleCggaSApO1xuXG5cdFx0c2V0VHJpYW5nbGUoIHRyaWFuZ2xlLCB0cmkgKiAzLCBpbmRleCwgcG9zICk7XG5cdFx0dHJpYW5nbGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0aWYgKCBpbnRlcnNlY3RzVHJpYW5nbGVGdW5jKCB0cmlhbmdsZSwgdHJpLCBjb250YWluZWQsIGRlcHRoICkgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuZXhwb3J0IHsgaW50ZXJzZWN0Q2xvc2VzdFRyaV9pbmRpcmVjdCwgaW50ZXJzZWN0VHJpc19pbmRpcmVjdCwgaXRlcmF0ZU92ZXJUcmlhbmdsZXNfaW5kaXJlY3QgfTtcbiJdLCJuYW1lcyI6WyJpbnRlcnNlY3RUcmkiLCJzZXRUcmlhbmdsZSIsImludGVyc2VjdFRyaXNfaW5kaXJlY3QiLCJidmgiLCJzaWRlIiwicmF5Iiwib2Zmc2V0IiwiY291bnQiLCJpbnRlcnNlY3Rpb25zIiwiZ2VvbWV0cnkiLCJfaW5kaXJlY3RCdWZmZXIiLCJpIiwiZW5kIiwidmkiLCJpbnRlcnNlY3RDbG9zZXN0VHJpX2luZGlyZWN0IiwiZGlzdCIsIkluZmluaXR5IiwicmVzIiwiaW50ZXJzZWN0aW9uIiwiZGlzdGFuY2UiLCJpdGVyYXRlT3ZlclRyaWFuZ2xlc19pbmRpcmVjdCIsImludGVyc2VjdHNUcmlhbmdsZUZ1bmMiLCJjb250YWluZWQiLCJkZXB0aCIsInRyaWFuZ2xlIiwiaW5kZXgiLCJwb3MiLCJhdHRyaWJ1dGVzIiwicG9zaXRpb24iLCJsIiwidHJpIiwicmVzb2x2ZVRyaWFuZ2xlSW5kZXgiLCJuZWVkc1VwZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BOUNDING_DATA_INDEX: () => (/* binding */ BOUNDING_DATA_INDEX),\n/* harmony export */   COUNT: () => (/* binding */ COUNT),\n/* harmony export */   IS_LEAF: () => (/* binding */ IS_LEAF),\n/* harmony export */   LEFT_NODE: () => (/* binding */ LEFT_NODE),\n/* harmony export */   OFFSET: () => (/* binding */ OFFSET),\n/* harmony export */   RIGHT_NODE: () => (/* binding */ RIGHT_NODE),\n/* harmony export */   SPLIT_AXIS: () => (/* binding */ SPLIT_AXIS)\n/* harmony export */ });\nfunction IS_LEAF(n16, uint16Array) {\n    return uint16Array[n16 + 15] === 0xFFFF;\n}\nfunction OFFSET(n32, uint32Array) {\n    return uint32Array[n32 + 6];\n}\nfunction COUNT(n16, uint16Array) {\n    return uint16Array[n16 + 14];\n}\nfunction LEFT_NODE(n32) {\n    return n32 + 8;\n}\nfunction RIGHT_NODE(n32, uint32Array) {\n    return uint32Array[n32 + 6];\n}\nfunction SPLIT_AXIS(n32, uint32Array) {\n    return uint32Array[n32 + 7];\n}\nfunction BOUNDING_DATA_INDEX(n32) {\n    return n32;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9jb3JlL3V0aWxzL25vZGVCdWZmZXJVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQU8sU0FBU0EsUUFBU0MsR0FBRyxFQUFFQyxXQUFXO0lBRXhDLE9BQU9BLFdBQVcsQ0FBRUQsTUFBTSxHQUFJLEtBQUs7QUFFcEM7QUFFTyxTQUFTRSxPQUFRQyxHQUFHLEVBQUVDLFdBQVc7SUFFdkMsT0FBT0EsV0FBVyxDQUFFRCxNQUFNLEVBQUc7QUFFOUI7QUFFTyxTQUFTRSxNQUFPTCxHQUFHLEVBQUVDLFdBQVc7SUFFdEMsT0FBT0EsV0FBVyxDQUFFRCxNQUFNLEdBQUk7QUFFL0I7QUFFTyxTQUFTTSxVQUFXSCxHQUFHO0lBRTdCLE9BQU9BLE1BQU07QUFFZDtBQUVPLFNBQVNJLFdBQVlKLEdBQUcsRUFBRUMsV0FBVztJQUUzQyxPQUFPQSxXQUFXLENBQUVELE1BQU0sRUFBRztBQUU5QjtBQUVPLFNBQVNLLFdBQVlMLEdBQUcsRUFBRUMsV0FBVztJQUUzQyxPQUFPQSxXQUFXLENBQUVELE1BQU0sRUFBRztBQUU5QjtBQUVPLFNBQVNNLG9CQUFxQk4sR0FBRztJQUV2QyxPQUFPQTtBQUVSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvY29yZS91dGlscy9ub2RlQnVmZmVyVXRpbHMuanM/ZmUxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gSVNfTEVBRiggbjE2LCB1aW50MTZBcnJheSApIHtcblxuXHRyZXR1cm4gdWludDE2QXJyYXlbIG4xNiArIDE1IF0gPT09IDB4RkZGRjtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gT0ZGU0VUKCBuMzIsIHVpbnQzMkFycmF5ICkge1xuXG5cdHJldHVybiB1aW50MzJBcnJheVsgbjMyICsgNiBdO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDT1VOVCggbjE2LCB1aW50MTZBcnJheSApIHtcblxuXHRyZXR1cm4gdWludDE2QXJyYXlbIG4xNiArIDE0IF07XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExFRlRfTk9ERSggbjMyICkge1xuXG5cdHJldHVybiBuMzIgKyA4O1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSSUdIVF9OT0RFKCBuMzIsIHVpbnQzMkFycmF5ICkge1xuXG5cdHJldHVybiB1aW50MzJBcnJheVsgbjMyICsgNiBdO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTUExJVF9BWElTKCBuMzIsIHVpbnQzMkFycmF5ICkge1xuXG5cdHJldHVybiB1aW50MzJBcnJheVsgbjMyICsgNyBdO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCT1VORElOR19EQVRBX0lOREVYKCBuMzIgKSB7XG5cblx0cmV0dXJuIG4zMjtcblxufVxuIl0sIm5hbWVzIjpbIklTX0xFQUYiLCJuMTYiLCJ1aW50MTZBcnJheSIsIk9GRlNFVCIsIm4zMiIsInVpbnQzMkFycmF5IiwiQ09VTlQiLCJMRUZUX05PREUiLCJSSUdIVF9OT0RFIiwiU1BMSVRfQVhJUyIsIkJPVU5ESU5HX0RBVEFfSU5ERVgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedTriangle: () => (/* binding */ ExtendedTriangle)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SeparatingAxisBounds.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js\");\n/* harmony import */ var _MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MathUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/MathUtilities.js\");\n\n\n\nconst ZERO_EPSILON = 1e-15;\nfunction isNearZero(value) {\n    return Math.abs(value) < ZERO_EPSILON;\n}\nclass ExtendedTriangle extends three__WEBPACK_IMPORTED_MODULE_0__.Triangle {\n    constructor(...args){\n        super(...args);\n        this.isExtendedTriangle = true;\n        this.satAxes = new Array(4).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.satBounds = new Array(4).fill().map(()=>new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds());\n        this.points = [\n            this.a,\n            this.b,\n            this.c\n        ];\n        this.sphere = new three__WEBPACK_IMPORTED_MODULE_0__.Sphere();\n        this.plane = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\n        this.needsUpdate = true;\n    }\n    intersectsSphere(sphere) {\n        return (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__.sphereIntersectTriangle)(sphere, this);\n    }\n    update() {\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const points = this.points;\n        const satAxes = this.satAxes;\n        const satBounds = this.satBounds;\n        const axis0 = satAxes[0];\n        const sab0 = satBounds[0];\n        this.getNormal(axis0);\n        sab0.setFromPoints(axis0, points);\n        const axis1 = satAxes[1];\n        const sab1 = satBounds[1];\n        axis1.subVectors(a, b);\n        sab1.setFromPoints(axis1, points);\n        const axis2 = satAxes[2];\n        const sab2 = satBounds[2];\n        axis2.subVectors(b, c);\n        sab2.setFromPoints(axis2, points);\n        const axis3 = satAxes[3];\n        const sab3 = satBounds[3];\n        axis3.subVectors(c, a);\n        sab3.setFromPoints(axis3, points);\n        this.sphere.setFromPoints(this.points);\n        this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n        this.needsUpdate = false;\n    }\n}\nExtendedTriangle.prototype.closestPointToSegment = function() {\n    const point1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const point2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const edge = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    return function distanceToSegment(segment, target1 = null, target2 = null) {\n        const { start, end } = segment;\n        const points = this.points;\n        let distSq;\n        let closestDistanceSq = Infinity;\n        // check the triangle edges\n        for(let i = 0; i < 3; i++){\n            const nexti = (i + 1) % 3;\n            edge.start.copy(points[i]);\n            edge.end.copy(points[nexti]);\n            (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__.closestPointsSegmentToSegment)(edge, segment, point1, point2);\n            distSq = point1.distanceToSquared(point2);\n            if (distSq < closestDistanceSq) {\n                closestDistanceSq = distSq;\n                if (target1) target1.copy(point1);\n                if (target2) target2.copy(point2);\n            }\n        }\n        // check end points\n        this.closestPointToPoint(start, point1);\n        distSq = start.distanceToSquared(point1);\n        if (distSq < closestDistanceSq) {\n            closestDistanceSq = distSq;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(start);\n        }\n        this.closestPointToPoint(end, point1);\n        distSq = end.distanceToSquared(point1);\n        if (distSq < closestDistanceSq) {\n            closestDistanceSq = distSq;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(end);\n        }\n        return Math.sqrt(closestDistanceSq);\n    };\n}();\nExtendedTriangle.prototype.intersectsTriangle = function() {\n    const saTri2 = new ExtendedTriangle();\n    const arr1 = new Array(3);\n    const arr2 = new Array(3);\n    const cachedSatBounds = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedSatBounds2 = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedAxis = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const tempDir = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const edge = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const edge1 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const edge2 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const tempPoint = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    function triIntersectPlane(tri, plane, targetEdge) {\n        // find the edge that intersects the other triangle plane\n        const points = tri.points;\n        let count = 0;\n        let startPointIntersection = -1;\n        for(let i = 0; i < 3; i++){\n            const { start, end } = edge;\n            start.copy(points[i]);\n            end.copy(points[(i + 1) % 3]);\n            edge.delta(dir);\n            const startIntersects = isNearZero(plane.distanceToPoint(start));\n            if (isNearZero(plane.normal.dot(dir)) && startIntersects) {\n                // if the edge lies on the plane then take the line\n                targetEdge.copy(edge);\n                count = 2;\n                break;\n            }\n            // check if the start point is near the plane because \"intersectLine\" is not robust to that case\n            const doesIntersect = plane.intersectLine(edge, tempPoint);\n            if (!doesIntersect && startIntersects) {\n                tempPoint.copy(start);\n            }\n            // ignore the end point\n            if ((doesIntersect || startIntersects) && !isNearZero(tempPoint.distanceTo(end))) {\n                if (count <= 1) {\n                    // assign to the start or end point and save which index was snapped to\n                    // the start point if necessary\n                    const point = count === 1 ? targetEdge.start : targetEdge.end;\n                    point.copy(tempPoint);\n                    if (startIntersects) {\n                        startPointIntersection = count;\n                    }\n                } else if (count >= 2) {\n                    // if we're here that means that there must have been one point that had\n                    // snapped to the start point so replace it here\n                    const point = startPointIntersection === 1 ? targetEdge.start : targetEdge.end;\n                    point.copy(tempPoint);\n                    count = 2;\n                    break;\n                }\n                count++;\n                if (count === 2 && startPointIntersection === -1) {\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n    // TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n    // be a line contained by both triangles if not a different special case somehow represented in the return result.\n    return function intersectsTriangle(other, target = null, suppressLog = false) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        if (!other.isExtendedTriangle) {\n            saTri2.copy(other);\n            saTri2.update();\n            other = saTri2;\n        } else if (other.needsUpdate) {\n            other.update();\n        }\n        const plane1 = this.plane;\n        const plane2 = other.plane;\n        if (Math.abs(plane1.normal.dot(plane2.normal)) > 1.0 - 1e-10) {\n            // perform separating axis intersection test only for coplanar triangles\n            const satBounds1 = this.satBounds;\n            const satAxes1 = this.satAxes;\n            arr2[0] = other.a;\n            arr2[1] = other.b;\n            arr2[2] = other.c;\n            for(let i = 0; i < 4; i++){\n                const sb = satBounds1[i];\n                const sa = satAxes1[i];\n                cachedSatBounds.setFromPoints(sa, arr2);\n                if (sb.isSeparated(cachedSatBounds)) return false;\n            }\n            const satBounds2 = other.satBounds;\n            const satAxes2 = other.satAxes;\n            arr1[0] = this.a;\n            arr1[1] = this.b;\n            arr1[2] = this.c;\n            for(let i = 0; i < 4; i++){\n                const sb = satBounds2[i];\n                const sa = satAxes2[i];\n                cachedSatBounds.setFromPoints(sa, arr1);\n                if (sb.isSeparated(cachedSatBounds)) return false;\n            }\n            // check crossed axes\n            for(let i = 0; i < 4; i++){\n                const sa1 = satAxes1[i];\n                for(let i2 = 0; i2 < 4; i2++){\n                    const sa2 = satAxes2[i2];\n                    cachedAxis.crossVectors(sa1, sa2);\n                    cachedSatBounds.setFromPoints(cachedAxis, arr1);\n                    cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n                    if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n                }\n            }\n            if (target) {\n                // TODO find two points that intersect on the edges and make that the result\n                if (!suppressLog) {\n                    console.warn(\"ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.\");\n                }\n                target.start.set(0, 0, 0);\n                target.end.set(0, 0, 0);\n            }\n            return true;\n        } else {\n            // find the edge that intersects the other triangle plane\n            const count1 = triIntersectPlane(this, plane2, edge1);\n            if (count1 === 1 && other.containsPoint(edge1.end)) {\n                if (target) {\n                    target.start.copy(edge1.end);\n                    target.end.copy(edge1.end);\n                }\n                return true;\n            } else if (count1 !== 2) {\n                return false;\n            }\n            // find the other triangles edge that intersects this plane\n            const count2 = triIntersectPlane(other, plane1, edge2);\n            if (count2 === 1 && this.containsPoint(edge2.end)) {\n                if (target) {\n                    target.start.copy(edge2.end);\n                    target.end.copy(edge2.end);\n                }\n                return true;\n            } else if (count2 !== 2) {\n                return false;\n            }\n            // find swap the second edge so both lines are running the same direction\n            edge1.delta(dir1);\n            edge2.delta(dir2);\n            if (dir1.dot(dir2) < 0) {\n                let tmp = edge2.start;\n                edge2.start = edge2.end;\n                edge2.end = tmp;\n            }\n            // check if the edges are overlapping\n            const s1 = edge1.start.dot(dir1);\n            const e1 = edge1.end.dot(dir1);\n            const s2 = edge2.start.dot(dir1);\n            const e2 = edge2.end.dot(dir1);\n            const separated1 = e1 < s2;\n            const separated2 = s1 < e2;\n            if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {\n                return false;\n            }\n            // assign the target output\n            if (target) {\n                tempDir.subVectors(edge1.start, edge2.start);\n                if (tempDir.dot(dir1) > 0) {\n                    target.start.copy(edge1.start);\n                } else {\n                    target.start.copy(edge2.start);\n                }\n                tempDir.subVectors(edge1.end, edge2.end);\n                if (tempDir.dot(dir1) < 0) {\n                    target.end.copy(edge1.end);\n                } else {\n                    target.end.copy(edge2.end);\n                }\n            }\n            return true;\n        }\n    };\n}();\nExtendedTriangle.prototype.distanceToPoint = function() {\n    const target = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function distanceToPoint(point) {\n        this.closestPointToPoint(point, target);\n        return point.distanceTo(target);\n    };\n}();\nExtendedTriangle.prototype.distanceToTriangle = function() {\n    const point = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const point2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const cornerFields = [\n        \"a\",\n        \"b\",\n        \"c\"\n    ];\n    const line1 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    const line2 = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    return function distanceToTriangle(other, target1 = null, target2 = null) {\n        const lineTarget = target1 || target2 ? line1 : null;\n        if (this.intersectsTriangle(other, lineTarget)) {\n            if (target1 || target2) {\n                if (target1) lineTarget.getCenter(target1);\n                if (target2) lineTarget.getCenter(target2);\n            }\n            return 0;\n        }\n        let closestDistanceSq = Infinity;\n        // check all point distances\n        for(let i = 0; i < 3; i++){\n            let dist;\n            const field = cornerFields[i];\n            const otherVec = other[field];\n            this.closestPointToPoint(otherVec, point);\n            dist = otherVec.distanceToSquared(point);\n            if (dist < closestDistanceSq) {\n                closestDistanceSq = dist;\n                if (target1) target1.copy(point);\n                if (target2) target2.copy(otherVec);\n            }\n            const thisVec = this[field];\n            other.closestPointToPoint(thisVec, point);\n            dist = thisVec.distanceToSquared(point);\n            if (dist < closestDistanceSq) {\n                closestDistanceSq = dist;\n                if (target1) target1.copy(thisVec);\n                if (target2) target2.copy(point);\n            }\n        }\n        for(let i = 0; i < 3; i++){\n            const f11 = cornerFields[i];\n            const f12 = cornerFields[(i + 1) % 3];\n            line1.set(this[f11], this[f12]);\n            for(let i2 = 0; i2 < 3; i2++){\n                const f21 = cornerFields[i2];\n                const f22 = cornerFields[(i2 + 1) % 3];\n                line2.set(other[f21], other[f22]);\n                (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_2__.closestPointsSegmentToSegment)(line1, line2, point, point2);\n                const dist = point.distanceToSquared(point2);\n                if (dist < closestDistanceSq) {\n                    closestDistanceSq = dist;\n                    if (target1) target1.copy(point);\n                    if (target2) target2.copy(point2);\n                }\n            }\n        }\n        return Math.sqrt(closestDistanceSq);\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9tYXRoL0V4dGVuZGVkVHJpYW5nbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRTtBQUNDO0FBQzJCO0FBRTVGLE1BQU1RLGVBQWU7QUFDckIsU0FBU0MsV0FBWUMsS0FBSztJQUV6QixPQUFPQyxLQUFLQyxHQUFHLENBQUVGLFNBQVVGO0FBRTVCO0FBRU8sTUFBTUsseUJBQXlCYiwyQ0FBUUE7SUFFN0NjLFlBQWEsR0FBR0MsSUFBSSxDQUFHO1FBRXRCLEtBQUssSUFBS0E7UUFFVixJQUFJLENBQUNDLGtCQUFrQixHQUFHO1FBQzFCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDLE1BQU8sR0FBSUMsSUFBSSxHQUFHQyxHQUFHLENBQUUsSUFBTSxJQUFJbkIsMENBQU9BO1FBQzNELElBQUksQ0FBQ29CLFNBQVMsR0FBRyxJQUFJSCxNQUFPLEdBQUlDLElBQUksR0FBR0MsR0FBRyxDQUFFLElBQU0sSUFBSWYsMEVBQW9CQTtRQUMxRSxJQUFJLENBQUNpQixNQUFNLEdBQUc7WUFBRSxJQUFJLENBQUNDLENBQUM7WUFBRSxJQUFJLENBQUNDLENBQUM7WUFBRSxJQUFJLENBQUNDLENBQUM7U0FBRTtRQUN4QyxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJdkIseUNBQU1BO1FBQ3hCLElBQUksQ0FBQ3dCLEtBQUssR0FBRyxJQUFJdkIsd0NBQUtBO1FBQ3RCLElBQUksQ0FBQ3dCLFdBQVcsR0FBRztJQUVwQjtJQUVBQyxpQkFBa0JILE1BQU0sRUFBRztRQUUxQixPQUFPbkIsMEVBQXVCQSxDQUFFbUIsUUFBUSxJQUFJO0lBRTdDO0lBRUFJLFNBQVM7UUFFUixNQUFNUCxJQUFJLElBQUksQ0FBQ0EsQ0FBQztRQUNoQixNQUFNQyxJQUFJLElBQUksQ0FBQ0EsQ0FBQztRQUNoQixNQUFNQyxJQUFJLElBQUksQ0FBQ0EsQ0FBQztRQUNoQixNQUFNSCxTQUFTLElBQUksQ0FBQ0EsTUFBTTtRQUUxQixNQUFNTCxVQUFVLElBQUksQ0FBQ0EsT0FBTztRQUM1QixNQUFNSSxZQUFZLElBQUksQ0FBQ0EsU0FBUztRQUVoQyxNQUFNVSxRQUFRZCxPQUFPLENBQUUsRUFBRztRQUMxQixNQUFNZSxPQUFPWCxTQUFTLENBQUUsRUFBRztRQUMzQixJQUFJLENBQUNZLFNBQVMsQ0FBRUY7UUFDaEJDLEtBQUtFLGFBQWEsQ0FBRUgsT0FBT1Q7UUFFM0IsTUFBTWEsUUFBUWxCLE9BQU8sQ0FBRSxFQUFHO1FBQzFCLE1BQU1tQixPQUFPZixTQUFTLENBQUUsRUFBRztRQUMzQmMsTUFBTUUsVUFBVSxDQUFFZCxHQUFHQztRQUNyQlksS0FBS0YsYUFBYSxDQUFFQyxPQUFPYjtRQUUzQixNQUFNZ0IsUUFBUXJCLE9BQU8sQ0FBRSxFQUFHO1FBQzFCLE1BQU1zQixPQUFPbEIsU0FBUyxDQUFFLEVBQUc7UUFDM0JpQixNQUFNRCxVQUFVLENBQUViLEdBQUdDO1FBQ3JCYyxLQUFLTCxhQUFhLENBQUVJLE9BQU9oQjtRQUUzQixNQUFNa0IsUUFBUXZCLE9BQU8sQ0FBRSxFQUFHO1FBQzFCLE1BQU13QixPQUFPcEIsU0FBUyxDQUFFLEVBQUc7UUFDM0JtQixNQUFNSCxVQUFVLENBQUVaLEdBQUdGO1FBQ3JCa0IsS0FBS1AsYUFBYSxDQUFFTSxPQUFPbEI7UUFFM0IsSUFBSSxDQUFDSSxNQUFNLENBQUNRLGFBQWEsQ0FBRSxJQUFJLENBQUNaLE1BQU07UUFDdEMsSUFBSSxDQUFDSyxLQUFLLENBQUNlLDZCQUE2QixDQUFFWCxPQUFPUjtRQUNqRCxJQUFJLENBQUNLLFdBQVcsR0FBRztJQUVwQjtBQUVEO0FBRUFmLGlCQUFpQjhCLFNBQVMsQ0FBQ0MscUJBQXFCLEdBQUc7SUFFbEQsTUFBTUMsU0FBUyxJQUFJNUMsMENBQU9BO0lBQzFCLE1BQU02QyxTQUFTLElBQUk3QywwQ0FBT0E7SUFDMUIsTUFBTThDLE9BQU8sSUFBSTdDLHdDQUFLQTtJQUV0QixPQUFPLFNBQVM4QyxrQkFBbUJDLE9BQU8sRUFBRUMsVUFBVSxJQUFJLEVBQUVDLFVBQVUsSUFBSTtRQUV6RSxNQUFNLEVBQUVDLEtBQUssRUFBRUMsR0FBRyxFQUFFLEdBQUdKO1FBQ3ZCLE1BQU0zQixTQUFTLElBQUksQ0FBQ0EsTUFBTTtRQUMxQixJQUFJZ0M7UUFDSixJQUFJQyxvQkFBb0JDO1FBRXhCLDJCQUEyQjtRQUMzQixJQUFNLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO1lBRTlCLE1BQU1DLFFBQVEsQ0FBRUQsSUFBSSxLQUFNO1lBQzFCVixLQUFLSyxLQUFLLENBQUNPLElBQUksQ0FBRXJDLE1BQU0sQ0FBRW1DLEVBQUc7WUFDNUJWLEtBQUtNLEdBQUcsQ0FBQ00sSUFBSSxDQUFFckMsTUFBTSxDQUFFb0MsTUFBTztZQUU5QnBELGdGQUE2QkEsQ0FBRXlDLE1BQU1FLFNBQVNKLFFBQVFDO1lBRXREUSxTQUFTVCxPQUFPZSxpQkFBaUIsQ0FBRWQ7WUFDbkMsSUFBS1EsU0FBU0MsbUJBQW9CO2dCQUVqQ0Esb0JBQW9CRDtnQkFDcEIsSUFBS0osU0FBVUEsUUFBUVMsSUFBSSxDQUFFZDtnQkFDN0IsSUFBS00sU0FBVUEsUUFBUVEsSUFBSSxDQUFFYjtZQUU5QjtRQUVEO1FBRUEsbUJBQW1CO1FBQ25CLElBQUksQ0FBQ2UsbUJBQW1CLENBQUVULE9BQU9QO1FBQ2pDUyxTQUFTRixNQUFNUSxpQkFBaUIsQ0FBRWY7UUFDbEMsSUFBS1MsU0FBU0MsbUJBQW9CO1lBRWpDQSxvQkFBb0JEO1lBQ3BCLElBQUtKLFNBQVVBLFFBQVFTLElBQUksQ0FBRWQ7WUFDN0IsSUFBS00sU0FBVUEsUUFBUVEsSUFBSSxDQUFFUDtRQUU5QjtRQUVBLElBQUksQ0FBQ1MsbUJBQW1CLENBQUVSLEtBQUtSO1FBQy9CUyxTQUFTRCxJQUFJTyxpQkFBaUIsQ0FBRWY7UUFDaEMsSUFBS1MsU0FBU0MsbUJBQW9CO1lBRWpDQSxvQkFBb0JEO1lBQ3BCLElBQUtKLFNBQVVBLFFBQVFTLElBQUksQ0FBRWQ7WUFDN0IsSUFBS00sU0FBVUEsUUFBUVEsSUFBSSxDQUFFTjtRQUU5QjtRQUVBLE9BQU8xQyxLQUFLbUQsSUFBSSxDQUFFUDtJQUVuQjtBQUVEO0FBRUExQyxpQkFBaUI4QixTQUFTLENBQUNvQixrQkFBa0IsR0FBRztJQUUvQyxNQUFNQyxTQUFTLElBQUluRDtJQUNuQixNQUFNb0QsT0FBTyxJQUFJL0MsTUFBTztJQUN4QixNQUFNZ0QsT0FBTyxJQUFJaEQsTUFBTztJQUN4QixNQUFNaUQsa0JBQWtCLElBQUk5RCwwRUFBb0JBO0lBQ2hELE1BQU0rRCxtQkFBbUIsSUFBSS9ELDBFQUFvQkE7SUFDakQsTUFBTWdFLGFBQWEsSUFBSXBFLDBDQUFPQTtJQUM5QixNQUFNcUUsTUFBTSxJQUFJckUsMENBQU9BO0lBQ3ZCLE1BQU1zRSxPQUFPLElBQUl0RSwwQ0FBT0E7SUFDeEIsTUFBTXVFLE9BQU8sSUFBSXZFLDBDQUFPQTtJQUN4QixNQUFNd0UsVUFBVSxJQUFJeEUsMENBQU9BO0lBQzNCLE1BQU04QyxPQUFPLElBQUk3Qyx3Q0FBS0E7SUFDdEIsTUFBTXdFLFFBQVEsSUFBSXhFLHdDQUFLQTtJQUN2QixNQUFNeUUsUUFBUSxJQUFJekUsd0NBQUtBO0lBQ3ZCLE1BQU0wRSxZQUFZLElBQUkzRSwwQ0FBT0E7SUFFN0IsU0FBUzRFLGtCQUFtQkMsR0FBRyxFQUFFbkQsS0FBSyxFQUFFb0QsVUFBVTtRQUVqRCx5REFBeUQ7UUFDekQsTUFBTXpELFNBQVN3RCxJQUFJeEQsTUFBTTtRQUN6QixJQUFJMEQsUUFBUTtRQUNaLElBQUlDLHlCQUF5QixDQUFFO1FBQy9CLElBQU0sSUFBSXhCLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO1lBRTlCLE1BQU0sRUFBRUwsS0FBSyxFQUFFQyxHQUFHLEVBQUUsR0FBR047WUFDdkJLLE1BQU1PLElBQUksQ0FBRXJDLE1BQU0sQ0FBRW1DLEVBQUc7WUFDdkJKLElBQUlNLElBQUksQ0FBRXJDLE1BQU0sQ0FBRSxDQUFFbUMsSUFBSSxLQUFNLEVBQUc7WUFDakNWLEtBQUttQyxLQUFLLENBQUVaO1lBRVosTUFBTWEsa0JBQWtCMUUsV0FBWWtCLE1BQU15RCxlQUFlLENBQUVoQztZQUMzRCxJQUFLM0MsV0FBWWtCLE1BQU0wRCxNQUFNLENBQUNDLEdBQUcsQ0FBRWhCLFNBQVdhLGlCQUFrQjtnQkFFL0QsbURBQW1EO2dCQUNuREosV0FBV3BCLElBQUksQ0FBRVo7Z0JBQ2pCaUMsUUFBUTtnQkFDUjtZQUVEO1lBRUEsZ0dBQWdHO1lBQ2hHLE1BQU1PLGdCQUFnQjVELE1BQU02RCxhQUFhLENBQUV6QyxNQUFNNkI7WUFDakQsSUFBSyxDQUFFVyxpQkFBaUJKLGlCQUFrQjtnQkFFekNQLFVBQVVqQixJQUFJLENBQUVQO1lBRWpCO1lBRUEsdUJBQXVCO1lBQ3ZCLElBQUssQ0FBRW1DLGlCQUFpQkosZUFBYyxLQUFPLENBQUUxRSxXQUFZbUUsVUFBVWEsVUFBVSxDQUFFcEMsT0FBVTtnQkFFMUYsSUFBSzJCLFNBQVMsR0FBSTtvQkFFakIsdUVBQXVFO29CQUN2RSwrQkFBK0I7b0JBQy9CLE1BQU1VLFFBQVFWLFVBQVUsSUFBSUQsV0FBVzNCLEtBQUssR0FBRzJCLFdBQVcxQixHQUFHO29CQUM3RHFDLE1BQU0vQixJQUFJLENBQUVpQjtvQkFDWixJQUFLTyxpQkFBa0I7d0JBRXRCRix5QkFBeUJEO29CQUUxQjtnQkFFRCxPQUFPLElBQUtBLFNBQVMsR0FBSTtvQkFFeEIsd0VBQXdFO29CQUN4RSxnREFBZ0Q7b0JBQ2hELE1BQU1VLFFBQVFULDJCQUEyQixJQUFJRixXQUFXM0IsS0FBSyxHQUFHMkIsV0FBVzFCLEdBQUc7b0JBQzlFcUMsTUFBTS9CLElBQUksQ0FBRWlCO29CQUNaSSxRQUFRO29CQUNSO2dCQUVEO2dCQUVBQTtnQkFDQSxJQUFLQSxVQUFVLEtBQUtDLDJCQUEyQixDQUFFLEdBQUk7b0JBRXBEO2dCQUVEO1lBRUQ7UUFFRDtRQUVBLE9BQU9EO0lBRVI7SUFFQSxxR0FBcUc7SUFDckcsa0hBQWtIO0lBQ2xILE9BQU8sU0FBU2pCLG1CQUFvQjRCLEtBQUssRUFBRUMsU0FBUyxJQUFJLEVBQUVDLGNBQWMsS0FBSztRQUU1RSxJQUFLLElBQUksQ0FBQ2pFLFdBQVcsRUFBRztZQUV2QixJQUFJLENBQUNFLE1BQU07UUFFWjtRQUVBLElBQUssQ0FBRTZELE1BQU0zRSxrQkFBa0IsRUFBRztZQUVqQ2dELE9BQU9MLElBQUksQ0FBRWdDO1lBQ2IzQixPQUFPbEMsTUFBTTtZQUNiNkQsUUFBUTNCO1FBRVQsT0FBTyxJQUFLMkIsTUFBTS9ELFdBQVcsRUFBRztZQUUvQitELE1BQU03RCxNQUFNO1FBRWI7UUFFQSxNQUFNZ0UsU0FBUyxJQUFJLENBQUNuRSxLQUFLO1FBQ3pCLE1BQU1vRSxTQUFTSixNQUFNaEUsS0FBSztRQUUxQixJQUFLaEIsS0FBS0MsR0FBRyxDQUFFa0YsT0FBT1QsTUFBTSxDQUFDQyxHQUFHLENBQUVTLE9BQU9WLE1BQU0sS0FBTyxNQUFNLE9BQVE7WUFFbkUsd0VBQXdFO1lBQ3hFLE1BQU1XLGFBQWEsSUFBSSxDQUFDM0UsU0FBUztZQUNqQyxNQUFNNEUsV0FBVyxJQUFJLENBQUNoRixPQUFPO1lBQzdCaUQsSUFBSSxDQUFFLEVBQUcsR0FBR3lCLE1BQU1wRSxDQUFDO1lBQ25CMkMsSUFBSSxDQUFFLEVBQUcsR0FBR3lCLE1BQU1uRSxDQUFDO1lBQ25CMEMsSUFBSSxDQUFFLEVBQUcsR0FBR3lCLE1BQU1sRSxDQUFDO1lBQ25CLElBQU0sSUFBSWdDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO2dCQUU5QixNQUFNeUMsS0FBS0YsVUFBVSxDQUFFdkMsRUFBRztnQkFDMUIsTUFBTTBDLEtBQUtGLFFBQVEsQ0FBRXhDLEVBQUc7Z0JBQ3hCVSxnQkFBZ0JqQyxhQUFhLENBQUVpRSxJQUFJakM7Z0JBQ25DLElBQUtnQyxHQUFHRSxXQUFXLENBQUVqQyxrQkFBb0IsT0FBTztZQUVqRDtZQUVBLE1BQU1rQyxhQUFhVixNQUFNdEUsU0FBUztZQUNsQyxNQUFNaUYsV0FBV1gsTUFBTTFFLE9BQU87WUFDOUJnRCxJQUFJLENBQUUsRUFBRyxHQUFHLElBQUksQ0FBQzFDLENBQUM7WUFDbEIwQyxJQUFJLENBQUUsRUFBRyxHQUFHLElBQUksQ0FBQ3pDLENBQUM7WUFDbEJ5QyxJQUFJLENBQUUsRUFBRyxHQUFHLElBQUksQ0FBQ3hDLENBQUM7WUFDbEIsSUFBTSxJQUFJZ0MsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87Z0JBRTlCLE1BQU15QyxLQUFLRyxVQUFVLENBQUU1QyxFQUFHO2dCQUMxQixNQUFNMEMsS0FBS0csUUFBUSxDQUFFN0MsRUFBRztnQkFDeEJVLGdCQUFnQmpDLGFBQWEsQ0FBRWlFLElBQUlsQztnQkFDbkMsSUFBS2lDLEdBQUdFLFdBQVcsQ0FBRWpDLGtCQUFvQixPQUFPO1lBRWpEO1lBRUEscUJBQXFCO1lBQ3JCLElBQU0sSUFBSVYsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87Z0JBRTlCLE1BQU04QyxNQUFNTixRQUFRLENBQUV4QyxFQUFHO2dCQUN6QixJQUFNLElBQUkrQyxLQUFLLEdBQUdBLEtBQUssR0FBR0EsS0FBUTtvQkFFakMsTUFBTUMsTUFBTUgsUUFBUSxDQUFFRSxHQUFJO29CQUMxQm5DLFdBQVdxQyxZQUFZLENBQUVILEtBQUtFO29CQUM5QnRDLGdCQUFnQmpDLGFBQWEsQ0FBRW1DLFlBQVlKO29CQUMzQ0csaUJBQWlCbEMsYUFBYSxDQUFFbUMsWUFBWUg7b0JBQzVDLElBQUtDLGdCQUFnQmlDLFdBQVcsQ0FBRWhDLG1CQUFxQixPQUFPO2dCQUUvRDtZQUVEO1lBRUEsSUFBS3dCLFFBQVM7Z0JBRWIsNEVBQTRFO2dCQUM1RSxJQUFLLENBQUVDLGFBQWM7b0JBRXBCYyxRQUFRQyxJQUFJLENBQUU7Z0JBRWY7Z0JBRUFoQixPQUFPeEMsS0FBSyxDQUFDeUQsR0FBRyxDQUFFLEdBQUcsR0FBRztnQkFDeEJqQixPQUFPdkMsR0FBRyxDQUFDd0QsR0FBRyxDQUFFLEdBQUcsR0FBRztZQUV2QjtZQUVBLE9BQU87UUFFUixPQUFPO1lBRU4seURBQXlEO1lBQ3pELE1BQU1DLFNBQVNqQyxrQkFBbUIsSUFBSSxFQUFFa0IsUUFBUXJCO1lBQ2hELElBQUtvQyxXQUFXLEtBQUtuQixNQUFNb0IsYUFBYSxDQUFFckMsTUFBTXJCLEdBQUcsR0FBSztnQkFFdkQsSUFBS3VDLFFBQVM7b0JBRWJBLE9BQU94QyxLQUFLLENBQUNPLElBQUksQ0FBRWUsTUFBTXJCLEdBQUc7b0JBQzVCdUMsT0FBT3ZDLEdBQUcsQ0FBQ00sSUFBSSxDQUFFZSxNQUFNckIsR0FBRztnQkFFM0I7Z0JBRUEsT0FBTztZQUVSLE9BQU8sSUFBS3lELFdBQVcsR0FBSTtnQkFFMUIsT0FBTztZQUVSO1lBRUEsMkRBQTJEO1lBQzNELE1BQU1FLFNBQVNuQyxrQkFBbUJjLE9BQU9HLFFBQVFuQjtZQUNqRCxJQUFLcUMsV0FBVyxLQUFLLElBQUksQ0FBQ0QsYUFBYSxDQUFFcEMsTUFBTXRCLEdBQUcsR0FBSztnQkFFdEQsSUFBS3VDLFFBQVM7b0JBRWJBLE9BQU94QyxLQUFLLENBQUNPLElBQUksQ0FBRWdCLE1BQU10QixHQUFHO29CQUM1QnVDLE9BQU92QyxHQUFHLENBQUNNLElBQUksQ0FBRWdCLE1BQU10QixHQUFHO2dCQUUzQjtnQkFFQSxPQUFPO1lBRVIsT0FBTyxJQUFLMkQsV0FBVyxHQUFJO2dCQUUxQixPQUFPO1lBRVI7WUFFQSx5RUFBeUU7WUFDekV0QyxNQUFNUSxLQUFLLENBQUVYO1lBQ2JJLE1BQU1PLEtBQUssQ0FBRVY7WUFFYixJQUFLRCxLQUFLZSxHQUFHLENBQUVkLFFBQVMsR0FBSTtnQkFFM0IsSUFBSXlDLE1BQU10QyxNQUFNdkIsS0FBSztnQkFDckJ1QixNQUFNdkIsS0FBSyxHQUFHdUIsTUFBTXRCLEdBQUc7Z0JBQ3ZCc0IsTUFBTXRCLEdBQUcsR0FBRzREO1lBRWI7WUFFQSxxQ0FBcUM7WUFDckMsTUFBTUMsS0FBS3hDLE1BQU10QixLQUFLLENBQUNrQyxHQUFHLENBQUVmO1lBQzVCLE1BQU00QyxLQUFLekMsTUFBTXJCLEdBQUcsQ0FBQ2lDLEdBQUcsQ0FBRWY7WUFDMUIsTUFBTTZDLEtBQUt6QyxNQUFNdkIsS0FBSyxDQUFDa0MsR0FBRyxDQUFFZjtZQUM1QixNQUFNOEMsS0FBSzFDLE1BQU10QixHQUFHLENBQUNpQyxHQUFHLENBQUVmO1lBQzFCLE1BQU0rQyxhQUFhSCxLQUFLQztZQUN4QixNQUFNRyxhQUFhTCxLQUFLRztZQUV4QixJQUFLSCxPQUFPRyxNQUFNRCxPQUFPRCxNQUFNRyxlQUFlQyxZQUFhO2dCQUUxRCxPQUFPO1lBRVI7WUFFQSwyQkFBMkI7WUFDM0IsSUFBSzNCLFFBQVM7Z0JBRWJuQixRQUFRcEMsVUFBVSxDQUFFcUMsTUFBTXRCLEtBQUssRUFBRXVCLE1BQU12QixLQUFLO2dCQUM1QyxJQUFLcUIsUUFBUWEsR0FBRyxDQUFFZixRQUFTLEdBQUk7b0JBRTlCcUIsT0FBT3hDLEtBQUssQ0FBQ08sSUFBSSxDQUFFZSxNQUFNdEIsS0FBSztnQkFFL0IsT0FBTztvQkFFTndDLE9BQU94QyxLQUFLLENBQUNPLElBQUksQ0FBRWdCLE1BQU12QixLQUFLO2dCQUUvQjtnQkFFQXFCLFFBQVFwQyxVQUFVLENBQUVxQyxNQUFNckIsR0FBRyxFQUFFc0IsTUFBTXRCLEdBQUc7Z0JBQ3hDLElBQUtvQixRQUFRYSxHQUFHLENBQUVmLFFBQVMsR0FBSTtvQkFFOUJxQixPQUFPdkMsR0FBRyxDQUFDTSxJQUFJLENBQUVlLE1BQU1yQixHQUFHO2dCQUUzQixPQUFPO29CQUVOdUMsT0FBT3ZDLEdBQUcsQ0FBQ00sSUFBSSxDQUFFZ0IsTUFBTXRCLEdBQUc7Z0JBRTNCO1lBRUQ7WUFFQSxPQUFPO1FBRVI7SUFFRDtBQUVEO0FBR0F4QyxpQkFBaUI4QixTQUFTLENBQUN5QyxlQUFlLEdBQUc7SUFFNUMsTUFBTVEsU0FBUyxJQUFJM0YsMENBQU9BO0lBQzFCLE9BQU8sU0FBU21GLGdCQUFpQk0sS0FBSztRQUVyQyxJQUFJLENBQUM3QixtQkFBbUIsQ0FBRTZCLE9BQU9FO1FBQ2pDLE9BQU9GLE1BQU1ELFVBQVUsQ0FBRUc7SUFFMUI7QUFFRDtBQUdBL0UsaUJBQWlCOEIsU0FBUyxDQUFDNkUsa0JBQWtCLEdBQUc7SUFFL0MsTUFBTTlCLFFBQVEsSUFBSXpGLDBDQUFPQTtJQUN6QixNQUFNNkMsU0FBUyxJQUFJN0MsMENBQU9BO0lBQzFCLE1BQU13SCxlQUFlO1FBQUU7UUFBSztRQUFLO0tBQUs7SUFDdEMsTUFBTUMsUUFBUSxJQUFJeEgsd0NBQUtBO0lBQ3ZCLE1BQU15SCxRQUFRLElBQUl6SCx3Q0FBS0E7SUFFdkIsT0FBTyxTQUFTc0gsbUJBQW9CN0IsS0FBSyxFQUFFekMsVUFBVSxJQUFJLEVBQUVDLFVBQVUsSUFBSTtRQUV4RSxNQUFNeUUsYUFBYTFFLFdBQVdDLFVBQVV1RSxRQUFRO1FBQ2hELElBQUssSUFBSSxDQUFDM0Qsa0JBQWtCLENBQUU0QixPQUFPaUMsYUFBZTtZQUVuRCxJQUFLMUUsV0FBV0MsU0FBVTtnQkFFekIsSUFBS0QsU0FBVTBFLFdBQVdDLFNBQVMsQ0FBRTNFO2dCQUNyQyxJQUFLQyxTQUFVeUUsV0FBV0MsU0FBUyxDQUFFMUU7WUFFdEM7WUFFQSxPQUFPO1FBRVI7UUFFQSxJQUFJSSxvQkFBb0JDO1FBRXhCLDRCQUE0QjtRQUM1QixJQUFNLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO1lBRTlCLElBQUlxRTtZQUNKLE1BQU1DLFFBQVFOLFlBQVksQ0FBRWhFLEVBQUc7WUFDL0IsTUFBTXVFLFdBQVdyQyxLQUFLLENBQUVvQyxNQUFPO1lBQy9CLElBQUksQ0FBQ2xFLG1CQUFtQixDQUFFbUUsVUFBVXRDO1lBRXBDb0MsT0FBT0UsU0FBU3BFLGlCQUFpQixDQUFFOEI7WUFFbkMsSUFBS29DLE9BQU92RSxtQkFBb0I7Z0JBRS9CQSxvQkFBb0J1RTtnQkFDcEIsSUFBSzVFLFNBQVVBLFFBQVFTLElBQUksQ0FBRStCO2dCQUM3QixJQUFLdkMsU0FBVUEsUUFBUVEsSUFBSSxDQUFFcUU7WUFFOUI7WUFHQSxNQUFNQyxVQUFVLElBQUksQ0FBRUYsTUFBTztZQUM3QnBDLE1BQU05QixtQkFBbUIsQ0FBRW9FLFNBQVN2QztZQUVwQ29DLE9BQU9HLFFBQVFyRSxpQkFBaUIsQ0FBRThCO1lBRWxDLElBQUtvQyxPQUFPdkUsbUJBQW9CO2dCQUUvQkEsb0JBQW9CdUU7Z0JBQ3BCLElBQUs1RSxTQUFVQSxRQUFRUyxJQUFJLENBQUVzRTtnQkFDN0IsSUFBSzlFLFNBQVVBLFFBQVFRLElBQUksQ0FBRStCO1lBRTlCO1FBRUQ7UUFFQSxJQUFNLElBQUlqQyxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBTztZQUU5QixNQUFNeUUsTUFBTVQsWUFBWSxDQUFFaEUsRUFBRztZQUM3QixNQUFNMEUsTUFBTVYsWUFBWSxDQUFFLENBQUVoRSxJQUFJLEtBQU0sRUFBRztZQUN6Q2lFLE1BQU1iLEdBQUcsQ0FBRSxJQUFJLENBQUVxQixJQUFLLEVBQUUsSUFBSSxDQUFFQyxJQUFLO1lBQ25DLElBQU0sSUFBSTNCLEtBQUssR0FBR0EsS0FBSyxHQUFHQSxLQUFRO2dCQUVqQyxNQUFNNEIsTUFBTVgsWUFBWSxDQUFFakIsR0FBSTtnQkFDOUIsTUFBTTZCLE1BQU1aLFlBQVksQ0FBRSxDQUFFakIsS0FBSyxLQUFNLEVBQUc7Z0JBQzFDbUIsTUFBTWQsR0FBRyxDQUFFbEIsS0FBSyxDQUFFeUMsSUFBSyxFQUFFekMsS0FBSyxDQUFFMEMsSUFBSztnQkFFckMvSCxnRkFBNkJBLENBQUVvSCxPQUFPQyxPQUFPakMsT0FBTzVDO2dCQUVwRCxNQUFNZ0YsT0FBT3BDLE1BQU05QixpQkFBaUIsQ0FBRWQ7Z0JBQ3RDLElBQUtnRixPQUFPdkUsbUJBQW9CO29CQUUvQkEsb0JBQW9CdUU7b0JBQ3BCLElBQUs1RSxTQUFVQSxRQUFRUyxJQUFJLENBQUUrQjtvQkFDN0IsSUFBS3ZDLFNBQVVBLFFBQVFRLElBQUksQ0FBRWI7Z0JBRTlCO1lBRUQ7UUFFRDtRQUVBLE9BQU9uQyxLQUFLbUQsSUFBSSxDQUFFUDtJQUVuQjtBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvbWF0aC9FeHRlbmRlZFRyaWFuZ2xlLmpzPzNjZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJpYW5nbGUsIFZlY3RvcjMsIExpbmUzLCBTcGhlcmUsIFBsYW5lIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgU2VwYXJhdGluZ0F4aXNCb3VuZHMgfSBmcm9tICcuL1NlcGFyYXRpbmdBeGlzQm91bmRzLmpzJztcbmltcG9ydCB7IGNsb3Nlc3RQb2ludHNTZWdtZW50VG9TZWdtZW50LCBzcGhlcmVJbnRlcnNlY3RUcmlhbmdsZSB9IGZyb20gJy4vTWF0aFV0aWxpdGllcy5qcyc7XG5cbmNvbnN0IFpFUk9fRVBTSUxPTiA9IDFlLTE1O1xuZnVuY3Rpb24gaXNOZWFyWmVybyggdmFsdWUgKSB7XG5cblx0cmV0dXJuIE1hdGguYWJzKCB2YWx1ZSApIDwgWkVST19FUFNJTE9OO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBFeHRlbmRlZFRyaWFuZ2xlIGV4dGVuZHMgVHJpYW5nbGUge1xuXG5cdGNvbnN0cnVjdG9yKCAuLi5hcmdzICkge1xuXG5cdFx0c3VwZXIoIC4uLmFyZ3MgKTtcblxuXHRcdHRoaXMuaXNFeHRlbmRlZFRyaWFuZ2xlID0gdHJ1ZTtcblx0XHR0aGlzLnNhdEF4ZXMgPSBuZXcgQXJyYXkoIDQgKS5maWxsKCkubWFwKCAoKSA9PiBuZXcgVmVjdG9yMygpICk7XG5cdFx0dGhpcy5zYXRCb3VuZHMgPSBuZXcgQXJyYXkoIDQgKS5maWxsKCkubWFwKCAoKSA9PiBuZXcgU2VwYXJhdGluZ0F4aXNCb3VuZHMoKSApO1xuXHRcdHRoaXMucG9pbnRzID0gWyB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jIF07XG5cdFx0dGhpcy5zcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cdFx0dGhpcy5wbGFuZSA9IG5ldyBQbGFuZSgpO1xuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJlSW50ZXJzZWN0VHJpYW5nbGUoIHNwaGVyZSwgdGhpcyApO1xuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCBhID0gdGhpcy5hO1xuXHRcdGNvbnN0IGIgPSB0aGlzLmI7XG5cdFx0Y29uc3QgYyA9IHRoaXMuYztcblx0XHRjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcblxuXHRcdGNvbnN0IHNhdEF4ZXMgPSB0aGlzLnNhdEF4ZXM7XG5cdFx0Y29uc3Qgc2F0Qm91bmRzID0gdGhpcy5zYXRCb3VuZHM7XG5cblx0XHRjb25zdCBheGlzMCA9IHNhdEF4ZXNbIDAgXTtcblx0XHRjb25zdCBzYWIwID0gc2F0Qm91bmRzWyAwIF07XG5cdFx0dGhpcy5nZXROb3JtYWwoIGF4aXMwICk7XG5cdFx0c2FiMC5zZXRGcm9tUG9pbnRzKCBheGlzMCwgcG9pbnRzICk7XG5cblx0XHRjb25zdCBheGlzMSA9IHNhdEF4ZXNbIDEgXTtcblx0XHRjb25zdCBzYWIxID0gc2F0Qm91bmRzWyAxIF07XG5cdFx0YXhpczEuc3ViVmVjdG9ycyggYSwgYiApO1xuXHRcdHNhYjEuc2V0RnJvbVBvaW50cyggYXhpczEsIHBvaW50cyApO1xuXG5cdFx0Y29uc3QgYXhpczIgPSBzYXRBeGVzWyAyIF07XG5cdFx0Y29uc3Qgc2FiMiA9IHNhdEJvdW5kc1sgMiBdO1xuXHRcdGF4aXMyLnN1YlZlY3RvcnMoIGIsIGMgKTtcblx0XHRzYWIyLnNldEZyb21Qb2ludHMoIGF4aXMyLCBwb2ludHMgKTtcblxuXHRcdGNvbnN0IGF4aXMzID0gc2F0QXhlc1sgMyBdO1xuXHRcdGNvbnN0IHNhYjMgPSBzYXRCb3VuZHNbIDMgXTtcblx0XHRheGlzMy5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0c2FiMy5zZXRGcm9tUG9pbnRzKCBheGlzMywgcG9pbnRzICk7XG5cblx0XHR0aGlzLnNwaGVyZS5zZXRGcm9tUG9pbnRzKCB0aGlzLnBvaW50cyApO1xuXHRcdHRoaXMucGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIGF4aXMwLCBhICk7XG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdH1cblxufVxuXG5FeHRlbmRlZFRyaWFuZ2xlLnByb3RvdHlwZS5jbG9zZXN0UG9pbnRUb1NlZ21lbnQgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHRjb25zdCBwb2ludDEgPSBuZXcgVmVjdG9yMygpO1xuXHRjb25zdCBwb2ludDIgPSBuZXcgVmVjdG9yMygpO1xuXHRjb25zdCBlZGdlID0gbmV3IExpbmUzKCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGRpc3RhbmNlVG9TZWdtZW50KCBzZWdtZW50LCB0YXJnZXQxID0gbnVsbCwgdGFyZ2V0MiA9IG51bGwgKSB7XG5cblx0XHRjb25zdCB7IHN0YXJ0LCBlbmQgfSA9IHNlZ21lbnQ7XG5cdFx0Y29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdFx0bGV0IGRpc3RTcTtcblx0XHRsZXQgY2xvc2VzdERpc3RhbmNlU3EgPSBJbmZpbml0eTtcblxuXHRcdC8vIGNoZWNrIHRoZSB0cmlhbmdsZSBlZGdlc1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IG5leHRpID0gKCBpICsgMSApICUgMztcblx0XHRcdGVkZ2Uuc3RhcnQuY29weSggcG9pbnRzWyBpIF0gKTtcblx0XHRcdGVkZ2UuZW5kLmNvcHkoIHBvaW50c1sgbmV4dGkgXSApO1xuXG5cdFx0XHRjbG9zZXN0UG9pbnRzU2VnbWVudFRvU2VnbWVudCggZWRnZSwgc2VnbWVudCwgcG9pbnQxLCBwb2ludDIgKTtcblxuXHRcdFx0ZGlzdFNxID0gcG9pbnQxLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludDIgKTtcblx0XHRcdGlmICggZGlzdFNxIDwgY2xvc2VzdERpc3RhbmNlU3EgKSB7XG5cblx0XHRcdFx0Y2xvc2VzdERpc3RhbmNlU3EgPSBkaXN0U3E7XG5cdFx0XHRcdGlmICggdGFyZ2V0MSApIHRhcmdldDEuY29weSggcG9pbnQxICk7XG5cdFx0XHRcdGlmICggdGFyZ2V0MiApIHRhcmdldDIuY29weSggcG9pbnQyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGNoZWNrIGVuZCBwb2ludHNcblx0XHR0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnQoIHN0YXJ0LCBwb2ludDEgKTtcblx0XHRkaXN0U3EgPSBzdGFydC5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQxICk7XG5cdFx0aWYgKCBkaXN0U3EgPCBjbG9zZXN0RGlzdGFuY2VTcSApIHtcblxuXHRcdFx0Y2xvc2VzdERpc3RhbmNlU3EgPSBkaXN0U3E7XG5cdFx0XHRpZiAoIHRhcmdldDEgKSB0YXJnZXQxLmNvcHkoIHBvaW50MSApO1xuXHRcdFx0aWYgKCB0YXJnZXQyICkgdGFyZ2V0Mi5jb3B5KCBzdGFydCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50KCBlbmQsIHBvaW50MSApO1xuXHRcdGRpc3RTcSA9IGVuZC5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQxICk7XG5cdFx0aWYgKCBkaXN0U3EgPCBjbG9zZXN0RGlzdGFuY2VTcSApIHtcblxuXHRcdFx0Y2xvc2VzdERpc3RhbmNlU3EgPSBkaXN0U3E7XG5cdFx0XHRpZiAoIHRhcmdldDEgKSB0YXJnZXQxLmNvcHkoIHBvaW50MSApO1xuXHRcdFx0aWYgKCB0YXJnZXQyICkgdGFyZ2V0Mi5jb3B5KCBlbmQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIGNsb3Nlc3REaXN0YW5jZVNxICk7XG5cblx0fTtcblxufSApKCk7XG5cbkV4dGVuZGVkVHJpYW5nbGUucHJvdG90eXBlLmludGVyc2VjdHNUcmlhbmdsZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdGNvbnN0IHNhVHJpMiA9IG5ldyBFeHRlbmRlZFRyaWFuZ2xlKCk7XG5cdGNvbnN0IGFycjEgPSBuZXcgQXJyYXkoIDMgKTtcblx0Y29uc3QgYXJyMiA9IG5ldyBBcnJheSggMyApO1xuXHRjb25zdCBjYWNoZWRTYXRCb3VuZHMgPSBuZXcgU2VwYXJhdGluZ0F4aXNCb3VuZHMoKTtcblx0Y29uc3QgY2FjaGVkU2F0Qm91bmRzMiA9IG5ldyBTZXBhcmF0aW5nQXhpc0JvdW5kcygpO1xuXHRjb25zdCBjYWNoZWRBeGlzID0gbmV3IFZlY3RvcjMoKTtcblx0Y29uc3QgZGlyID0gbmV3IFZlY3RvcjMoKTtcblx0Y29uc3QgZGlyMSA9IG5ldyBWZWN0b3IzKCk7XG5cdGNvbnN0IGRpcjIgPSBuZXcgVmVjdG9yMygpO1xuXHRjb25zdCB0ZW1wRGlyID0gbmV3IFZlY3RvcjMoKTtcblx0Y29uc3QgZWRnZSA9IG5ldyBMaW5lMygpO1xuXHRjb25zdCBlZGdlMSA9IG5ldyBMaW5lMygpO1xuXHRjb25zdCBlZGdlMiA9IG5ldyBMaW5lMygpO1xuXHRjb25zdCB0ZW1wUG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdGZ1bmN0aW9uIHRyaUludGVyc2VjdFBsYW5lKCB0cmksIHBsYW5lLCB0YXJnZXRFZGdlICkge1xuXG5cdFx0Ly8gZmluZCB0aGUgZWRnZSB0aGF0IGludGVyc2VjdHMgdGhlIG90aGVyIHRyaWFuZ2xlIHBsYW5lXG5cdFx0Y29uc3QgcG9pbnRzID0gdHJpLnBvaW50cztcblx0XHRsZXQgY291bnQgPSAwO1xuXHRcdGxldCBzdGFydFBvaW50SW50ZXJzZWN0aW9uID0gLSAxO1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gZWRnZTtcblx0XHRcdHN0YXJ0LmNvcHkoIHBvaW50c1sgaSBdICk7XG5cdFx0XHRlbmQuY29weSggcG9pbnRzWyAoIGkgKyAxICkgJSAzIF0gKTtcblx0XHRcdGVkZ2UuZGVsdGEoIGRpciApO1xuXG5cdFx0XHRjb25zdCBzdGFydEludGVyc2VjdHMgPSBpc05lYXJaZXJvKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHN0YXJ0ICkgKTtcblx0XHRcdGlmICggaXNOZWFyWmVybyggcGxhbmUubm9ybWFsLmRvdCggZGlyICkgKSAmJiBzdGFydEludGVyc2VjdHMgKSB7XG5cblx0XHRcdFx0Ly8gaWYgdGhlIGVkZ2UgbGllcyBvbiB0aGUgcGxhbmUgdGhlbiB0YWtlIHRoZSBsaW5lXG5cdFx0XHRcdHRhcmdldEVkZ2UuY29weSggZWRnZSApO1xuXHRcdFx0XHRjb3VudCA9IDI7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBzdGFydCBwb2ludCBpcyBuZWFyIHRoZSBwbGFuZSBiZWNhdXNlIFwiaW50ZXJzZWN0TGluZVwiIGlzIG5vdCByb2J1c3QgdG8gdGhhdCBjYXNlXG5cdFx0XHRjb25zdCBkb2VzSW50ZXJzZWN0ID0gcGxhbmUuaW50ZXJzZWN0TGluZSggZWRnZSwgdGVtcFBvaW50ICk7XG5cdFx0XHRpZiAoICEgZG9lc0ludGVyc2VjdCAmJiBzdGFydEludGVyc2VjdHMgKSB7XG5cblx0XHRcdFx0dGVtcFBvaW50LmNvcHkoIHN0YXJ0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaWdub3JlIHRoZSBlbmQgcG9pbnRcblx0XHRcdGlmICggKCBkb2VzSW50ZXJzZWN0IHx8IHN0YXJ0SW50ZXJzZWN0cyApICYmICEgaXNOZWFyWmVybyggdGVtcFBvaW50LmRpc3RhbmNlVG8oIGVuZCApICkgKSB7XG5cblx0XHRcdFx0aWYgKCBjb3VudCA8PSAxICkge1xuXG5cdFx0XHRcdFx0Ly8gYXNzaWduIHRvIHRoZSBzdGFydCBvciBlbmQgcG9pbnQgYW5kIHNhdmUgd2hpY2ggaW5kZXggd2FzIHNuYXBwZWQgdG9cblx0XHRcdFx0XHQvLyB0aGUgc3RhcnQgcG9pbnQgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0Y29uc3QgcG9pbnQgPSBjb3VudCA9PT0gMSA/IHRhcmdldEVkZ2Uuc3RhcnQgOiB0YXJnZXRFZGdlLmVuZDtcblx0XHRcdFx0XHRwb2ludC5jb3B5KCB0ZW1wUG9pbnQgKTtcblx0XHRcdFx0XHRpZiAoIHN0YXJ0SW50ZXJzZWN0cyApIHtcblxuXHRcdFx0XHRcdFx0c3RhcnRQb2ludEludGVyc2VjdGlvbiA9IGNvdW50O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvdW50ID49IDIgKSB7XG5cblx0XHRcdFx0XHQvLyBpZiB3ZSdyZSBoZXJlIHRoYXQgbWVhbnMgdGhhdCB0aGVyZSBtdXN0IGhhdmUgYmVlbiBvbmUgcG9pbnQgdGhhdCBoYWRcblx0XHRcdFx0XHQvLyBzbmFwcGVkIHRvIHRoZSBzdGFydCBwb2ludCBzbyByZXBsYWNlIGl0IGhlcmVcblx0XHRcdFx0XHRjb25zdCBwb2ludCA9IHN0YXJ0UG9pbnRJbnRlcnNlY3Rpb24gPT09IDEgPyB0YXJnZXRFZGdlLnN0YXJ0IDogdGFyZ2V0RWRnZS5lbmQ7XG5cdFx0XHRcdFx0cG9pbnQuY29weSggdGVtcFBvaW50ICk7XG5cdFx0XHRcdFx0Y291bnQgPSAyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb3VudCArKztcblx0XHRcdFx0aWYgKCBjb3VudCA9PT0gMiAmJiBzdGFydFBvaW50SW50ZXJzZWN0aW9uID09PSAtIDEgKSB7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBjb3VudDtcblxuXHR9XG5cblx0Ly8gVE9ETzogSWYgdGhlIHRyaWFuZ2xlcyBhcmUgY29wbGFuYXIgYW5kIGludGVyc2VjdGluZyB0aGUgdGFyZ2V0IGlzIG5vbnNlbnNpY2FsLiBJdCBzaG91bGQgYXQgbGVhc3Rcblx0Ly8gYmUgYSBsaW5lIGNvbnRhaW5lZCBieSBib3RoIHRyaWFuZ2xlcyBpZiBub3QgYSBkaWZmZXJlbnQgc3BlY2lhbCBjYXNlIHNvbWVob3cgcmVwcmVzZW50ZWQgaW4gdGhlIHJldHVybiByZXN1bHQuXG5cdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RzVHJpYW5nbGUoIG90aGVyLCB0YXJnZXQgPSBudWxsLCBzdXBwcmVzc0xvZyA9IGZhbHNlICkge1xuXG5cdFx0aWYgKCB0aGlzLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhIG90aGVyLmlzRXh0ZW5kZWRUcmlhbmdsZSApIHtcblxuXHRcdFx0c2FUcmkyLmNvcHkoIG90aGVyICk7XG5cdFx0XHRzYVRyaTIudXBkYXRlKCk7XG5cdFx0XHRvdGhlciA9IHNhVHJpMjtcblxuXHRcdH0gZWxzZSBpZiAoIG90aGVyLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRvdGhlci51cGRhdGUoKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHBsYW5lMSA9IHRoaXMucGxhbmU7XG5cdFx0Y29uc3QgcGxhbmUyID0gb3RoZXIucGxhbmU7XG5cblx0XHRpZiAoIE1hdGguYWJzKCBwbGFuZTEubm9ybWFsLmRvdCggcGxhbmUyLm5vcm1hbCApICkgPiAxLjAgLSAxZS0xMCApIHtcblxuXHRcdFx0Ly8gcGVyZm9ybSBzZXBhcmF0aW5nIGF4aXMgaW50ZXJzZWN0aW9uIHRlc3Qgb25seSBmb3IgY29wbGFuYXIgdHJpYW5nbGVzXG5cdFx0XHRjb25zdCBzYXRCb3VuZHMxID0gdGhpcy5zYXRCb3VuZHM7XG5cdFx0XHRjb25zdCBzYXRBeGVzMSA9IHRoaXMuc2F0QXhlcztcblx0XHRcdGFycjJbIDAgXSA9IG90aGVyLmE7XG5cdFx0XHRhcnIyWyAxIF0gPSBvdGhlci5iO1xuXHRcdFx0YXJyMlsgMiBdID0gb3RoZXIuYztcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDQ7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2IgPSBzYXRCb3VuZHMxWyBpIF07XG5cdFx0XHRcdGNvbnN0IHNhID0gc2F0QXhlczFbIGkgXTtcblx0XHRcdFx0Y2FjaGVkU2F0Qm91bmRzLnNldEZyb21Qb2ludHMoIHNhLCBhcnIyICk7XG5cdFx0XHRcdGlmICggc2IuaXNTZXBhcmF0ZWQoIGNhY2hlZFNhdEJvdW5kcyApICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNhdEJvdW5kczIgPSBvdGhlci5zYXRCb3VuZHM7XG5cdFx0XHRjb25zdCBzYXRBeGVzMiA9IG90aGVyLnNhdEF4ZXM7XG5cdFx0XHRhcnIxWyAwIF0gPSB0aGlzLmE7XG5cdFx0XHRhcnIxWyAxIF0gPSB0aGlzLmI7XG5cdFx0XHRhcnIxWyAyIF0gPSB0aGlzLmM7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA0OyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHNiID0gc2F0Qm91bmRzMlsgaSBdO1xuXHRcdFx0XHRjb25zdCBzYSA9IHNhdEF4ZXMyWyBpIF07XG5cdFx0XHRcdGNhY2hlZFNhdEJvdW5kcy5zZXRGcm9tUG9pbnRzKCBzYSwgYXJyMSApO1xuXHRcdFx0XHRpZiAoIHNiLmlzU2VwYXJhdGVkKCBjYWNoZWRTYXRCb3VuZHMgKSApIHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjaGVjayBjcm9zc2VkIGF4ZXNcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDQ7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2ExID0gc2F0QXhlczFbIGkgXTtcblx0XHRcdFx0Zm9yICggbGV0IGkyID0gMDsgaTIgPCA0OyBpMiArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHNhMiA9IHNhdEF4ZXMyWyBpMiBdO1xuXHRcdFx0XHRcdGNhY2hlZEF4aXMuY3Jvc3NWZWN0b3JzKCBzYTEsIHNhMiApO1xuXHRcdFx0XHRcdGNhY2hlZFNhdEJvdW5kcy5zZXRGcm9tUG9pbnRzKCBjYWNoZWRBeGlzLCBhcnIxICk7XG5cdFx0XHRcdFx0Y2FjaGVkU2F0Qm91bmRzMi5zZXRGcm9tUG9pbnRzKCBjYWNoZWRBeGlzLCBhcnIyICk7XG5cdFx0XHRcdFx0aWYgKCBjYWNoZWRTYXRCb3VuZHMuaXNTZXBhcmF0ZWQoIGNhY2hlZFNhdEJvdW5kczIgKSApIHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0YXJnZXQgKSB7XG5cblx0XHRcdFx0Ly8gVE9ETyBmaW5kIHR3byBwb2ludHMgdGhhdCBpbnRlcnNlY3Qgb24gdGhlIGVkZ2VzIGFuZCBtYWtlIHRoYXQgdGhlIHJlc3VsdFxuXHRcdFx0XHRpZiAoICEgc3VwcHJlc3NMb2cgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdFeHRlbmRlZFRyaWFuZ2xlLmludGVyc2VjdHNUcmlhbmdsZTogVHJpYW5nbGVzIGFyZSBjb3BsYW5hciB3aGljaCBkb2VzIG5vdCBzdXBwb3J0IGFuIG91dHB1dCBlZGdlLiBTZXR0aW5nIGVkZ2UgdG8gMCwgMCwgMC4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRhcmdldC5zdGFydC5zZXQoIDAsIDAsIDAgKTtcblx0XHRcdFx0dGFyZ2V0LmVuZC5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGZpbmQgdGhlIGVkZ2UgdGhhdCBpbnRlcnNlY3RzIHRoZSBvdGhlciB0cmlhbmdsZSBwbGFuZVxuXHRcdFx0Y29uc3QgY291bnQxID0gdHJpSW50ZXJzZWN0UGxhbmUoIHRoaXMsIHBsYW5lMiwgZWRnZTEgKTtcblx0XHRcdGlmICggY291bnQxID09PSAxICYmIG90aGVyLmNvbnRhaW5zUG9pbnQoIGVkZ2UxLmVuZCApICkge1xuXG5cdFx0XHRcdGlmICggdGFyZ2V0ICkge1xuXG5cdFx0XHRcdFx0dGFyZ2V0LnN0YXJ0LmNvcHkoIGVkZ2UxLmVuZCApO1xuXHRcdFx0XHRcdHRhcmdldC5lbmQuY29weSggZWRnZTEuZW5kICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjb3VudDEgIT09IDIgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZpbmQgdGhlIG90aGVyIHRyaWFuZ2xlcyBlZGdlIHRoYXQgaW50ZXJzZWN0cyB0aGlzIHBsYW5lXG5cdFx0XHRjb25zdCBjb3VudDIgPSB0cmlJbnRlcnNlY3RQbGFuZSggb3RoZXIsIHBsYW5lMSwgZWRnZTIgKTtcblx0XHRcdGlmICggY291bnQyID09PSAxICYmIHRoaXMuY29udGFpbnNQb2ludCggZWRnZTIuZW5kICkgKSB7XG5cblx0XHRcdFx0aWYgKCB0YXJnZXQgKSB7XG5cblx0XHRcdFx0XHR0YXJnZXQuc3RhcnQuY29weSggZWRnZTIuZW5kICk7XG5cdFx0XHRcdFx0dGFyZ2V0LmVuZC5jb3B5KCBlZGdlMi5lbmQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNvdW50MiAhPT0gMiApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZmluZCBzd2FwIHRoZSBzZWNvbmQgZWRnZSBzbyBib3RoIGxpbmVzIGFyZSBydW5uaW5nIHRoZSBzYW1lIGRpcmVjdGlvblxuXHRcdFx0ZWRnZTEuZGVsdGEoIGRpcjEgKTtcblx0XHRcdGVkZ2UyLmRlbHRhKCBkaXIyICk7XG5cblx0XHRcdGlmICggZGlyMS5kb3QoIGRpcjIgKSA8IDAgKSB7XG5cblx0XHRcdFx0bGV0IHRtcCA9IGVkZ2UyLnN0YXJ0O1xuXHRcdFx0XHRlZGdlMi5zdGFydCA9IGVkZ2UyLmVuZDtcblx0XHRcdFx0ZWRnZTIuZW5kID0gdG1wO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBlZGdlcyBhcmUgb3ZlcmxhcHBpbmdcblx0XHRcdGNvbnN0IHMxID0gZWRnZTEuc3RhcnQuZG90KCBkaXIxICk7XG5cdFx0XHRjb25zdCBlMSA9IGVkZ2UxLmVuZC5kb3QoIGRpcjEgKTtcblx0XHRcdGNvbnN0IHMyID0gZWRnZTIuc3RhcnQuZG90KCBkaXIxICk7XG5cdFx0XHRjb25zdCBlMiA9IGVkZ2UyLmVuZC5kb3QoIGRpcjEgKTtcblx0XHRcdGNvbnN0IHNlcGFyYXRlZDEgPSBlMSA8IHMyO1xuXHRcdFx0Y29uc3Qgc2VwYXJhdGVkMiA9IHMxIDwgZTI7XG5cblx0XHRcdGlmICggczEgIT09IGUyICYmIHMyICE9PSBlMSAmJiBzZXBhcmF0ZWQxID09PSBzZXBhcmF0ZWQyICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhc3NpZ24gdGhlIHRhcmdldCBvdXRwdXRcblx0XHRcdGlmICggdGFyZ2V0ICkge1xuXG5cdFx0XHRcdHRlbXBEaXIuc3ViVmVjdG9ycyggZWRnZTEuc3RhcnQsIGVkZ2UyLnN0YXJ0ICk7XG5cdFx0XHRcdGlmICggdGVtcERpci5kb3QoIGRpcjEgKSA+IDAgKSB7XG5cblx0XHRcdFx0XHR0YXJnZXQuc3RhcnQuY29weSggZWRnZTEuc3RhcnQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGFyZ2V0LnN0YXJ0LmNvcHkoIGVkZ2UyLnN0YXJ0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRlbXBEaXIuc3ViVmVjdG9ycyggZWRnZTEuZW5kLCBlZGdlMi5lbmQgKTtcblx0XHRcdFx0aWYgKCB0ZW1wRGlyLmRvdCggZGlyMSApIDwgMCApIHtcblxuXHRcdFx0XHRcdHRhcmdldC5lbmQuY29weSggZWRnZTEuZW5kICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRhcmdldC5lbmQuY29weSggZWRnZTIuZW5kICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdH07XG5cbn0gKSgpO1xuXG5cbkV4dGVuZGVkVHJpYW5nbGUucHJvdG90eXBlLmRpc3RhbmNlVG9Qb2ludCA9ICggZnVuY3Rpb24gKCkge1xuXG5cdGNvbnN0IHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cdHJldHVybiBmdW5jdGlvbiBkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgdGFyZ2V0ICk7XG5cdFx0cmV0dXJuIHBvaW50LmRpc3RhbmNlVG8oIHRhcmdldCApO1xuXG5cdH07XG5cbn0gKSgpO1xuXG5cbkV4dGVuZGVkVHJpYW5nbGUucHJvdG90eXBlLmRpc3RhbmNlVG9UcmlhbmdsZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdGNvbnN0IHBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblx0Y29uc3QgcG9pbnQyID0gbmV3IFZlY3RvcjMoKTtcblx0Y29uc3QgY29ybmVyRmllbGRzID0gWyAnYScsICdiJywgJ2MnIF07XG5cdGNvbnN0IGxpbmUxID0gbmV3IExpbmUzKCk7XG5cdGNvbnN0IGxpbmUyID0gbmV3IExpbmUzKCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGRpc3RhbmNlVG9UcmlhbmdsZSggb3RoZXIsIHRhcmdldDEgPSBudWxsLCB0YXJnZXQyID0gbnVsbCApIHtcblxuXHRcdGNvbnN0IGxpbmVUYXJnZXQgPSB0YXJnZXQxIHx8IHRhcmdldDIgPyBsaW5lMSA6IG51bGw7XG5cdFx0aWYgKCB0aGlzLmludGVyc2VjdHNUcmlhbmdsZSggb3RoZXIsIGxpbmVUYXJnZXQgKSApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXQxIHx8IHRhcmdldDIgKSB7XG5cblx0XHRcdFx0aWYgKCB0YXJnZXQxICkgbGluZVRhcmdldC5nZXRDZW50ZXIoIHRhcmdldDEgKTtcblx0XHRcdFx0aWYgKCB0YXJnZXQyICkgbGluZVRhcmdldC5nZXRDZW50ZXIoIHRhcmdldDIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblxuXHRcdH1cblxuXHRcdGxldCBjbG9zZXN0RGlzdGFuY2VTcSA9IEluZmluaXR5O1xuXG5cdFx0Ly8gY2hlY2sgYWxsIHBvaW50IGRpc3RhbmNlc1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cblx0XHRcdGxldCBkaXN0O1xuXHRcdFx0Y29uc3QgZmllbGQgPSBjb3JuZXJGaWVsZHNbIGkgXTtcblx0XHRcdGNvbnN0IG90aGVyVmVjID0gb3RoZXJbIGZpZWxkIF07XG5cdFx0XHR0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnQoIG90aGVyVmVjLCBwb2ludCApO1xuXG5cdFx0XHRkaXN0ID0gb3RoZXJWZWMuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0XHRcdGlmICggZGlzdCA8IGNsb3Nlc3REaXN0YW5jZVNxICkge1xuXG5cdFx0XHRcdGNsb3Nlc3REaXN0YW5jZVNxID0gZGlzdDtcblx0XHRcdFx0aWYgKCB0YXJnZXQxICkgdGFyZ2V0MS5jb3B5KCBwb2ludCApO1xuXHRcdFx0XHRpZiAoIHRhcmdldDIgKSB0YXJnZXQyLmNvcHkoIG90aGVyVmVjICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRjb25zdCB0aGlzVmVjID0gdGhpc1sgZmllbGQgXTtcblx0XHRcdG90aGVyLmNsb3Nlc3RQb2ludFRvUG9pbnQoIHRoaXNWZWMsIHBvaW50ICk7XG5cblx0XHRcdGRpc3QgPSB0aGlzVmVjLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0XHRpZiAoIGRpc3QgPCBjbG9zZXN0RGlzdGFuY2VTcSApIHtcblxuXHRcdFx0XHRjbG9zZXN0RGlzdGFuY2VTcSA9IGRpc3Q7XG5cdFx0XHRcdGlmICggdGFyZ2V0MSApIHRhcmdldDEuY29weSggdGhpc1ZlYyApO1xuXHRcdFx0XHRpZiAoIHRhcmdldDIgKSB0YXJnZXQyLmNvcHkoIHBvaW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGYxMSA9IGNvcm5lckZpZWxkc1sgaSBdO1xuXHRcdFx0Y29uc3QgZjEyID0gY29ybmVyRmllbGRzWyAoIGkgKyAxICkgJSAzIF07XG5cdFx0XHRsaW5lMS5zZXQoIHRoaXNbIGYxMSBdLCB0aGlzWyBmMTIgXSApO1xuXHRcdFx0Zm9yICggbGV0IGkyID0gMDsgaTIgPCAzOyBpMiArKyApIHtcblxuXHRcdFx0XHRjb25zdCBmMjEgPSBjb3JuZXJGaWVsZHNbIGkyIF07XG5cdFx0XHRcdGNvbnN0IGYyMiA9IGNvcm5lckZpZWxkc1sgKCBpMiArIDEgKSAlIDMgXTtcblx0XHRcdFx0bGluZTIuc2V0KCBvdGhlclsgZjIxIF0sIG90aGVyWyBmMjIgXSApO1xuXG5cdFx0XHRcdGNsb3Nlc3RQb2ludHNTZWdtZW50VG9TZWdtZW50KCBsaW5lMSwgbGluZTIsIHBvaW50LCBwb2ludDIgKTtcblxuXHRcdFx0XHRjb25zdCBkaXN0ID0gcG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50MiApO1xuXHRcdFx0XHRpZiAoIGRpc3QgPCBjbG9zZXN0RGlzdGFuY2VTcSApIHtcblxuXHRcdFx0XHRcdGNsb3Nlc3REaXN0YW5jZVNxID0gZGlzdDtcblx0XHRcdFx0XHRpZiAoIHRhcmdldDEgKSB0YXJnZXQxLmNvcHkoIHBvaW50ICk7XG5cdFx0XHRcdFx0aWYgKCB0YXJnZXQyICkgdGFyZ2V0Mi5jb3B5KCBwb2ludDIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIGNsb3Nlc3REaXN0YW5jZVNxICk7XG5cblx0fTtcblxufSApKCk7XG4iXSwibmFtZXMiOlsiVHJpYW5nbGUiLCJWZWN0b3IzIiwiTGluZTMiLCJTcGhlcmUiLCJQbGFuZSIsIlNlcGFyYXRpbmdBeGlzQm91bmRzIiwiY2xvc2VzdFBvaW50c1NlZ21lbnRUb1NlZ21lbnQiLCJzcGhlcmVJbnRlcnNlY3RUcmlhbmdsZSIsIlpFUk9fRVBTSUxPTiIsImlzTmVhclplcm8iLCJ2YWx1ZSIsIk1hdGgiLCJhYnMiLCJFeHRlbmRlZFRyaWFuZ2xlIiwiY29uc3RydWN0b3IiLCJhcmdzIiwiaXNFeHRlbmRlZFRyaWFuZ2xlIiwic2F0QXhlcyIsIkFycmF5IiwiZmlsbCIsIm1hcCIsInNhdEJvdW5kcyIsInBvaW50cyIsImEiLCJiIiwiYyIsInNwaGVyZSIsInBsYW5lIiwibmVlZHNVcGRhdGUiLCJpbnRlcnNlY3RzU3BoZXJlIiwidXBkYXRlIiwiYXhpczAiLCJzYWIwIiwiZ2V0Tm9ybWFsIiwic2V0RnJvbVBvaW50cyIsImF4aXMxIiwic2FiMSIsInN1YlZlY3RvcnMiLCJheGlzMiIsInNhYjIiLCJheGlzMyIsInNhYjMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsInByb3RvdHlwZSIsImNsb3Nlc3RQb2ludFRvU2VnbWVudCIsInBvaW50MSIsInBvaW50MiIsImVkZ2UiLCJkaXN0YW5jZVRvU2VnbWVudCIsInNlZ21lbnQiLCJ0YXJnZXQxIiwidGFyZ2V0MiIsInN0YXJ0IiwiZW5kIiwiZGlzdFNxIiwiY2xvc2VzdERpc3RhbmNlU3EiLCJJbmZpbml0eSIsImkiLCJuZXh0aSIsImNvcHkiLCJkaXN0YW5jZVRvU3F1YXJlZCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJzcXJ0IiwiaW50ZXJzZWN0c1RyaWFuZ2xlIiwic2FUcmkyIiwiYXJyMSIsImFycjIiLCJjYWNoZWRTYXRCb3VuZHMiLCJjYWNoZWRTYXRCb3VuZHMyIiwiY2FjaGVkQXhpcyIsImRpciIsImRpcjEiLCJkaXIyIiwidGVtcERpciIsImVkZ2UxIiwiZWRnZTIiLCJ0ZW1wUG9pbnQiLCJ0cmlJbnRlcnNlY3RQbGFuZSIsInRyaSIsInRhcmdldEVkZ2UiLCJjb3VudCIsInN0YXJ0UG9pbnRJbnRlcnNlY3Rpb24iLCJkZWx0YSIsInN0YXJ0SW50ZXJzZWN0cyIsImRpc3RhbmNlVG9Qb2ludCIsIm5vcm1hbCIsImRvdCIsImRvZXNJbnRlcnNlY3QiLCJpbnRlcnNlY3RMaW5lIiwiZGlzdGFuY2VUbyIsInBvaW50Iiwib3RoZXIiLCJ0YXJnZXQiLCJzdXBwcmVzc0xvZyIsInBsYW5lMSIsInBsYW5lMiIsInNhdEJvdW5kczEiLCJzYXRBeGVzMSIsInNiIiwic2EiLCJpc1NlcGFyYXRlZCIsInNhdEJvdW5kczIiLCJzYXRBeGVzMiIsInNhMSIsImkyIiwic2EyIiwiY3Jvc3NWZWN0b3JzIiwiY29uc29sZSIsIndhcm4iLCJzZXQiLCJjb3VudDEiLCJjb250YWluc1BvaW50IiwiY291bnQyIiwidG1wIiwiczEiLCJlMSIsInMyIiwiZTIiLCJzZXBhcmF0ZWQxIiwic2VwYXJhdGVkMiIsImRpc3RhbmNlVG9UcmlhbmdsZSIsImNvcm5lckZpZWxkcyIsImxpbmUxIiwibGluZTIiLCJsaW5lVGFyZ2V0IiwiZ2V0Q2VudGVyIiwiZGlzdCIsImZpZWxkIiwib3RoZXJWZWMiLCJ0aGlzVmVjIiwiZjExIiwiZjEyIiwiZjIxIiwiZjIyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/MathUtilities.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/MathUtilities.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closestPointLineToLine: () => (/* binding */ closestPointLineToLine),\n/* harmony export */   closestPointsSegmentToSegment: () => (/* binding */ closestPointsSegmentToSegment),\n/* harmony export */   sphereIntersectTriangle: () => (/* binding */ sphereIntersectTriangle)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\nconst closestPointLineToLine = function() {\n    // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n    const dir1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const dir2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const v02 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function closestPointLineToLine(l1, l2, result) {\n        const v0 = l1.start;\n        const v10 = dir1;\n        const v2 = l2.start;\n        const v32 = dir2;\n        v02.subVectors(v0, v2);\n        dir1.subVectors(l1.end, l1.start);\n        dir2.subVectors(l2.end, l2.start);\n        // float d0232 = v02.Dot(v32);\n        const d0232 = v02.dot(v32);\n        // float d3210 = v32.Dot(v10);\n        const d3210 = v32.dot(v10);\n        // float d3232 = v32.Dot(v32);\n        const d3232 = v32.dot(v32);\n        // float d0210 = v02.Dot(v10);\n        const d0210 = v02.dot(v10);\n        // float d1010 = v10.Dot(v10);\n        const d1010 = v10.dot(v10);\n        // float denom = d1010*d3232 - d3210*d3210;\n        const denom = d1010 * d3232 - d3210 * d3210;\n        let d, d2;\n        if (denom !== 0) {\n            d = (d0232 * d3210 - d0210 * d3232) / denom;\n        } else {\n            d = 0;\n        }\n        d2 = (d0232 + d * d3210) / d3232;\n        result.x = d;\n        result.y = d2;\n    };\n}();\nconst closestPointsSegmentToSegment = function() {\n    // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n    const paramResult = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n    const temp1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const temp2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function closestPointsSegmentToSegment(l1, l2, target1, target2) {\n        closestPointLineToLine(l1, l2, paramResult);\n        let d = paramResult.x;\n        let d2 = paramResult.y;\n        if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {\n            l1.at(d, target1);\n            l2.at(d2, target2);\n            return;\n        } else if (d >= 0 && d <= 1) {\n            // Only d2 is out of bounds.\n            if (d2 < 0) {\n                l2.at(0, target2);\n            } else {\n                l2.at(1, target2);\n            }\n            l1.closestPointToPoint(target2, true, target1);\n            return;\n        } else if (d2 >= 0 && d2 <= 1) {\n            // Only d is out of bounds.\n            if (d < 0) {\n                l1.at(0, target1);\n            } else {\n                l1.at(1, target1);\n            }\n            l2.closestPointToPoint(target1, true, target2);\n            return;\n        } else {\n            // Both u and u2 are out of bounds.\n            let p;\n            if (d < 0) {\n                p = l1.start;\n            } else {\n                p = l1.end;\n            }\n            let p2;\n            if (d2 < 0) {\n                p2 = l2.start;\n            } else {\n                p2 = l2.end;\n            }\n            const closestPoint = temp1;\n            const closestPoint2 = temp2;\n            l1.closestPointToPoint(p2, true, temp1);\n            l2.closestPointToPoint(p, true, temp2);\n            if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {\n                target1.copy(closestPoint);\n                target2.copy(p2);\n                return;\n            } else {\n                target1.copy(p);\n                target2.copy(closestPoint2);\n                return;\n            }\n        }\n    };\n}();\nconst sphereIntersectTriangle = function() {\n    // https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n    const closestPointTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const projectedPointTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const planeTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\n    const lineTemp = new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\n    return function sphereIntersectTriangle(sphere, triangle) {\n        const { radius, center } = sphere;\n        const { a, b, c } = triangle;\n        // phase 1\n        lineTemp.start = a;\n        lineTemp.end = b;\n        const closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n        if (closestPoint1.distanceTo(center) <= radius) return true;\n        lineTemp.start = a;\n        lineTemp.end = c;\n        const closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n        if (closestPoint2.distanceTo(center) <= radius) return true;\n        lineTemp.start = b;\n        lineTemp.end = c;\n        const closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n        if (closestPoint3.distanceTo(center) <= radius) return true;\n        // phase 2\n        const plane = triangle.getPlane(planeTemp);\n        const dp = Math.abs(plane.distanceToPoint(center));\n        if (dp <= radius) {\n            const pp = plane.projectPoint(center, projectedPointTemp);\n            const cp = triangle.containsPoint(pp);\n            if (cp) return true;\n        }\n        return false;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/MathUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrientedBox: () => (/* binding */ OrientedBox)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SeparatingAxisBounds.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js\");\n/* harmony import */ var _ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ExtendedTriangle.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _MathUtilities_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MathUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/MathUtilities.js\");\n\n\n\n\nclass OrientedBox {\n    constructor(min, max, matrix){\n        this.isOrientedBox = true;\n        this.min = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this.max = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this.matrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.invMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.points = new Array(8).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.satAxes = new Array(3).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.satBounds = new Array(3).fill().map(()=>new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds());\n        this.alignedSatBounds = new Array(3).fill().map(()=>new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds());\n        this.needsUpdate = false;\n        if (min) this.min.copy(min);\n        if (max) this.max.copy(max);\n        if (matrix) this.matrix.copy(matrix);\n    }\n    set(min, max, matrix) {\n        this.min.copy(min);\n        this.max.copy(max);\n        this.matrix.copy(matrix);\n        this.needsUpdate = true;\n    }\n    copy(other) {\n        this.min.copy(other.min);\n        this.max.copy(other.max);\n        this.matrix.copy(other.matrix);\n        this.needsUpdate = true;\n    }\n}\nOrientedBox.prototype.update = function() {\n    return function update() {\n        const matrix = this.matrix;\n        const min = this.min;\n        const max = this.max;\n        const points = this.points;\n        for(let x = 0; x <= 1; x++){\n            for(let y = 0; y <= 1; y++){\n                for(let z = 0; z <= 1; z++){\n                    const i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n                    const v = points[i];\n                    v.x = x ? max.x : min.x;\n                    v.y = y ? max.y : min.y;\n                    v.z = z ? max.z : min.z;\n                    v.applyMatrix4(matrix);\n                }\n            }\n        }\n        const satBounds = this.satBounds;\n        const satAxes = this.satAxes;\n        const minVec = points[0];\n        for(let i = 0; i < 3; i++){\n            const axis = satAxes[i];\n            const sb = satBounds[i];\n            const index = 1 << i;\n            const pi = points[index];\n            axis.subVectors(minVec, pi);\n            sb.setFromPoints(axis, points);\n        }\n        const alignedSatBounds = this.alignedSatBounds;\n        alignedSatBounds[0].setFromPointsField(points, \"x\");\n        alignedSatBounds[1].setFromPointsField(points, \"y\");\n        alignedSatBounds[2].setFromPointsField(points, \"z\");\n        this.invMatrix.copy(this.matrix).invert();\n        this.needsUpdate = false;\n    };\n}();\nOrientedBox.prototype.intersectsBox = function() {\n    const aabbBounds = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    return function intersectsBox(box) {\n        // TODO: should this be doing SAT against the AABB?\n        if (this.needsUpdate) {\n            this.update();\n        }\n        const min = box.min;\n        const max = box.max;\n        const satBounds = this.satBounds;\n        const satAxes = this.satAxes;\n        const alignedSatBounds = this.alignedSatBounds;\n        aabbBounds.min = min.x;\n        aabbBounds.max = max.x;\n        if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;\n        aabbBounds.min = min.y;\n        aabbBounds.max = max.y;\n        if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;\n        aabbBounds.min = min.z;\n        aabbBounds.max = max.z;\n        if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;\n        for(let i = 0; i < 3; i++){\n            const axis = satAxes[i];\n            const sb = satBounds[i];\n            aabbBounds.setFromBox(axis, box);\n            if (sb.isSeparated(aabbBounds)) return false;\n        }\n        return true;\n    };\n}();\nOrientedBox.prototype.intersectsTriangle = function() {\n    const saTri = new _ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedTriangle();\n    const pointsArr = new Array(3);\n    const cachedSatBounds = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedSatBounds2 = new _SeparatingAxisBounds_js__WEBPACK_IMPORTED_MODULE_1__.SeparatingAxisBounds();\n    const cachedAxis = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function intersectsTriangle(triangle) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        if (!triangle.isExtendedTriangle) {\n            saTri.copy(triangle);\n            saTri.update();\n            triangle = saTri;\n        } else if (triangle.needsUpdate) {\n            triangle.update();\n        }\n        const satBounds = this.satBounds;\n        const satAxes = this.satAxes;\n        pointsArr[0] = triangle.a;\n        pointsArr[1] = triangle.b;\n        pointsArr[2] = triangle.c;\n        for(let i = 0; i < 3; i++){\n            const sb = satBounds[i];\n            const sa = satAxes[i];\n            cachedSatBounds.setFromPoints(sa, pointsArr);\n            if (sb.isSeparated(cachedSatBounds)) return false;\n        }\n        const triSatBounds = triangle.satBounds;\n        const triSatAxes = triangle.satAxes;\n        const points = this.points;\n        for(let i = 0; i < 3; i++){\n            const sb = triSatBounds[i];\n            const sa = triSatAxes[i];\n            cachedSatBounds.setFromPoints(sa, points);\n            if (sb.isSeparated(cachedSatBounds)) return false;\n        }\n        // check crossed axes\n        for(let i = 0; i < 3; i++){\n            const sa1 = satAxes[i];\n            for(let i2 = 0; i2 < 4; i2++){\n                const sa2 = triSatAxes[i2];\n                cachedAxis.crossVectors(sa1, sa2);\n                cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n                cachedSatBounds2.setFromPoints(cachedAxis, points);\n                if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n            }\n        }\n        return true;\n    };\n}();\nOrientedBox.prototype.closestPointToPoint = function() {\n    return function closestPointToPoint(point, target1) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n        return target1;\n    };\n}();\nOrientedBox.prototype.distanceToPoint = function() {\n    const target = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function distanceToPoint(point) {\n        this.closestPointToPoint(point, target);\n        return point.distanceTo(target);\n    };\n}();\nOrientedBox.prototype.distanceToBox = function() {\n    const xyzFields = [\n        \"x\",\n        \"y\",\n        \"z\"\n    ];\n    const segments1 = new Array(12).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Line3());\n    const segments2 = new Array(12).fill().map(()=>new three__WEBPACK_IMPORTED_MODULE_0__.Line3());\n    const point1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const point2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    // early out if we find a value below threshold\n    return function distanceToBox(box, threshold = 0, target1 = null, target2 = null) {\n        if (this.needsUpdate) {\n            this.update();\n        }\n        if (this.intersectsBox(box)) {\n            if (target1 || target2) {\n                box.getCenter(point2);\n                this.closestPointToPoint(point2, point1);\n                box.closestPointToPoint(point1, point2);\n                if (target1) target1.copy(point1);\n                if (target2) target2.copy(point2);\n            }\n            return 0;\n        }\n        const threshold2 = threshold * threshold;\n        const min = box.min;\n        const max = box.max;\n        const points = this.points;\n        // iterate over every edge and compare distances\n        let closestDistanceSq = Infinity;\n        // check over all these points\n        for(let i = 0; i < 8; i++){\n            const p = points[i];\n            point2.copy(p).clamp(min, max);\n            const dist = p.distanceToSquared(point2);\n            if (dist < closestDistanceSq) {\n                closestDistanceSq = dist;\n                if (target1) target1.copy(p);\n                if (target2) target2.copy(point2);\n                if (dist < threshold2) return Math.sqrt(dist);\n            }\n        }\n        // generate and check all line segment distances\n        let count = 0;\n        for(let i = 0; i < 3; i++){\n            for(let i1 = 0; i1 <= 1; i1++){\n                for(let i2 = 0; i2 <= 1; i2++){\n                    const nextIndex = (i + 1) % 3;\n                    const nextIndex2 = (i + 2) % 3;\n                    // get obb line segments\n                    const index = i1 << nextIndex | i2 << nextIndex2;\n                    const index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n                    const p1 = points[index];\n                    const p2 = points[index2];\n                    const line1 = segments1[count];\n                    line1.set(p1, p2);\n                    // get aabb line segments\n                    const f1 = xyzFields[i];\n                    const f2 = xyzFields[nextIndex];\n                    const f3 = xyzFields[nextIndex2];\n                    const line2 = segments2[count];\n                    const start = line2.start;\n                    const end = line2.end;\n                    start[f1] = min[f1];\n                    start[f2] = i1 ? min[f2] : max[f2];\n                    start[f3] = i2 ? min[f3] : max[f2];\n                    end[f1] = max[f1];\n                    end[f2] = i1 ? min[f2] : max[f2];\n                    end[f3] = i2 ? min[f3] : max[f2];\n                    count++;\n                }\n            }\n        }\n        // check all the other boxes point\n        for(let x = 0; x <= 1; x++){\n            for(let y = 0; y <= 1; y++){\n                for(let z = 0; z <= 1; z++){\n                    point2.x = x ? max.x : min.x;\n                    point2.y = y ? max.y : min.y;\n                    point2.z = z ? max.z : min.z;\n                    this.closestPointToPoint(point2, point1);\n                    const dist = point2.distanceToSquared(point1);\n                    if (dist < closestDistanceSq) {\n                        closestDistanceSq = dist;\n                        if (target1) target1.copy(point1);\n                        if (target2) target2.copy(point2);\n                        if (dist < threshold2) return Math.sqrt(dist);\n                    }\n                }\n            }\n        }\n        for(let i = 0; i < 12; i++){\n            const l1 = segments1[i];\n            for(let i2 = 0; i2 < 12; i2++){\n                const l2 = segments2[i2];\n                (0,_MathUtilities_js__WEBPACK_IMPORTED_MODULE_3__.closestPointsSegmentToSegment)(l1, l2, point1, point2);\n                const dist = point1.distanceToSquared(point2);\n                if (dist < closestDistanceSq) {\n                    closestDistanceSq = dist;\n                    if (target1) target1.copy(point1);\n                    if (target2) target2.copy(point2);\n                    if (dist < threshold2) return Math.sqrt(dist);\n                }\n            }\n        }\n        return Math.sqrt(closestDistanceSq);\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/OrientedBox.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeparatingAxisBounds: () => (/* binding */ SeparatingAxisBounds),\n/* harmony export */   areIntersecting: () => (/* binding */ areIntersecting)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\nclass SeparatingAxisBounds {\n    constructor(){\n        this.min = Infinity;\n        this.max = -Infinity;\n    }\n    setFromPointsField(points, field) {\n        let min = Infinity;\n        let max = -Infinity;\n        for(let i = 0, l = points.length; i < l; i++){\n            const p = points[i];\n            const val = p[field];\n            min = val < min ? val : min;\n            max = val > max ? val : max;\n        }\n        this.min = min;\n        this.max = max;\n    }\n    setFromPoints(axis, points) {\n        let min = Infinity;\n        let max = -Infinity;\n        for(let i = 0, l = points.length; i < l; i++){\n            const p = points[i];\n            const val = axis.dot(p);\n            min = val < min ? val : min;\n            max = val > max ? val : max;\n        }\n        this.min = min;\n        this.max = max;\n    }\n    isSeparated(other) {\n        return this.min > other.max || other.min > this.max;\n    }\n}\nSeparatingAxisBounds.prototype.setFromBox = function() {\n    const p = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    return function setFromBox(axis, box) {\n        const boxMin = box.min;\n        const boxMax = box.max;\n        let min = Infinity;\n        let max = -Infinity;\n        for(let x = 0; x <= 1; x++){\n            for(let y = 0; y <= 1; y++){\n                for(let z = 0; z <= 1; z++){\n                    p.x = boxMin.x * x + boxMax.x * (1 - x);\n                    p.y = boxMin.y * y + boxMax.y * (1 - y);\n                    p.z = boxMin.z * z + boxMax.z * (1 - z);\n                    const val = axis.dot(p);\n                    min = Math.min(val, min);\n                    max = Math.max(val, max);\n                }\n            }\n        }\n        this.min = min;\n        this.max = max;\n    };\n}();\nconst areIntersecting = function() {\n    const cacheSatBounds = new SeparatingAxisBounds();\n    return function areIntersecting(shape1, shape2) {\n        const points1 = shape1.points;\n        const satAxes1 = shape1.satAxes;\n        const satBounds1 = shape1.satBounds;\n        const points2 = shape2.points;\n        const satAxes2 = shape2.satAxes;\n        const satBounds2 = shape2.satBounds;\n        // check axes of the first shape\n        for(let i = 0; i < 3; i++){\n            const sb = satBounds1[i];\n            const sa = satAxes1[i];\n            cacheSatBounds.setFromPoints(sa, points2);\n            if (sb.isSeparated(cacheSatBounds)) return false;\n        }\n        // check axes of the second shape\n        for(let i = 0; i < 3; i++){\n            const sb = satBounds2[i];\n            const sa = satAxes2[i];\n            cacheSatBounds.setFromPoints(sa, points1);\n            if (sb.isSeparated(cacheSatBounds)) return false;\n        }\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy9tYXRoL1NlcGFyYXRpbmdBeGlzQm91bmRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQztBQUV6QixNQUFNQztJQUVaQyxhQUFjO1FBRWIsSUFBSSxDQUFDQyxHQUFHLEdBQUdDO1FBQ1gsSUFBSSxDQUFDQyxHQUFHLEdBQUcsQ0FBRUQ7SUFFZDtJQUVBRSxtQkFBb0JDLE1BQU0sRUFBRUMsS0FBSyxFQUFHO1FBRW5DLElBQUlMLE1BQU1DO1FBQ1YsSUFBSUMsTUFBTSxDQUFFRDtRQUNaLElBQU0sSUFBSUssSUFBSSxHQUFHQyxJQUFJSCxPQUFPSSxNQUFNLEVBQUVGLElBQUlDLEdBQUdELElBQU87WUFFakQsTUFBTUcsSUFBSUwsTUFBTSxDQUFFRSxFQUFHO1lBQ3JCLE1BQU1JLE1BQU1ELENBQUMsQ0FBRUosTUFBTztZQUN0QkwsTUFBTVUsTUFBTVYsTUFBTVUsTUFBTVY7WUFDeEJFLE1BQU1RLE1BQU1SLE1BQU1RLE1BQU1SO1FBRXpCO1FBRUEsSUFBSSxDQUFDRixHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDRSxHQUFHLEdBQUdBO0lBRVo7SUFFQVMsY0FBZUMsSUFBSSxFQUFFUixNQUFNLEVBQUc7UUFFN0IsSUFBSUosTUFBTUM7UUFDVixJQUFJQyxNQUFNLENBQUVEO1FBQ1osSUFBTSxJQUFJSyxJQUFJLEdBQUdDLElBQUlILE9BQU9JLE1BQU0sRUFBRUYsSUFBSUMsR0FBR0QsSUFBTztZQUVqRCxNQUFNRyxJQUFJTCxNQUFNLENBQUVFLEVBQUc7WUFDckIsTUFBTUksTUFBTUUsS0FBS0MsR0FBRyxDQUFFSjtZQUN0QlQsTUFBTVUsTUFBTVYsTUFBTVUsTUFBTVY7WUFDeEJFLE1BQU1RLE1BQU1SLE1BQU1RLE1BQU1SO1FBRXpCO1FBRUEsSUFBSSxDQUFDRixHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDRSxHQUFHLEdBQUdBO0lBRVo7SUFFQVksWUFBYUMsS0FBSyxFQUFHO1FBRXBCLE9BQU8sSUFBSSxDQUFDZixHQUFHLEdBQUdlLE1BQU1iLEdBQUcsSUFBSWEsTUFBTWYsR0FBRyxHQUFHLElBQUksQ0FBQ0UsR0FBRztJQUVwRDtBQUVEO0FBRUFKLHFCQUFxQmtCLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHO0lBRTNDLE1BQU1SLElBQUksSUFBSVosMENBQU9BO0lBQ3JCLE9BQU8sU0FBU29CLFdBQVlMLElBQUksRUFBRU0sR0FBRztRQUVwQyxNQUFNQyxTQUFTRCxJQUFJbEIsR0FBRztRQUN0QixNQUFNb0IsU0FBU0YsSUFBSWhCLEdBQUc7UUFDdEIsSUFBSUYsTUFBTUM7UUFDVixJQUFJQyxNQUFNLENBQUVEO1FBQ1osSUFBTSxJQUFJb0IsSUFBSSxHQUFHQSxLQUFLLEdBQUdBLElBQU87WUFFL0IsSUFBTSxJQUFJQyxJQUFJLEdBQUdBLEtBQUssR0FBR0EsSUFBTztnQkFFL0IsSUFBTSxJQUFJQyxJQUFJLEdBQUdBLEtBQUssR0FBR0EsSUFBTztvQkFFL0JkLEVBQUVZLENBQUMsR0FBR0YsT0FBT0UsQ0FBQyxHQUFHQSxJQUFJRCxPQUFPQyxDQUFDLEdBQUssS0FBSUEsQ0FBQUE7b0JBQ3RDWixFQUFFYSxDQUFDLEdBQUdILE9BQU9HLENBQUMsR0FBR0EsSUFBSUYsT0FBT0UsQ0FBQyxHQUFLLEtBQUlBLENBQUFBO29CQUN0Q2IsRUFBRWMsQ0FBQyxHQUFHSixPQUFPSSxDQUFDLEdBQUdBLElBQUlILE9BQU9HLENBQUMsR0FBSyxLQUFJQSxDQUFBQTtvQkFFdEMsTUFBTWIsTUFBTUUsS0FBS0MsR0FBRyxDQUFFSjtvQkFDdEJULE1BQU13QixLQUFLeEIsR0FBRyxDQUFFVSxLQUFLVjtvQkFDckJFLE1BQU1zQixLQUFLdEIsR0FBRyxDQUFFUSxLQUFLUjtnQkFFdEI7WUFFRDtRQUVEO1FBRUEsSUFBSSxDQUFDRixHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDRSxHQUFHLEdBQUdBO0lBRVo7QUFFRDtBQUVPLE1BQU11QixrQkFBa0I7SUFFOUIsTUFBTUMsaUJBQWlCLElBQUk1QjtJQUMzQixPQUFPLFNBQVMyQixnQkFBaUJFLE1BQU0sRUFBRUMsTUFBTTtRQUU5QyxNQUFNQyxVQUFVRixPQUFPdkIsTUFBTTtRQUM3QixNQUFNMEIsV0FBV0gsT0FBT0ksT0FBTztRQUMvQixNQUFNQyxhQUFhTCxPQUFPTSxTQUFTO1FBRW5DLE1BQU1DLFVBQVVOLE9BQU94QixNQUFNO1FBQzdCLE1BQU0rQixXQUFXUCxPQUFPRyxPQUFPO1FBQy9CLE1BQU1LLGFBQWFSLE9BQU9LLFNBQVM7UUFFbkMsZ0NBQWdDO1FBQ2hDLElBQU0sSUFBSTNCLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO1lBRTlCLE1BQU0rQixLQUFLTCxVQUFVLENBQUUxQixFQUFHO1lBQzFCLE1BQU1nQyxLQUFLUixRQUFRLENBQUV4QixFQUFHO1lBQ3hCb0IsZUFBZWYsYUFBYSxDQUFFMkIsSUFBSUo7WUFDbEMsSUFBS0csR0FBR3ZCLFdBQVcsQ0FBRVksaUJBQW1CLE9BQU87UUFFaEQ7UUFFQSxpQ0FBaUM7UUFDakMsSUFBTSxJQUFJcEIsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87WUFFOUIsTUFBTStCLEtBQUtELFVBQVUsQ0FBRTlCLEVBQUc7WUFDMUIsTUFBTWdDLEtBQUtILFFBQVEsQ0FBRTdCLEVBQUc7WUFDeEJvQixlQUFlZixhQUFhLENBQUUyQixJQUFJVDtZQUNsQyxJQUFLUSxHQUFHdkIsV0FBVyxDQUFFWSxpQkFBbUIsT0FBTztRQUVoRDtJQUVEO0FBRUQsSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL21hdGgvU2VwYXJhdGluZ0F4aXNCb3VuZHMuanM/YjFkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgY2xhc3MgU2VwYXJhdGluZ0F4aXNCb3VuZHMge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5taW4gPSBJbmZpbml0eTtcblx0XHR0aGlzLm1heCA9IC0gSW5maW5pdHk7XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHNGaWVsZCggcG9pbnRzLCBmaWVsZCApIHtcblxuXHRcdGxldCBtaW4gPSBJbmZpbml0eTtcblx0XHRsZXQgbWF4ID0gLSBJbmZpbml0eTtcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0Y29uc3QgdmFsID0gcFsgZmllbGQgXTtcblx0XHRcdG1pbiA9IHZhbCA8IG1pbiA/IHZhbCA6IG1pbjtcblx0XHRcdG1heCA9IHZhbCA+IG1heCA/IHZhbCA6IG1heDtcblxuXHRcdH1cblxuXHRcdHRoaXMubWluID0gbWluO1xuXHRcdHRoaXMubWF4ID0gbWF4O1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzKCBheGlzLCBwb2ludHMgKSB7XG5cblx0XHRsZXQgbWluID0gSW5maW5pdHk7XG5cdFx0bGV0IG1heCA9IC0gSW5maW5pdHk7XG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHAgPSBwb2ludHNbIGkgXTtcblx0XHRcdGNvbnN0IHZhbCA9IGF4aXMuZG90KCBwICk7XG5cdFx0XHRtaW4gPSB2YWwgPCBtaW4gPyB2YWwgOiBtaW47XG5cdFx0XHRtYXggPSB2YWwgPiBtYXggPyB2YWwgOiBtYXg7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1pbiA9IG1pbjtcblx0XHR0aGlzLm1heCA9IG1heDtcblxuXHR9XG5cblx0aXNTZXBhcmF0ZWQoIG90aGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluID4gb3RoZXIubWF4IHx8IG90aGVyLm1pbiA+IHRoaXMubWF4O1xuXG5cdH1cblxufVxuXG5TZXBhcmF0aW5nQXhpc0JvdW5kcy5wcm90b3R5cGUuc2V0RnJvbUJveCA9ICggZnVuY3Rpb24gKCkge1xuXG5cdGNvbnN0IHAgPSBuZXcgVmVjdG9yMygpO1xuXHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUJveCggYXhpcywgYm94ICkge1xuXG5cdFx0Y29uc3QgYm94TWluID0gYm94Lm1pbjtcblx0XHRjb25zdCBib3hNYXggPSBib3gubWF4O1xuXHRcdGxldCBtaW4gPSBJbmZpbml0eTtcblx0XHRsZXQgbWF4ID0gLSBJbmZpbml0eTtcblx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPD0gMTsgeCArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IHkgPSAwOyB5IDw9IDE7IHkgKysgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IHogPSAwOyB6IDw9IDE7IHogKysgKSB7XG5cblx0XHRcdFx0XHRwLnggPSBib3hNaW4ueCAqIHggKyBib3hNYXgueCAqICggMSAtIHggKTtcblx0XHRcdFx0XHRwLnkgPSBib3hNaW4ueSAqIHkgKyBib3hNYXgueSAqICggMSAtIHkgKTtcblx0XHRcdFx0XHRwLnogPSBib3hNaW4ueiAqIHogKyBib3hNYXgueiAqICggMSAtIHogKTtcblxuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGF4aXMuZG90KCBwICk7XG5cdFx0XHRcdFx0bWluID0gTWF0aC5taW4oIHZhbCwgbWluICk7XG5cdFx0XHRcdFx0bWF4ID0gTWF0aC5tYXgoIHZhbCwgbWF4ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLm1pbiA9IG1pbjtcblx0XHR0aGlzLm1heCA9IG1heDtcblxuXHR9O1xuXG59ICkoKTtcblxuZXhwb3J0IGNvbnN0IGFyZUludGVyc2VjdGluZyA9ICggZnVuY3Rpb24gKCkge1xuXG5cdGNvbnN0IGNhY2hlU2F0Qm91bmRzID0gbmV3IFNlcGFyYXRpbmdBeGlzQm91bmRzKCk7XG5cdHJldHVybiBmdW5jdGlvbiBhcmVJbnRlcnNlY3RpbmcoIHNoYXBlMSwgc2hhcGUyICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzMSA9IHNoYXBlMS5wb2ludHM7XG5cdFx0Y29uc3Qgc2F0QXhlczEgPSBzaGFwZTEuc2F0QXhlcztcblx0XHRjb25zdCBzYXRCb3VuZHMxID0gc2hhcGUxLnNhdEJvdW5kcztcblxuXHRcdGNvbnN0IHBvaW50czIgPSBzaGFwZTIucG9pbnRzO1xuXHRcdGNvbnN0IHNhdEF4ZXMyID0gc2hhcGUyLnNhdEF4ZXM7XG5cdFx0Y29uc3Qgc2F0Qm91bmRzMiA9IHNoYXBlMi5zYXRCb3VuZHM7XG5cblx0XHQvLyBjaGVjayBheGVzIG9mIHRoZSBmaXJzdCBzaGFwZVxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHNiID0gc2F0Qm91bmRzMVsgaSBdO1xuXHRcdFx0Y29uc3Qgc2EgPSBzYXRBeGVzMVsgaSBdO1xuXHRcdFx0Y2FjaGVTYXRCb3VuZHMuc2V0RnJvbVBvaW50cyggc2EsIHBvaW50czIgKTtcblx0XHRcdGlmICggc2IuaXNTZXBhcmF0ZWQoIGNhY2hlU2F0Qm91bmRzICkgKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBjaGVjayBheGVzIG9mIHRoZSBzZWNvbmQgc2hhcGVcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzYiA9IHNhdEJvdW5kczJbIGkgXTtcblx0XHRcdGNvbnN0IHNhID0gc2F0QXhlczJbIGkgXTtcblx0XHRcdGNhY2hlU2F0Qm91bmRzLnNldEZyb21Qb2ludHMoIHNhLCBwb2ludHMxICk7XG5cdFx0XHRpZiAoIHNiLmlzU2VwYXJhdGVkKCBjYWNoZVNhdEJvdW5kcyApICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdH07XG5cbn0gKSgpO1xuIl0sIm5hbWVzIjpbIlZlY3RvcjMiLCJTZXBhcmF0aW5nQXhpc0JvdW5kcyIsImNvbnN0cnVjdG9yIiwibWluIiwiSW5maW5pdHkiLCJtYXgiLCJzZXRGcm9tUG9pbnRzRmllbGQiLCJwb2ludHMiLCJmaWVsZCIsImkiLCJsIiwibGVuZ3RoIiwicCIsInZhbCIsInNldEZyb21Qb2ludHMiLCJheGlzIiwiZG90IiwiaXNTZXBhcmF0ZWQiLCJvdGhlciIsInByb3RvdHlwZSIsInNldEZyb21Cb3giLCJib3giLCJib3hNaW4iLCJib3hNYXgiLCJ4IiwieSIsInoiLCJNYXRoIiwiYXJlSW50ZXJzZWN0aW5nIiwiY2FjaGVTYXRCb3VuZHMiLCJzaGFwZTEiLCJzaGFwZTIiLCJwb2ludHMxIiwic2F0QXhlczEiLCJzYXRBeGVzIiwic2F0Qm91bmRzMSIsInNhdEJvdW5kcyIsInBvaW50czIiLCJzYXRBeGVzMiIsInNhdEJvdW5kczIiLCJzYiIsInNhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayToBox: () => (/* binding */ arrayToBox),\n/* harmony export */   computeSurfaceArea: () => (/* binding */ computeSurfaceArea),\n/* harmony export */   copyBounds: () => (/* binding */ copyBounds),\n/* harmony export */   expandByTriangleBounds: () => (/* binding */ expandByTriangleBounds),\n/* harmony export */   getLongestEdgeIndex: () => (/* binding */ getLongestEdgeIndex),\n/* harmony export */   makeEmptyBounds: () => (/* binding */ makeEmptyBounds),\n/* harmony export */   unionBounds: () => (/* binding */ unionBounds)\n/* harmony export */ });\nfunction arrayToBox(nodeIndex32, array, target) {\n    target.min.x = array[nodeIndex32];\n    target.min.y = array[nodeIndex32 + 1];\n    target.min.z = array[nodeIndex32 + 2];\n    target.max.x = array[nodeIndex32 + 3];\n    target.max.y = array[nodeIndex32 + 4];\n    target.max.z = array[nodeIndex32 + 5];\n    return target;\n}\nfunction makeEmptyBounds(target) {\n    target[0] = target[1] = target[2] = Infinity;\n    target[3] = target[4] = target[5] = -Infinity;\n}\nfunction getLongestEdgeIndex(bounds) {\n    let splitDimIdx = -1;\n    let splitDist = -Infinity;\n    for(let i = 0; i < 3; i++){\n        const dist = bounds[i + 3] - bounds[i];\n        if (dist > splitDist) {\n            splitDist = dist;\n            splitDimIdx = i;\n        }\n    }\n    return splitDimIdx;\n}\n// copies bounds a into bounds b\nfunction copyBounds(source, target) {\n    target.set(source);\n}\n// sets bounds target to the union of bounds a and b\nfunction unionBounds(a, b, target) {\n    let aVal, bVal;\n    for(let d = 0; d < 3; d++){\n        const d3 = d + 3;\n        // set the minimum values\n        aVal = a[d];\n        bVal = b[d];\n        target[d] = aVal < bVal ? aVal : bVal;\n        // set the max values\n        aVal = a[d3];\n        bVal = b[d3];\n        target[d3] = aVal > bVal ? aVal : bVal;\n    }\n}\n// expands the given bounds by the provided triangle bounds\nfunction expandByTriangleBounds(startIndex, triangleBounds, bounds) {\n    for(let d = 0; d < 3; d++){\n        const tCenter = triangleBounds[startIndex + 2 * d];\n        const tHalf = triangleBounds[startIndex + 2 * d + 1];\n        const tMin = tCenter - tHalf;\n        const tMax = tCenter + tHalf;\n        if (tMin < bounds[d]) {\n            bounds[d] = tMin;\n        }\n        if (tMax > bounds[d + 3]) {\n            bounds[d + 3] = tMax;\n        }\n    }\n}\n// compute bounds surface area\nfunction computeSurfaceArea(bounds) {\n    const d0 = bounds[3] - bounds[0];\n    const d1 = bounds[4] - bounds[1];\n    const d2 = bounds[5] - bounds[2];\n    return 2 * (d0 * d1 + d1 * d2 + d2 * d0);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9BcnJheUJveFV0aWxpdGllcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQU8sU0FBU0EsV0FBWUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFFckRBLE9BQU9DLEdBQUcsQ0FBQ0MsQ0FBQyxHQUFHSCxLQUFLLENBQUVELFlBQWE7SUFDbkNFLE9BQU9DLEdBQUcsQ0FBQ0UsQ0FBQyxHQUFHSixLQUFLLENBQUVELGNBQWMsRUFBRztJQUN2Q0UsT0FBT0MsR0FBRyxDQUFDRyxDQUFDLEdBQUdMLEtBQUssQ0FBRUQsY0FBYyxFQUFHO0lBRXZDRSxPQUFPSyxHQUFHLENBQUNILENBQUMsR0FBR0gsS0FBSyxDQUFFRCxjQUFjLEVBQUc7SUFDdkNFLE9BQU9LLEdBQUcsQ0FBQ0YsQ0FBQyxHQUFHSixLQUFLLENBQUVELGNBQWMsRUFBRztJQUN2Q0UsT0FBT0ssR0FBRyxDQUFDRCxDQUFDLEdBQUdMLEtBQUssQ0FBRUQsY0FBYyxFQUFHO0lBRXZDLE9BQU9FO0FBRVI7QUFFTyxTQUFTTSxnQkFBaUJOLE1BQU07SUFFdENBLE1BQU0sQ0FBRSxFQUFHLEdBQUdBLE1BQU0sQ0FBRSxFQUFHLEdBQUdBLE1BQU0sQ0FBRSxFQUFHLEdBQUdPO0lBQzFDUCxNQUFNLENBQUUsRUFBRyxHQUFHQSxNQUFNLENBQUUsRUFBRyxHQUFHQSxNQUFNLENBQUUsRUFBRyxHQUFHLENBQUVPO0FBRTdDO0FBRU8sU0FBU0Msb0JBQXFCQyxNQUFNO0lBRTFDLElBQUlDLGNBQWMsQ0FBRTtJQUNwQixJQUFJQyxZQUFZLENBQUVKO0lBRWxCLElBQU0sSUFBSUssSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQU87UUFFOUIsTUFBTUMsT0FBT0osTUFBTSxDQUFFRyxJQUFJLEVBQUcsR0FBR0gsTUFBTSxDQUFFRyxFQUFHO1FBQzFDLElBQUtDLE9BQU9GLFdBQVk7WUFFdkJBLFlBQVlFO1lBQ1pILGNBQWNFO1FBRWY7SUFFRDtJQUVBLE9BQU9GO0FBRVI7QUFFQSxnQ0FBZ0M7QUFDekIsU0FBU0ksV0FBWUMsTUFBTSxFQUFFZixNQUFNO0lBRXpDQSxPQUFPZ0IsR0FBRyxDQUFFRDtBQUViO0FBRUEsb0RBQW9EO0FBQzdDLFNBQVNFLFlBQWFDLENBQUMsRUFBRUMsQ0FBQyxFQUFFbkIsTUFBTTtJQUV4QyxJQUFJb0IsTUFBTUM7SUFDVixJQUFNLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFPO1FBRTlCLE1BQU1DLEtBQUtELElBQUk7UUFFZix5QkFBeUI7UUFDekJGLE9BQU9GLENBQUMsQ0FBRUksRUFBRztRQUNiRCxPQUFPRixDQUFDLENBQUVHLEVBQUc7UUFDYnRCLE1BQU0sQ0FBRXNCLEVBQUcsR0FBR0YsT0FBT0MsT0FBT0QsT0FBT0M7UUFFbkMscUJBQXFCO1FBQ3JCRCxPQUFPRixDQUFDLENBQUVLLEdBQUk7UUFDZEYsT0FBT0YsQ0FBQyxDQUFFSSxHQUFJO1FBQ2R2QixNQUFNLENBQUV1QixHQUFJLEdBQUdILE9BQU9DLE9BQU9ELE9BQU9DO0lBRXJDO0FBRUQ7QUFFQSwyREFBMkQ7QUFDcEQsU0FBU0csdUJBQXdCQyxVQUFVLEVBQUVDLGNBQWMsRUFBRWpCLE1BQU07SUFFekUsSUFBTSxJQUFJYSxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBTztRQUU5QixNQUFNSyxVQUFVRCxjQUFjLENBQUVELGFBQWEsSUFBSUgsRUFBRztRQUNwRCxNQUFNTSxRQUFRRixjQUFjLENBQUVELGFBQWEsSUFBSUgsSUFBSSxFQUFHO1FBRXRELE1BQU1PLE9BQU9GLFVBQVVDO1FBQ3ZCLE1BQU1FLE9BQU9ILFVBQVVDO1FBRXZCLElBQUtDLE9BQU9wQixNQUFNLENBQUVhLEVBQUcsRUFBRztZQUV6QmIsTUFBTSxDQUFFYSxFQUFHLEdBQUdPO1FBRWY7UUFFQSxJQUFLQyxPQUFPckIsTUFBTSxDQUFFYSxJQUFJLEVBQUcsRUFBRztZQUU3QmIsTUFBTSxDQUFFYSxJQUFJLEVBQUcsR0FBR1E7UUFFbkI7SUFFRDtBQUVEO0FBRUEsOEJBQThCO0FBQ3ZCLFNBQVNDLG1CQUFvQnRCLE1BQU07SUFFekMsTUFBTXVCLEtBQUt2QixNQUFNLENBQUUsRUFBRyxHQUFHQSxNQUFNLENBQUUsRUFBRztJQUNwQyxNQUFNd0IsS0FBS3hCLE1BQU0sQ0FBRSxFQUFHLEdBQUdBLE1BQU0sQ0FBRSxFQUFHO0lBQ3BDLE1BQU15QixLQUFLekIsTUFBTSxDQUFFLEVBQUcsR0FBR0EsTUFBTSxDQUFFLEVBQUc7SUFFcEMsT0FBTyxJQUFNdUIsQ0FBQUEsS0FBS0MsS0FBS0EsS0FBS0MsS0FBS0EsS0FBS0YsRUFBQztBQUV4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0FycmF5Qm94VXRpbGl0aWVzLmpzPzI4NWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9Cb3goIG5vZGVJbmRleDMyLCBhcnJheSwgdGFyZ2V0ICkge1xuXG5cdHRhcmdldC5taW4ueCA9IGFycmF5WyBub2RlSW5kZXgzMiBdO1xuXHR0YXJnZXQubWluLnkgPSBhcnJheVsgbm9kZUluZGV4MzIgKyAxIF07XG5cdHRhcmdldC5taW4ueiA9IGFycmF5WyBub2RlSW5kZXgzMiArIDIgXTtcblxuXHR0YXJnZXQubWF4LnggPSBhcnJheVsgbm9kZUluZGV4MzIgKyAzIF07XG5cdHRhcmdldC5tYXgueSA9IGFycmF5WyBub2RlSW5kZXgzMiArIDQgXTtcblx0dGFyZ2V0Lm1heC56ID0gYXJyYXlbIG5vZGVJbmRleDMyICsgNSBdO1xuXG5cdHJldHVybiB0YXJnZXQ7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFbXB0eUJvdW5kcyggdGFyZ2V0ICkge1xuXG5cdHRhcmdldFsgMCBdID0gdGFyZ2V0WyAxIF0gPSB0YXJnZXRbIDIgXSA9IEluZmluaXR5O1xuXHR0YXJnZXRbIDMgXSA9IHRhcmdldFsgNCBdID0gdGFyZ2V0WyA1IF0gPSAtIEluZmluaXR5O1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb25nZXN0RWRnZUluZGV4KCBib3VuZHMgKSB7XG5cblx0bGV0IHNwbGl0RGltSWR4ID0gLSAxO1xuXHRsZXQgc3BsaXREaXN0ID0gLSBJbmZpbml0eTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAzOyBpICsrICkge1xuXG5cdFx0Y29uc3QgZGlzdCA9IGJvdW5kc1sgaSArIDMgXSAtIGJvdW5kc1sgaSBdO1xuXHRcdGlmICggZGlzdCA+IHNwbGl0RGlzdCApIHtcblxuXHRcdFx0c3BsaXREaXN0ID0gZGlzdDtcblx0XHRcdHNwbGl0RGltSWR4ID0gaTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHNwbGl0RGltSWR4O1xuXG59XG5cbi8vIGNvcGllcyBib3VuZHMgYSBpbnRvIGJvdW5kcyBiXG5leHBvcnQgZnVuY3Rpb24gY29weUJvdW5kcyggc291cmNlLCB0YXJnZXQgKSB7XG5cblx0dGFyZ2V0LnNldCggc291cmNlICk7XG5cbn1cblxuLy8gc2V0cyBib3VuZHMgdGFyZ2V0IHRvIHRoZSB1bmlvbiBvZiBib3VuZHMgYSBhbmQgYlxuZXhwb3J0IGZ1bmN0aW9uIHVuaW9uQm91bmRzKCBhLCBiLCB0YXJnZXQgKSB7XG5cblx0bGV0IGFWYWwsIGJWYWw7XG5cdGZvciAoIGxldCBkID0gMDsgZCA8IDM7IGQgKysgKSB7XG5cblx0XHRjb25zdCBkMyA9IGQgKyAzO1xuXG5cdFx0Ly8gc2V0IHRoZSBtaW5pbXVtIHZhbHVlc1xuXHRcdGFWYWwgPSBhWyBkIF07XG5cdFx0YlZhbCA9IGJbIGQgXTtcblx0XHR0YXJnZXRbIGQgXSA9IGFWYWwgPCBiVmFsID8gYVZhbCA6IGJWYWw7XG5cblx0XHQvLyBzZXQgdGhlIG1heCB2YWx1ZXNcblx0XHRhVmFsID0gYVsgZDMgXTtcblx0XHRiVmFsID0gYlsgZDMgXTtcblx0XHR0YXJnZXRbIGQzIF0gPSBhVmFsID4gYlZhbCA/IGFWYWwgOiBiVmFsO1xuXG5cdH1cblxufVxuXG4vLyBleHBhbmRzIHRoZSBnaXZlbiBib3VuZHMgYnkgdGhlIHByb3ZpZGVkIHRyaWFuZ2xlIGJvdW5kc1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZEJ5VHJpYW5nbGVCb3VuZHMoIHN0YXJ0SW5kZXgsIHRyaWFuZ2xlQm91bmRzLCBib3VuZHMgKSB7XG5cblx0Zm9yICggbGV0IGQgPSAwOyBkIDwgMzsgZCArKyApIHtcblxuXHRcdGNvbnN0IHRDZW50ZXIgPSB0cmlhbmdsZUJvdW5kc1sgc3RhcnRJbmRleCArIDIgKiBkIF07XG5cdFx0Y29uc3QgdEhhbGYgPSB0cmlhbmdsZUJvdW5kc1sgc3RhcnRJbmRleCArIDIgKiBkICsgMSBdO1xuXG5cdFx0Y29uc3QgdE1pbiA9IHRDZW50ZXIgLSB0SGFsZjtcblx0XHRjb25zdCB0TWF4ID0gdENlbnRlciArIHRIYWxmO1xuXG5cdFx0aWYgKCB0TWluIDwgYm91bmRzWyBkIF0gKSB7XG5cblx0XHRcdGJvdW5kc1sgZCBdID0gdE1pbjtcblxuXHRcdH1cblxuXHRcdGlmICggdE1heCA+IGJvdW5kc1sgZCArIDMgXSApIHtcblxuXHRcdFx0Ym91bmRzWyBkICsgMyBdID0gdE1heDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gY29tcHV0ZSBib3VuZHMgc3VyZmFjZSBhcmVhXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVN1cmZhY2VBcmVhKCBib3VuZHMgKSB7XG5cblx0Y29uc3QgZDAgPSBib3VuZHNbIDMgXSAtIGJvdW5kc1sgMCBdO1xuXHRjb25zdCBkMSA9IGJvdW5kc1sgNCBdIC0gYm91bmRzWyAxIF07XG5cdGNvbnN0IGQyID0gYm91bmRzWyA1IF0gLSBib3VuZHNbIDIgXTtcblxuXHRyZXR1cm4gMiAqICggZDAgKiBkMSArIGQxICogZDIgKyBkMiAqIGQwICk7XG5cbn1cbiJdLCJuYW1lcyI6WyJhcnJheVRvQm94Iiwibm9kZUluZGV4MzIiLCJhcnJheSIsInRhcmdldCIsIm1pbiIsIngiLCJ5IiwieiIsIm1heCIsIm1ha2VFbXB0eUJvdW5kcyIsIkluZmluaXR5IiwiZ2V0TG9uZ2VzdEVkZ2VJbmRleCIsImJvdW5kcyIsInNwbGl0RGltSWR4Iiwic3BsaXREaXN0IiwiaSIsImRpc3QiLCJjb3B5Qm91bmRzIiwic291cmNlIiwic2V0IiwidW5pb25Cb3VuZHMiLCJhIiwiYiIsImFWYWwiLCJiVmFsIiwiZCIsImQzIiwiZXhwYW5kQnlUcmlhbmdsZUJvdW5kcyIsInN0YXJ0SW5kZXgiLCJ0cmlhbmdsZUJvdW5kcyIsInRDZW50ZXIiLCJ0SGFsZiIsInRNaW4iLCJ0TWF4IiwiY29tcHV0ZVN1cmZhY2VBcmVhIiwiZDAiLCJkMSIsImQyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/BufferUtils.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/BufferUtils.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSharedArrayBufferSupported: () => (/* binding */ isSharedArrayBufferSupported)\n/* harmony export */ });\nfunction isSharedArrayBufferSupported() {\n    return typeof SharedArrayBuffer !== \"undefined\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9CdWZmZXJVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0E7SUFFZixPQUFPLE9BQU9DLHNCQUFzQjtBQUVyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0J1ZmZlclV0aWxzLmpzPzA1YWEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXJTdXBwb3J0ZWQoKSB7XG5cblx0cmV0dXJuIHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCc7XG5cbn1cbiJdLCJuYW1lcyI6WyJpc1NoYXJlZEFycmF5QnVmZmVyU3VwcG9ydGVkIiwiU2hhcmVkQXJyYXlCdWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/BufferUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedTrianglePool: () => (/* binding */ ExtendedTrianglePool)\n/* harmony export */ });\n/* harmony import */ var _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/ExtendedTriangle.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js\");\n/* harmony import */ var _PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PrimitivePool.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\");\n\n\nclass ExtendedTrianglePoolBase extends _PrimitivePool_js__WEBPACK_IMPORTED_MODULE_0__.PrimitivePool {\n    constructor(){\n        super(()=>new _math_ExtendedTriangle_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedTriangle());\n    }\n}\nconst ExtendedTrianglePool = /* @__PURE__ */ new ExtendedTrianglePoolBase();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9FeHRlbmRlZFRyaWFuZ2xlUG9vbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0Q7QUFDWjtBQUVuRCxNQUFNRSxpQ0FBaUNELDREQUFhQTtJQUVuREUsYUFBYztRQUViLEtBQUssQ0FBRSxJQUFNLElBQUlILHVFQUFnQkE7SUFFbEM7QUFFRDtBQUVPLE1BQU1JLHVCQUF1QixhQUFhLEdBQUcsSUFBSUYsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS0zZC1jb2RlLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9kcmVpL25vZGVfbW9kdWxlcy90aHJlZS1tZXNoLWJ2aC9zcmMvdXRpbHMvRXh0ZW5kZWRUcmlhbmdsZVBvb2wuanM/ZDA0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbmRlZFRyaWFuZ2xlIH0gZnJvbSAnLi4vbWF0aC9FeHRlbmRlZFRyaWFuZ2xlLmpzJztcbmltcG9ydCB7IFByaW1pdGl2ZVBvb2wgfSBmcm9tICcuL1ByaW1pdGl2ZVBvb2wuanMnO1xuXG5jbGFzcyBFeHRlbmRlZFRyaWFuZ2xlUG9vbEJhc2UgZXh0ZW5kcyBQcmltaXRpdmVQb29sIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCAoKSA9PiBuZXcgRXh0ZW5kZWRUcmlhbmdsZSgpICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBjb25zdCBFeHRlbmRlZFRyaWFuZ2xlUG9vbCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRXh0ZW5kZWRUcmlhbmdsZVBvb2xCYXNlKCk7XG4iXSwibmFtZXMiOlsiRXh0ZW5kZWRUcmlhbmdsZSIsIlByaW1pdGl2ZVBvb2wiLCJFeHRlbmRlZFRyaWFuZ2xlUG9vbEJhc2UiLCJjb25zdHJ1Y3RvciIsIkV4dGVuZGVkVHJpYW5nbGVQb29sIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceleratedRaycast: () => (/* binding */ acceleratedRaycast),\n/* harmony export */   computeBoundsTree: () => (/* binding */ computeBoundsTree),\n/* harmony export */   disposeBoundsTree: () => (/* binding */ disposeBoundsTree)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _GeometryRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GeometryRayIntersectUtilities.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js\");\n/* harmony import */ var _core_MeshBVH_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/MeshBVH.js */ \"(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/core/MeshBVH.js\");\n\n\n\nconst ray = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst origMeshRaycastFunc = three__WEBPACK_IMPORTED_MODULE_0__.Mesh.prototype.raycast;\nfunction acceleratedRaycast(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        tmpInverseMatrix.copy(this.matrixWorld).invert();\n        ray.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0,_GeometryRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_1__.convertRaycastIntersect)(bvh.raycastFirst(ray, this.material), this, raycaster);\n            if (hit) {\n                intersects.push(hit);\n            }\n        } else {\n            const hits = bvh.raycast(ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0,_GeometryRayIntersectUtilities_js__WEBPACK_IMPORTED_MODULE_1__.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) {\n                    intersects.push(hit);\n                }\n            }\n        }\n    } else {\n        origMeshRaycastFunc.call(this, raycaster, intersects);\n    }\n}\nfunction computeBoundsTree(options) {\n    this.boundsTree = new _core_MeshBVH_js__WEBPACK_IMPORTED_MODULE_2__.MeshBVH(this, options);\n    return this.boundsTree;\n}\nfunction disposeBoundsTree() {\n    this.boundsTree = null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9FeHRlbnNpb25VdGlsaXRpZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTJDO0FBQ2tDO0FBQ2hDO0FBRTdDLE1BQU1LLE1BQU0sYUFBYSxHQUFHLElBQUlMLHNDQUFHQTtBQUNuQyxNQUFNTSxtQkFBbUIsYUFBYSxHQUFHLElBQUlMLDBDQUFPQTtBQUNwRCxNQUFNTSxzQkFBc0JMLHVDQUFJQSxDQUFDTSxTQUFTLENBQUNDLE9BQU87QUFFM0MsU0FBU0MsbUJBQW9CQyxTQUFTLEVBQUVDLFVBQVU7SUFFeEQsSUFBSyxJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsVUFBVSxFQUFHO1FBRS9CLElBQUssSUFBSSxDQUFDQyxRQUFRLEtBQUtDLFdBQVk7UUFFbkNWLGlCQUFpQlcsSUFBSSxDQUFFLElBQUksQ0FBQ0MsV0FBVyxFQUFHQyxNQUFNO1FBQ2hEZCxJQUFJWSxJQUFJLENBQUVOLFVBQVVOLEdBQUcsRUFBR2UsWUFBWSxDQUFFZDtRQUV4QyxNQUFNZSxNQUFNLElBQUksQ0FBQ1IsUUFBUSxDQUFDQyxVQUFVO1FBQ3BDLElBQUtILFVBQVVXLFlBQVksS0FBSyxNQUFPO1lBRXRDLE1BQU1DLE1BQU1wQiwwRkFBdUJBLENBQUVrQixJQUFJRyxZQUFZLENBQUVuQixLQUFLLElBQUksQ0FBQ1UsUUFBUSxHQUFJLElBQUksRUFBRUo7WUFDbkYsSUFBS1ksS0FBTTtnQkFFVlgsV0FBV2EsSUFBSSxDQUFFRjtZQUVsQjtRQUVELE9BQU87WUFFTixNQUFNRyxPQUFPTCxJQUFJWixPQUFPLENBQUVKLEtBQUssSUFBSSxDQUFDVSxRQUFRO1lBQzVDLElBQU0sSUFBSVksSUFBSSxHQUFHQyxJQUFJRixLQUFLRyxNQUFNLEVBQUVGLElBQUlDLEdBQUdELElBQU87Z0JBRS9DLE1BQU1KLE1BQU1wQiwwRkFBdUJBLENBQUV1QixJQUFJLENBQUVDLEVBQUcsRUFBRSxJQUFJLEVBQUVoQjtnQkFDdEQsSUFBS1ksS0FBTTtvQkFFVlgsV0FBV2EsSUFBSSxDQUFFRjtnQkFFbEI7WUFFRDtRQUVEO0lBRUQsT0FBTztRQUVOaEIsb0JBQW9CdUIsSUFBSSxDQUFFLElBQUksRUFBRW5CLFdBQVdDO0lBRTVDO0FBRUQ7QUFFTyxTQUFTbUIsa0JBQW1CQyxPQUFPO0lBRXpDLElBQUksQ0FBQ2xCLFVBQVUsR0FBRyxJQUFJVixxREFBT0EsQ0FBRSxJQUFJLEVBQUU0QjtJQUNyQyxPQUFPLElBQUksQ0FBQ2xCLFVBQVU7QUFFdkI7QUFFTyxTQUFTbUI7SUFFZixJQUFJLENBQUNuQixVQUFVLEdBQUc7QUFFbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9FeHRlbnNpb25VdGlsaXRpZXMuanM/OTExZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXksIE1hdHJpeDQsIE1lc2ggfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBjb252ZXJ0UmF5Y2FzdEludGVyc2VjdCB9IGZyb20gJy4vR2VvbWV0cnlSYXlJbnRlcnNlY3RVdGlsaXRpZXMuanMnO1xuaW1wb3J0IHsgTWVzaEJWSCB9IGZyb20gJy4uL2NvcmUvTWVzaEJWSC5qcyc7XG5cbmNvbnN0IHJheSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgUmF5KCk7XG5jb25zdCB0bXBJbnZlcnNlTWF0cml4ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBvcmlnTWVzaFJheWNhc3RGdW5jID0gTWVzaC5wcm90b3R5cGUucmF5Y2FzdDtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2VsZXJhdGVkUmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdGlmICggdGhpcy5nZW9tZXRyeS5ib3VuZHNUcmVlICkge1xuXG5cdFx0aWYgKCB0aGlzLm1hdGVyaWFsID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHR0bXBJbnZlcnNlTWF0cml4LmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRyYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggdG1wSW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0Y29uc3QgYnZoID0gdGhpcy5nZW9tZXRyeS5ib3VuZHNUcmVlO1xuXHRcdGlmICggcmF5Y2FzdGVyLmZpcnN0SGl0T25seSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3QgaGl0ID0gY29udmVydFJheWNhc3RJbnRlcnNlY3QoIGJ2aC5yYXljYXN0Rmlyc3QoIHJheSwgdGhpcy5tYXRlcmlhbCApLCB0aGlzLCByYXljYXN0ZXIgKTtcblx0XHRcdGlmICggaGl0ICkge1xuXG5cdFx0XHRcdGludGVyc2VjdHMucHVzaCggaGl0ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGhpdHMgPSBidmgucmF5Y2FzdCggcmF5LCB0aGlzLm1hdGVyaWFsICk7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBoaXRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaGl0ID0gY29udmVydFJheWNhc3RJbnRlcnNlY3QoIGhpdHNbIGkgXSwgdGhpcywgcmF5Y2FzdGVyICk7XG5cdFx0XHRcdGlmICggaGl0ICkge1xuXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBoaXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0b3JpZ01lc2hSYXljYXN0RnVuYy5jYWxsKCB0aGlzLCByYXljYXN0ZXIsIGludGVyc2VjdHMgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVCb3VuZHNUcmVlKCBvcHRpb25zICkge1xuXG5cdHRoaXMuYm91bmRzVHJlZSA9IG5ldyBNZXNoQlZIKCB0aGlzLCBvcHRpb25zICk7XG5cdHJldHVybiB0aGlzLmJvdW5kc1RyZWU7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3Bvc2VCb3VuZHNUcmVlKCkge1xuXG5cdHRoaXMuYm91bmRzVHJlZSA9IG51bGw7XG5cbn1cbiJdLCJuYW1lcyI6WyJSYXkiLCJNYXRyaXg0IiwiTWVzaCIsImNvbnZlcnRSYXljYXN0SW50ZXJzZWN0IiwiTWVzaEJWSCIsInJheSIsInRtcEludmVyc2VNYXRyaXgiLCJvcmlnTWVzaFJheWNhc3RGdW5jIiwicHJvdG90eXBlIiwicmF5Y2FzdCIsImFjY2VsZXJhdGVkUmF5Y2FzdCIsInJheWNhc3RlciIsImludGVyc2VjdHMiLCJnZW9tZXRyeSIsImJvdW5kc1RyZWUiLCJtYXRlcmlhbCIsInVuZGVmaW5lZCIsImNvcHkiLCJtYXRyaXhXb3JsZCIsImludmVydCIsImFwcGx5TWF0cml4NCIsImJ2aCIsImZpcnN0SGl0T25seSIsImhpdCIsInJheWNhc3RGaXJzdCIsInB1c2giLCJoaXRzIiwiaSIsImwiLCJsZW5ndGgiLCJjYWxsIiwiY29tcHV0ZUJvdW5kc1RyZWUiLCJvcHRpb25zIiwiZGlzcG9zZUJvdW5kc1RyZWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertRaycastIntersect: () => (/* binding */ convertRaycastIntersect)\n/* harmony export */ });\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction convertRaycastIntersect(hit, object, raycaster) {\n    if (hit === null) {\n        return null;\n    }\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) {\n        return null;\n    } else {\n        return hit;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9HZW9tZXRyeVJheUludGVyc2VjdFV0aWxpdGllcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUZBQWlGO0FBQ2pGLDhEQUE4RDtBQUN2RCxTQUFTQSx3QkFBeUJDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxTQUFTO0lBRTlELElBQUtGLFFBQVEsTUFBTztRQUVuQixPQUFPO0lBRVI7SUFFQUEsSUFBSUcsS0FBSyxDQUFDQyxZQUFZLENBQUVILE9BQU9JLFdBQVc7SUFDMUNMLElBQUlNLFFBQVEsR0FBR04sSUFBSUcsS0FBSyxDQUFDSSxVQUFVLENBQUVMLFVBQVVNLEdBQUcsQ0FBQ0MsTUFBTTtJQUN6RFQsSUFBSUMsTUFBTSxHQUFHQTtJQUViLElBQUtELElBQUlNLFFBQVEsR0FBR0osVUFBVVEsSUFBSSxJQUFJVixJQUFJTSxRQUFRLEdBQUdKLFVBQVVTLEdBQUcsRUFBRztRQUVwRSxPQUFPO0lBRVIsT0FBTztRQUVOLE9BQU9YO0lBRVI7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtM2QtY29kZS8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZHJlaS9ub2RlX21vZHVsZXMvdGhyZWUtbWVzaC1idmgvc3JjL3V0aWxzL0dlb21ldHJ5UmF5SW50ZXJzZWN0VXRpbGl0aWVzLmpzP2I0NDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29udmVydHMgdGhlIGdpdmVuIEJWSCByYXljYXN0IGludGVyc2VjdGlvbiB0byBhbGlnbiB3aXRoIHRoZSB0aHJlZS5qcyByYXljYXN0XG4vLyBzdHJ1Y3R1cmUgKGluY2x1ZGUgb2JqZWN0LCB3b3JsZCBzcGFjZSBkaXN0YW5jZSBhbmQgcG9pbnQpLlxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRSYXljYXN0SW50ZXJzZWN0KCBoaXQsIG9iamVjdCwgcmF5Y2FzdGVyICkge1xuXG5cdGlmICggaGl0ID09PSBudWxsICkge1xuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdGhpdC5wb2ludC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXHRoaXQuZGlzdGFuY2UgPSBoaXQucG9pbnQuZGlzdGFuY2VUbyggcmF5Y2FzdGVyLnJheS5vcmlnaW4gKTtcblx0aGl0Lm9iamVjdCA9IG9iamVjdDtcblxuXHRpZiAoIGhpdC5kaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGhpdC5kaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSB7XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIGhpdDtcblxuXHR9XG5cbn1cbiJdLCJuYW1lcyI6WyJjb252ZXJ0UmF5Y2FzdEludGVyc2VjdCIsImhpdCIsIm9iamVjdCIsInJheWNhc3RlciIsInBvaW50IiwiYXBwbHlNYXRyaXg0IiwibWF0cml4V29ybGQiLCJkaXN0YW5jZSIsImRpc3RhbmNlVG8iLCJyYXkiLCJvcmlnaW4iLCJuZWFyIiwiZmFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/PrimitivePool.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/PrimitivePool.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrimitivePool: () => (/* binding */ PrimitivePool)\n/* harmony export */ });\nclass PrimitivePool {\n    constructor(getNewPrimitive){\n        this._getNewPrimitive = getNewPrimitive;\n        this._primitives = [];\n    }\n    getPrimitive() {\n        const primitives = this._primitives;\n        if (primitives.length === 0) {\n            return this._getNewPrimitive();\n        } else {\n            return primitives.pop();\n        }\n    }\n    releasePrimitive(primitive) {\n        this._primitives.push(primitive);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9QcmltaXRpdmVQb29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtJQUVaQyxZQUFhQyxlQUFlLENBQUc7UUFFOUIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0Q7UUFDeEIsSUFBSSxDQUFDRSxXQUFXLEdBQUcsRUFBRTtJQUV0QjtJQUVBQyxlQUFlO1FBRWQsTUFBTUMsYUFBYSxJQUFJLENBQUNGLFdBQVc7UUFDbkMsSUFBS0UsV0FBV0MsTUFBTSxLQUFLLEdBQUk7WUFFOUIsT0FBTyxJQUFJLENBQUNKLGdCQUFnQjtRQUU3QixPQUFPO1lBRU4sT0FBT0csV0FBV0UsR0FBRztRQUV0QjtJQUVEO0lBRUFDLGlCQUFrQkMsU0FBUyxFQUFHO1FBRTdCLElBQUksQ0FBQ04sV0FBVyxDQUFDTyxJQUFJLENBQUVEO0lBRXhCO0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLTNkLWNvZGUvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvbm9kZV9tb2R1bGVzL3RocmVlLW1lc2gtYnZoL3NyYy91dGlscy9QcmltaXRpdmVQb29sLmpzPzRiZjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFByaW1pdGl2ZVBvb2wge1xuXG5cdGNvbnN0cnVjdG9yKCBnZXROZXdQcmltaXRpdmUgKSB7XG5cblx0XHR0aGlzLl9nZXROZXdQcmltaXRpdmUgPSBnZXROZXdQcmltaXRpdmU7XG5cdFx0dGhpcy5fcHJpbWl0aXZlcyA9IFtdO1xuXG5cdH1cblxuXHRnZXRQcmltaXRpdmUoKSB7XG5cblx0XHRjb25zdCBwcmltaXRpdmVzID0gdGhpcy5fcHJpbWl0aXZlcztcblx0XHRpZiAoIHByaW1pdGl2ZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2V0TmV3UHJpbWl0aXZlKCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gcHJpbWl0aXZlcy5wb3AoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmVsZWFzZVByaW1pdGl2ZSggcHJpbWl0aXZlICkge1xuXG5cdFx0dGhpcy5fcHJpbWl0aXZlcy5wdXNoKCBwcmltaXRpdmUgKTtcblxuXHR9XG5cbn1cbiJdLCJuYW1lcyI6WyJQcmltaXRpdmVQb29sIiwiY29uc3RydWN0b3IiLCJnZXROZXdQcmltaXRpdmUiLCJfZ2V0TmV3UHJpbWl0aXZlIiwiX3ByaW1pdGl2ZXMiLCJnZXRQcmltaXRpdmUiLCJwcmltaXRpdmVzIiwibGVuZ3RoIiwicG9wIiwicmVsZWFzZVByaW1pdGl2ZSIsInByaW1pdGl2ZSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/PrimitivePool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectTri: () => (/* binding */ intersectTri)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nconst _vA = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _vB = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _vC = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _uvA = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst _uvB = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst _uvC = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst _normalA = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _normalB = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _normalC = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _intersectionPoint = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nfunction checkIntersection(ray, pA, pB, pC, point, side) {\n    let intersect;\n    if (side === three__WEBPACK_IMPORTED_MODULE_0__.BackSide) {\n        intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n    } else {\n        intersect = ray.intersectTriangle(pA, pB, pC, side !== three__WEBPACK_IMPORTED_MODULE_0__.DoubleSide, point);\n    }\n    if (intersect === null) return null;\n    const distance = ray.origin.distanceTo(point);\n    return {\n        distance: distance,\n        point: point.clone()\n    };\n}\nfunction checkBufferGeometryIntersection(ray, position, normal, uv, uv1, a, b, c, side) {\n    _vA.fromBufferAttribute(position, a);\n    _vB.fromBufferAttribute(position, b);\n    _vC.fromBufferAttribute(position, c);\n    const intersection = checkIntersection(ray, _vA, _vB, _vC, _intersectionPoint, side);\n    if (intersection) {\n        if (uv) {\n            _uvA.fromBufferAttribute(uv, a);\n            _uvB.fromBufferAttribute(uv, b);\n            _uvC.fromBufferAttribute(uv, c);\n            intersection.uv = three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new three__WEBPACK_IMPORTED_MODULE_0__.Vector2());\n        }\n        if (uv1) {\n            _uvA.fromBufferAttribute(uv1, a);\n            _uvB.fromBufferAttribute(uv1, b);\n            _uvC.fromBufferAttribute(uv1, c);\n            intersection.uv1 = three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new three__WEBPACK_IMPORTED_MODULE_0__.Vector2());\n        }\n        if (normal) {\n            _normalA.fromBufferAttribute(normal, a);\n            _normalB.fromBufferAttribute(normal, b);\n            _normalC.fromBufferAttribute(normal, c);\n            intersection.normal = three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(_intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n            if (intersection.normal.dot(ray.direction) > 0) {\n                intersection.normal.multiplyScalar(-1);\n            }\n        }\n        const face = {\n            a: a,\n            b: b,\n            c: c,\n            normal: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(),\n            materialIndex: 0\n        };\n        three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getNormal(_vA, _vB, _vC, face.normal);\n        intersection.face = face;\n        intersection.faceIndex = a;\n    }\n    return intersection;\n}\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri(geo, side, ray, tri, intersections) {\n    const triOffset = tri * 3;\n    let a = triOffset + 0;\n    let b = triOffset + 1;\n    let c = triOffset + 2;\n    const index = geo.index;\n    if (geo.index) {\n        a = index.getX(a);\n        b = index.getX(b);\n        c = index.getX(c);\n    }\n    const { position, normal, uv, uv1 } = geo.attributes;\n    const intersection = checkBufferGeometryIntersection(ray, position, normal, uv, uv1, a, b, c, side);\n    if (intersection) {\n        intersection.faceIndex = tri;\n        if (intersections) intersections.push(intersection);\n        return intersection;\n    }\n    return null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTriangleHitPointInfo: () => (/* binding */ getTriangleHitPointInfo),\n/* harmony export */   setTriangle: () => (/* binding */ setTriangle)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\n// sets the vertices of triangle `tri` with the 3 vertices after i\nfunction setTriangle(tri, i, index, pos) {\n    const ta = tri.a;\n    const tb = tri.b;\n    const tc = tri.c;\n    let i0 = i;\n    let i1 = i + 1;\n    let i2 = i + 2;\n    if (index) {\n        i0 = index.getX(i0);\n        i1 = index.getX(i1);\n        i2 = index.getX(i2);\n    }\n    ta.x = pos.getX(i0);\n    ta.y = pos.getY(i0);\n    ta.z = pos.getZ(i0);\n    tb.x = pos.getX(i1);\n    tb.y = pos.getY(i1);\n    tb.z = pos.getZ(i1);\n    tc.x = pos.getX(i2);\n    tc.y = pos.getY(i2);\n    tc.z = pos.getZ(i2);\n}\nconst tempV1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst tempV2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst tempV3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst tempUV1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst tempUV2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nconst tempUV3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\nfunction getTriangleHitPointInfo(point, geometry, triangleIndex, target) {\n    const indices = geometry.getIndex().array;\n    const positions = geometry.getAttribute(\"position\");\n    const uvs = geometry.getAttribute(\"uv\");\n    const a = indices[triangleIndex * 3];\n    const b = indices[triangleIndex * 3 + 1];\n    const c = indices[triangleIndex * 3 + 2];\n    tempV1.fromBufferAttribute(positions, a);\n    tempV2.fromBufferAttribute(positions, b);\n    tempV3.fromBufferAttribute(positions, c);\n    // find the associated material index\n    let materialIndex = 0;\n    const groups = geometry.groups;\n    const firstVertexIndex = triangleIndex * 3;\n    for(let i = 0, l = groups.length; i < l; i++){\n        const group = groups[i];\n        const { start, count } = group;\n        if (firstVertexIndex >= start && firstVertexIndex < start + count) {\n            materialIndex = group.materialIndex;\n            break;\n        }\n    }\n    // extract uvs\n    let uv = null;\n    if (uvs) {\n        tempUV1.fromBufferAttribute(uvs, a);\n        tempUV2.fromBufferAttribute(uvs, b);\n        tempUV3.fromBufferAttribute(uvs, c);\n        if (target && target.uv) uv = target.uv;\n        else uv = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getInterpolation(point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv);\n    }\n    // adjust the provided target or create a new one\n    if (target) {\n        if (!target.face) target.face = {};\n        target.face.a = a;\n        target.face.b = b;\n        target.face.c = c;\n        target.face.materialIndex = materialIndex;\n        if (!target.face.normal) target.face.normal = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getNormal(tempV1, tempV2, tempV3, target.face.normal);\n        if (uv) target.uv = uv;\n        return target;\n    } else {\n        return {\n            face: {\n                a: a,\n                b: b,\n                c: c,\n                materialIndex: materialIndex,\n                normal: three__WEBPACK_IMPORTED_MODULE_0__.Triangle.getNormal(tempV1, tempV2, tempV3, new three__WEBPACK_IMPORTED_MODULE_0__.Vector3())\n            },\n            uv: uv\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js\n");

/***/ })

};
;